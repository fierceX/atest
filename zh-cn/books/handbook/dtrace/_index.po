# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2023-12-17 04:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: description
#: documentation/content/en/books/handbook/dtrace/_index.adoc:1
#, fuzzy, no-wrap
msgid "This chapter explains how to use DTrace in FreeBSD"
msgstr "本章介绍了如何在FreeBSD中使用DTrace。"

#. type: YAML Front Matter: part
#: documentation/content/en/books/handbook/dtrace/_index.adoc:1
#, fuzzy, no-wrap
msgid "Part III. System Administration"
msgstr "第三部分. 系统管理"

#. type: YAML Front Matter: title
#: documentation/content/en/books/handbook/dtrace/_index.adoc:1
#, fuzzy, no-wrap
msgid "Chapter 27. DTrace"
msgstr "第27章 DTrace"

#. type: Title =
#: documentation/content/en/books/handbook/dtrace/_index.adoc:14
#, fuzzy, no-wrap
msgid "DTrace"
msgstr ""
"DTrace是一个动态跟踪工具，用于在计算机系统中监测、诊断和分析软件的运行。它允许开发人员和系统管理员通过创建和执行脚本来捕获和监视程序的运行时信息。DTrace在操作系统级别进行跟踪，并提供了强大的工具和"
" "
"API，用于收集、分析和可视化系统的性能数据。使用DTrace，用户可以深入了解程序的行为，发现和解决性能问题，优化和调试应用程序，以及提高系统的可靠性和稳定性。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:39
#, fuzzy
msgid ""
"include::shared/attributes/attributes-{{% lang %}}.adoc[] "
"include::shared/{{% lang %}}/teams.adoc[] include::shared/{{% lang "
"%}}/mailing-lists.adoc[] include::shared/{{% lang %}}/urls.adoc[]"
msgstr ""
"include::shared/attributes/attributes-{{% lang %}}.adoc[]\n"
"include::shared/{{% lang %}}/teams.adoc[]\n"
"include::shared/{{% lang %}}/mailing-lists.adoc[]\n"
"include::shared/{{% lang %}}/urls.adoc[]"

#. type: Title ==
#: documentation/content/en/books/handbook/dtrace/_index.adoc:52
#, fuzzy, no-wrap
msgid "Synopsis"
msgstr "简介"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:56
#, fuzzy
msgid ""
"DTrace, also known as Dynamic Tracing, was developed by Sun(TM) as a tool "
"for locating performance bottlenecks in production and pre-production "
"systems.  In addition to diagnosing performance problems, DTrace can be used"
" to help investigate and debug unexpected behavior in both the FreeBSD "
"kernel and in userland programs."
msgstr ""
"DTrace，也被称为动态跟踪，是Sun公司开发的一个工具，用于定位生产和预生产系统中的性能瓶颈。除了诊断性能问题外，DTrace还可以帮助调查和调试FreeBSD内核和用户空间程序中的意外行为。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:60
#, fuzzy
msgid ""
"DTrace is a remarkable profiling tool, with an impressive array of features "
"for diagnosing system issues.  It may also be used to run pre-written "
"scripts to take advantage of its capabilities.  Users can author their own "
"utilities using the DTrace D Language, allowing them to customize their "
"profiling based on specific needs."
msgstr ""
"DTrace是一个出色的性能分析工具，具有令人印象深刻的一系列功能，用于诊断系统问题。它还可以用于运行预先编写的脚本，以利用其能力。用户可以使用DTrace的D语言编写自己的实用工具，以根据特定需求进行自定义性能分析。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:64
#, fuzzy
msgid ""
"The FreeBSD implementation provides full support for kernel DTrace and "
"experimental support for userland DTrace.  Userland DTrace allows users to "
"perform function boundary tracing for userland programs using the `pid` "
"provider, and to insert static probes into userland programs for later "
"tracing.  Some ports, such as package:databases/postgresql12-server[] and "
"package:lang/php74[] have a DTrace option to enable static probes."
msgstr ""
"FreeBSD实现完全支持内核DTrace，并对用户空间DTrace提供实验性支持。用户空间DTrace允许用户使用`pid`提供程序对用户空间程序进行函数边界跟踪，并在用户空间程序中插入静态探针以供后续跟踪。一些端口，例如package:databases/postgresql12-server[]和package:lang/php74[]，具有启用静态探针的DTrace选项。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:66
#, fuzzy
msgid ""
"The official guide to DTrace is maintained by the Illumos project at "
"http://dtrace.org/guide[DTrace Guide]."
msgstr "DTrace的官方指南由Illumos项目在http://dtrace.org/guide[DTrace指南]中维护。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:68
#, fuzzy
msgid "After reading this chapter, you will know:"
msgstr "阅读本章后，您将了解："

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:70
#, fuzzy
msgid "What DTrace is and what features it provides."
msgstr ""
"DTrace 是什么以及它提供的功能。\n"
"\n"
"DTrace 是一种基于事件追踪和动态跟踪技术的工具。它是一种在操作系统和应用程序层面收集性能数据的工具。DTrace 提供了一种探测、诊断和解决系统性能问题的强大机制。它可以用于监视和跟踪应用程序的运行状态，以及分析底层操作系统的行为。\n"
"\n"
"DTrace 在许多方面提供了强大的功能。它的一些主要特点包括：\n"
"\n"
"1. 动态探测：DTrace 允许用户在运行时动态地探测和收集各种事件数据。这些事件可以是操作系统内核的函数调用、用户进程的系统调用、文件系统访问等。用户可以根据自己的需求定义和监视事件。\n"
"\n"
"2. 轻量级：DTrace 内置在操作系统内核中，并采用高效、低影响的方式对系统进行监视。它几乎没有对系统性能和资源消耗的显著影响。\n"
"\n"
"3. 灵活性：DTrace 提供了丰富的脚本语言，用于定义和执行事件探测逻辑。用户可以编写自己的 DTrace 脚本来捕获和分析特定的事件数据，以满足不同的需求。\n"
"\n"
"4. 可扩展性：DTrace 支持在不同的层次上进行功能扩展。它可以通过编写额外的探测器和提供新的功能来增强其能力。\n"
"\n"
"总之，DTrace 是一个功能强大且灵活的工具，可以帮助开发人员和系统管理员深入了解系统和应用程序的行为，并解决性能问题。它被广泛应用于各种操作系统和计算机体系结构中。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:71
#, fuzzy
msgid ""
"Differences between the Solaris(TM) DTrace implementation and the one "
"provided by FreeBSD."
msgstr "Solaris(TM)的DTrace实现和FreeBSD提供的实现之间的差异。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:72
#, fuzzy
msgid "How to enable and use DTrace on FreeBSD."
msgstr "如何在FreeBSD上启用和使用DTrace。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:74
#, fuzzy
msgid "Before reading this chapter, you should:"
msgstr "在阅读本章之前，您应该："

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:76
#, fuzzy
msgid ""
"Understand UNIX(R) and FreeBSD basics (crossref:basics[basics,FreeBSD "
"Basics])."
msgstr "了解 UNIX(R) 和 FreeBSD 的基础知识（参见基础知识[basics, FreeBSD Basics]）。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:77
#, fuzzy
msgid ""
"Have some familiarity with security and how it pertains to FreeBSD "
"(crossref:security[security,Security])."
msgstr "对于与FreeBSD相关的安全性问题有一定的了解（参见:security[security,Security]）。"

#. type: Title ==
#: documentation/content/en/books/handbook/dtrace/_index.adoc:79
#, fuzzy, no-wrap
msgid "Implementation Differences"
msgstr "实现差异"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:84
#, fuzzy
msgid ""
"While the DTrace in FreeBSD is similar to that found in Solaris(TM), "
"differences do exist.  The primary difference is that in FreeBSD, DTrace is "
"implemented as a set of kernel modules and DTrace can not be used until the "
"modules are loaded.  To load all of the necessary modules:"
msgstr ""
"尽管 FreeBSD的DTrace与Solaris(TM)上的类似，但仍然存在一些差异。 "
"主要的区别在于，在FreeBSD中，DTrace是作为一组内核模块实现的，只有在加载了这些模块后才能使用DTrace。 要加载所有必需的模块："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:88
#, no-wrap
msgid "# kldload dtraceall\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:91
#, fuzzy
msgid ""
"Beginning with FreeBSD 10.0-RELEASE, the modules are automatically loaded "
"when `dtrace` is run."
msgstr "从 FreeBSD 10.0-RELEASE 开始，当 `dtrace` 被运行时，模块会自动加载。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:96
#, fuzzy
msgid ""
"FreeBSD uses the `DDB_CTF` kernel option to enable support for loading `CTF`"
" data from kernel modules and the kernel itself.  `CTF` is the Solaris(TM) "
"Compact C Type Format which encapsulates a reduced form of debugging "
"information similar to `DWARF` and the venerable stabs.  `CTF` data is added"
" to binaries by the `ctfconvert` and `ctfmerge` build tools.  The "
"`ctfconvert` utility parses `DWARF``ELF` debug sections created by the "
"compiler and `ctfmerge` merges `CTF``ELF` sections from objects into either "
"executables or shared libraries."
msgstr ""
"FreeBSD使用`DDB_CTF`内核选项来启用对从内核模块和内核本身加载`CTF`数据的支持。`CTF`是Solaris(TM)紧凑C类型格式，它包装了一种类似于`DWARF`和古老的stabs的调试信息的简化形式。通过构建工具`ctfconvert`和`ctfmerge`向二进制文件中添加`CTF`数据。`ctfconvert`工具解析编译器创建的`DWARF`"
" ELF调试部分，`ctfmerge`将对象中的`CTF` ELF部分合并到可执行文件或共享库中。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:103
#, fuzzy
msgid ""
"Some different providers exist for FreeBSD than for Solaris(TM).  Most "
"notable is the `dtmalloc` provider, which allows tracing `malloc()` by type "
"in the FreeBSD kernel.  Some of the providers found in Solaris(TM), such as "
"`cpc` and `mib`, are not present in FreeBSD.  These may appear in future "
"versions of FreeBSD.  Moreover, some of the providers available in both "
"operating systems are not compatible, in the sense that their probes have "
"different argument types.  Thus, `D` scripts written on Solaris(TM) may or "
"may not work unmodified on FreeBSD, and vice versa."
msgstr ""
"FreeBSD和Solaris(TM)之间存在一些不同的提供商。最显著的是`dtmalloc`提供商，它允许在FreeBSD内核中按类型跟踪`malloc()`。在FreeBSD中没有Solaris(TM)中的一些提供商，如`cpc`和`mib`。这些可能会在未来的FreeBSD版本中出现。此外，两个操作系统中都可用的一些提供商不兼容，因为它们的探测器具有不同的参数类型。因此，在Solaris(TM)上编写的`D`脚本可能无法在FreeBSD上不经修改地工作，反之亦然。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:107
#, fuzzy
msgid ""
"Due to security differences, only `root` may use DTrace on FreeBSD.  "
"Solaris(TM) has a few low level security checks which do not yet exist in "
"FreeBSD.  As such, the [.filename]#/dev/dtrace/dtrace# is strictly limited "
"to `root`."
msgstr ""
"由于安全差异，只有 \"root\" 用户可以在 FreeBSD 上使用 DTrace。Solaris(TM) 在安全检查方面有一些低级别的内容，在 "
"FreeBSD 上还不存在。因此，[.filename]#/dev/dtrace/dtrace# 仅限于 \"root\" 用户。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:111
#, fuzzy
msgid ""
"DTrace falls under the Common Development and Distribution License (`CDDL`) "
"license.  To view this license on FreeBSD, see "
"[.filename]#/usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE# or view "
"it online at "
"http://opensource.org/licenses/CDDL-1.0[http://opensource.org/licenses/CDDL-1.0]."
"  While a FreeBSD kernel with DTrace support is `BSD` licensed, the `CDDL` "
"is used when the modules are distributed in binary form or the binaries are "
"loaded."
msgstr ""
"DTrace 是基于 Common Development and Distribution License (`CDDL`) 许可证的。在 "
"FreeBSD 上查看该许可证，可以参考 "
"[.filename]#/usr/src/cddl/contrib/opensolaris/OPENSOLARIS.LICENSE# "
"或在线查看许可证内容：http://opensource.org/licenses/CDDL-1.0[http://opensource.org/licenses/CDDL-1.0]。虽然带有"
" DTrace 支持的 FreeBSD 内核是基于 BSD 许可证的，但在以二进制形式分发模块或加载这些二进制文件时，会使用 CDDL 许可证。"

#. type: Title ==
#: documentation/content/en/books/handbook/dtrace/_index.adoc:113
#, fuzzy, no-wrap
msgid "Enabling DTrace Support"
msgstr "启用DTrace支持"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:117
#, fuzzy
msgid ""
"In FreeBSD 9.2 and 10.0, DTrace support is built into the "
"[.filename]#GENERIC# kernel.  Users of earlier versions of FreeBSD or who "
"prefer to statically compile in DTrace support should add the following "
"lines to a custom kernel configuration file and recompile the kernel using "
"the instructions in crossref:kernelconfig[kernelconfig,Configuring the "
"FreeBSD Kernel]:"
msgstr ""
"在FreeBSD "
"9.2和10.0版本中，DTrace支持已内置于[.filename]#GENERIC#内核中。如果使用早期版本的FreeBSD或者希望静态地编译DTrace支持，用户应将以下行添加到自定义的内核配置文件中，并按照crossref:kernelconfig[kernelconfig,配置FreeBSD内核]中的指导重新编译内核："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:124
#, no-wrap
msgid ""
"options         KDTRACE_HOOKS\n"
"options         DDB_CTF\n"
"makeoptions\tDEBUG=-g\n"
"makeoptions\tWITH_CTF=1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:127
#, fuzzy
msgid "Users of the AMD64 architecture should also add this line:"
msgstr "AMD64 架构的用户还应添加以下行："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:131
#, no-wrap
msgid "options         KDTRACE_FRAME\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:135
#, fuzzy
msgid ""
"This option provides support for `FBT`.  While DTrace will work without this"
" option, there will be limited support for function boundary tracing."
msgstr "该选项提供对 `FBT` 的支持。尽管没有此选项，DTrace仍然可以工作，但是对于函数边界跟踪的支持将受到限制。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:139
#, fuzzy
msgid ""
"Once the FreeBSD system has rebooted into the new kernel, or the DTrace "
"kernel modules have been loaded using `kldload dtraceall`, the system will "
"need support for the Korn shell as the DTrace Toolkit has several utilities "
"written in `ksh`.  Make sure that the package:shells/ksh93[] package or port"
" is installed.  It is also possible to run these tools under "
"package:shells/pdksh[] or package:shells/mksh[]."
msgstr ""
"一旦FreeBSD系统重启到新内核，或者使用`kldload dtraceall`加载了DTrace内核模块，系统将需要支持Korn "
"shell，因为DTrace "
"Toolkit中有一些工具是用`ksh`编写的。确保安装了`shells/ksh93[]`包或端口。也可以在`shells/pdksh[]`或`shells/mksh[]`下运行这些工具。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:144
#, fuzzy
msgid ""
"Finally, install the current DTrace Toolkit, a collection of ready-made "
"scripts for collecting system information.  There are scripts to check open "
"files, memory, `CPU` usage, and a lot more.  FreeBSD 10 installs a few of "
"these scripts into [.filename]#/usr/share/dtrace#.  On other FreeBSD "
"versions, or to install the full DTrace Toolkit, use the "
"package:sysutils/dtrace-toolkit[] package or port."
msgstr ""
"最后，安装当前的 DTrace Toolkit，这是一个收集系统信息的现成脚本集合。其中有用于检查打开文件、内存、CPU "
"使用情况等方面的脚本。FreeBSD 10 将一些这些脚本安装在 [.filename]#/usr/share/dtrace# 目录中。在其他 "
"FreeBSD 版本上，或者为了安装完整的 DTrace Toolkit，可以使用 package:sysutils/dtrace-toolkit[] "
"包或端口进行安装。"

#. type: delimited block = 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:149
#, fuzzy
msgid ""
"The scripts found in [.filename]#/usr/share/dtrace# have been specifically "
"ported to FreeBSD.  Not all of the scripts found in the DTrace Toolkit will "
"work as-is on FreeBSD and some scripts may require some effort in order for "
"them to work on FreeBSD."
msgstr ""
"在[.filename]#/usr/share/dtrace#中找到的脚本已经专门为FreeBSD移植过。并非DTrace "
"Toolkit中的所有脚本在FreeBSD上都能原样运行，一些脚本可能需要一些努力才能在FreeBSD上正常工作。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:155
#, fuzzy
msgid ""
"The DTrace Toolkit includes many scripts in the special language of DTrace."
"  This language is called the D language and it is very similar to C++.  An "
"in depth discussion of the language is beyond the scope of this document.  "
"It is covered extensively in the http://www.dtrace.org/guide[Illumos Dynamic"
" Tracing Guide]."
msgstr ""
"DTrace工具包包含很多使用DTrace特殊语言编写的脚本。这种语言被称为D语言，它与C++非常相似。对该语言的深入讨论超出了本文档的范围。在http://www.dtrace.org/guide[Illumos"
" Dynamic Tracing Guide]中有详尽的介绍。"

#. type: Title ==
#: documentation/content/en/books/handbook/dtrace/_index.adoc:157
#, fuzzy, no-wrap
msgid "Using DTrace"
msgstr ""
"使用 DTrace\n"
"\n"
"DTrace 是一种强大的动态跟踪工具，它在计算机系统中收集和分析性能数据。它最初在 Solaris 操作系统中开发，但现在也可用于其他类 UNIX 操作系统，如 FreeBSD 和 macOS。\n"
"\n"
"DTrace 提供了一种灵活且可编程的方式，能够以低开销的方式监控系统及应用程序的活动。它使用一种称为 D 语言的特殊编程语言，允许用户编写脚本来定义感兴趣的跟踪点和跟踪动作。这些脚本可以在运行时加载和卸载，从而实现动态的跟踪。DTrace 还支持用户创建自定义跟踪点和提供丰富的系统调用和内核函数的事件。\n"
"\n"
"使用 DTrace 可以帮助开发人员和系统管理员深入了解系统的运行状况，诊断性能瓶颈，并进行系统性能优化。它可以用来跟踪函数调用，系统调用，网络活动，文件系统操作和各种进程活动等。通过使用 DTrace，用户可以获得有关系统活动的详细信息，从而更好地理解和优化系统的行为。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:164
#, fuzzy
msgid ""
"DTrace scripts consist of a list of one or more _probes_, or instrumentation"
" points, where each probe is associated with an action.  Whenever the "
"condition for a probe is met, the associated action is executed.  For "
"example, an action may occur when a file is opened, a process is started, or"
" a line of code is executed.  The action might be to log some information or"
" to modify context variables.  The reading and writing of context variables "
"allows probes to share information and to cooperatively analyze the "
"correlation of different events."
msgstr ""
"DTrace "
"脚本由一个或多个探针（或者叫仪器化点）的列表组成，每个探针与一个动作关联。当探针的条件满足时，关联的动作就会被执行。例如，当文件被打开、进程被启动或者一行代码被执行时，就会发生一个动作。该动作可能是记录一些信息或者修改上下文变量。读取和写入上下文变量允许探针共享信息，并合作分析不同事件之间的相关性。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:166
#, fuzzy
msgid ""
"To view all probes, the administrator can execute the following command:"
msgstr "要查看所有探针, 管理员可以执行以下命令:"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:170
#, no-wrap
msgid "# dtrace -l | more\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:174
#, fuzzy
msgid ""
"Each probe has an `ID`, a `PROVIDER` (dtrace or fbt), a `MODULE`, and a "
"`FUNCTION NAME`.  Refer to man:dtrace[1] for more information about this "
"command."
msgstr ""
"每个探针都有一个 `ID`，一个 `PROVIDER`（dtrace 或 fbt），一个 `MODULE` 和一个 `FUNCTION "
"NAME`。有关此命令的更多信息，请参阅 man:dtrace[1]。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:176
#, fuzzy
msgid ""
"The examples in this section provide an overview of how to use two of the "
"fully supported scripts from the DTrace Toolkit: the [.filename]#hotkernel# "
"and [.filename]#procsystime# scripts."
msgstr ""
"本节中的示例概述了如何使用DTrace "
"Toolkit中的两个完全支持的脚本：[.filename]#hotkernel#和[.filename]#procsystime#脚本。"

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:179
#, fuzzy
msgid ""
"The [.filename]#hotkernel# script is designed to identify which function is "
"using the most kernel time.  It will produce output similar to the "
"following:"
msgstr "[.filename]#hotkernel# 脚本的设计目的是识别哪个函数正在使用最多的内核时间。 它将生成类似以下内容的输出："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:185
#, no-wrap
msgid ""
"# cd /usr/local/share/dtrace-toolkit\n"
"# ./hotkernel\n"
"Sampling... Hit Ctrl-C to end.\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:189
#, fuzzy
msgid ""
"As instructed, use the kbd:[Ctrl+C] key combination to stop the process.  "
"Upon termination, the script will display a list of kernel functions and "
"timing information, sorting the output in increasing order of time:"
msgstr ""
"按照指示，使用 kbd:[Ctrl+C] 组合键来停止进程。进程终止后，脚本会显示一个内核函数和时间信息的列表，并将输出按照时间的递增顺序进行排序："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:218
#, no-wrap
msgid ""
"kernel`_thread_lock_flags                                   2   0.0%\n"
"0xc1097063                                                  2   0.0%\n"
"kernel`sched_userret                                        2   0.0%\n"
"kernel`kern_select                                          2   0.0%\n"
"kernel`generic_copyin                                       3   0.0%\n"
"kernel`_mtx_assert                                          3   0.0%\n"
"kernel`vm_fault                                             3   0.0%\n"
"kernel`sopoll_generic                                       3   0.0%\n"
"kernel`fixup_filename                                       4   0.0%\n"
"kernel`_isitmyx                                             4   0.0%\n"
"kernel`find_instance                                        4   0.0%\n"
"kernel`_mtx_unlock_flags                                    5   0.0%\n"
"kernel`syscall                                              5   0.0%\n"
"kernel`DELAY                                                5   0.0%\n"
"0xc108a253                                                  6   0.0%\n"
"kernel`witness_lock                                         7   0.0%\n"
"kernel`read_aux_data_no_wait                                7   0.0%\n"
"kernel`Xint0x80_syscall                                     7   0.0%\n"
"kernel`witness_checkorder                                   7   0.0%\n"
"kernel`sse2_pagezero                                        8   0.0%\n"
"kernel`strncmp                                              9   0.0%\n"
"kernel`spinlock_exit                                       10   0.0%\n"
"kernel`_mtx_lock_flags                                     11   0.0%\n"
"kernel`witness_unlock                                      15   0.0%\n"
"kernel`sched_idletd                                       137   0.3%\n"
"0xc10981a5                                              42139  99.3%\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:222
#, fuzzy
msgid ""
"This script will also work with kernel modules.  To use this feature, run "
"the script with `-m`:"
msgstr "这个脚本也可以用于内核模块。要使用这个特性，请使用`-m`选项运行脚本："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:241
#, no-wrap
msgid ""
"# ./hotkernel -m\n"
"Sampling... Hit Ctrl-C to end.\n"
"^C\n"
"MODULE                                                  COUNT   PCNT\n"
"0xc107882e                                                  1   0.0%\n"
"0xc10e6aa4                                                  1   0.0%\n"
"0xc1076983                                                  1   0.0%\n"
"0xc109708a                                                  1   0.0%\n"
"0xc1075a5d                                                  1   0.0%\n"
"0xc1077325                                                  1   0.0%\n"
"0xc108a245                                                  1   0.0%\n"
"0xc107730d                                                  1   0.0%\n"
"0xc1097063                                                  2   0.0%\n"
"0xc108a253                                                 73   0.0%\n"
"kernel                                                    874   0.4%\n"
"0xc10981a5                                             213781  99.6%\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:247
#, fuzzy
msgid ""
"The [.filename]#procsystime# script captures and prints the system call time"
" usage for a given process `ID` (`PID`) or process name.  In the following "
"example, a new instance of [.filename]#/bin/csh# was spawned.  Then, "
"[.filename]#procsystime# was executed and remained waiting while a few "
"commands were typed on the other incarnation of `csh`.  These are the "
"results of this test:"
msgstr ""
"[.filename]#procsystime#脚本用于捕获并打印给定进程`ID`（`PID`）或进程名称的系统调用时间使用情况。在下面的例子中，产生了一个新的[.filename]#/bin/csh#实例。然后，执行了[.filename]#procsystime#命令，并在另一个`csh`实例上输入了一些命令，此时[.filename]#procsystime#一直处于等待状态。以下是这个测试的结果："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:253
#, no-wrap
msgid ""
"# ./procsystime -n csh\n"
"Tracing... Hit Ctrl-C to end...\n"
"^C\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:255
#, no-wrap
msgid "Elapsed Times for processes csh,\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/dtrace/_index.adoc:275
#, no-wrap
msgid ""
"         SYSCALL          TIME (ns)\n"
"          getpid               6131\n"
"       sigreturn               8121\n"
"           close              19127\n"
"           fcntl              19959\n"
"             dup              26955\n"
"         setpgid              28070\n"
"            stat              31899\n"
"       setitimer              40938\n"
"           wait4              62717\n"
"       sigaction              67372\n"
"     sigprocmask             119091\n"
"    gettimeofday             183710\n"
"           write             263242\n"
"          execve             492547\n"
"           ioctl             770073\n"
"           vfork            3258923\n"
"      sigsuspend            6985124\n"
"            read         3988049784\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/dtrace/_index.adoc:277
#, fuzzy
msgid ""
"As shown, the `read()` system call used the most time in nanoseconds while "
"the `getpid()` system call used the least amount of time."
msgstr "如图所示，`read()`系统调用使用的时间最长，以纳秒为单位，而`getpid()`系统调用使用的时间最短。"
