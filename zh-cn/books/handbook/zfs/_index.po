# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2023-12-17 07:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: description
#: documentation/content/en/books/handbook/zfs/_index.adoc:1
#, fuzzy, no-wrap
msgid ""
"ZFS is an advanced file system designed to solve major problems found in "
"previous storage subsystem software"
msgstr "ZFS 是一种先进的文件系统，旨在解决以前存储子系统软件中存在的主要问题。"

#. type: YAML Front Matter: part
#: documentation/content/en/books/handbook/zfs/_index.adoc:1
#, fuzzy, no-wrap
msgid "Part III. System Administration"
msgstr "第三部分：系统管理"

#. type: YAML Front Matter: title
#: documentation/content/en/books/handbook/zfs/_index.adoc:1
#, fuzzy, no-wrap
msgid "Chapter 22. The Z File System (ZFS)"
msgstr "第 22 章 Z 文件系统（ ZFS ）"

#. type: Title =
#: documentation/content/en/books/handbook/zfs/_index.adoc:14
#, fuzzy, no-wrap
msgid "The Z File System (ZFS)"
msgstr "Z 文件系统（ ZFS ）"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:39
#, fuzzy
msgid ""
"include::shared/attributes/attributes-{{% lang %}}.adoc[] "
"include::shared/{{% lang %}}/teams.adoc[] include::shared/{{% lang "
"%}}/mailing-lists.adoc[] include::shared/{{% lang %}}/urls.adoc[]"
msgstr ""
"include::shared/attributes/attributes-{{% lang %}}.adoc[] "
"include::shared/{{% lang %}}/teams.adoc[] include::shared/{{% lang "
"%}}/mailing-lists.adoc[] include::shared/{{% lang %}}/urls.adoc[]"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:52
#, fuzzy
msgid ""
"ZFS is an advanced file system designed to solve major problems found in "
"previous storage subsystem software."
msgstr "ZFS 是一种先进的文件系统，旨在解决以前存储子系统软件中存在的主要问题。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:54
#, fuzzy
msgid ""
"Originally developed at Sun(TM), ongoing open source ZFS development has "
"moved to the http://open-zfs.org[OpenZFS Project]."
msgstr "最初由 Sun(TM) 开发，持续的开源 ZFS 开发已经转移到了 http://open-zfs.org[OpenZFS 项目] 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:56
#, fuzzy
msgid "ZFS has three major design goals:"
msgstr "ZFS 有三个主要的设计目标："

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:58
#, fuzzy
msgid ""
"Data integrity: All data includes a <<zfs-term-checksum,checksum>> of the "
"data. ZFS calculates checksums and writes them along with the data. When "
"reading that data later, ZFS recalculates the checksums. If the checksums do"
" not match, meaning detecting one or more data errors, ZFS will attempt to "
"automatically correct errors when ditto-, mirror-, or parity-blocks are "
"available."
msgstr ""
"数据完整性：所有数据都包含数据的校验和。 ZFS 会计算校验和并将其与数据一起写入。当以后读取该数据时， ZFS "
"会重新计算校验和。如果校验和不匹配，即检测到一个或多个数据错误， ZFS 将尝试在可用的副本、镜像或奇偶块时自动纠正错误。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:59
#, fuzzy
msgid ""
"Pooled storage: adding physical storage devices to a pool, and allocating "
"storage space from that shared pool. Space is available to all file systems "
"and volumes, and increases by adding new storage devices to the pool."
msgstr "汇集存储：将物理存储设备添加到一个池中，并从该共享池中分配存储空间。空间可供所有文件系统和卷使用，并通过添加新的存储设备到池中来增加。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:60
#, fuzzy
msgid ""
"Performance: caching mechanisms provide increased performance. <<zfs-term-"
"arc,ARC>> is an advanced memory-based read cache. ZFS provides a second "
"level disk-based read cache with <<zfs-term-l2arc,L2ARC>>, and a disk-based "
"synchronous write cache named <<zfs-term-zil,ZIL>>."
msgstr ""
"性能：缓存机制提供了更高的性能。 <<zfs-term-arc , ARC>> 是一种先进的基于内存的读取缓存。 ZFS 提供了第二级基于磁盘的读取缓存"
" <<zfs-term-l2arc , L2ARC>> ，以及一种基于磁盘的同步写入缓存，名为 <<zfs-term-zil , ZIL>> 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:62
#, fuzzy
msgid "A complete list of features and terminology is in <<zfs-term>>."
msgstr "完整的功能和术语列表请参见 <<zfs-term>> 。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:64
#, fuzzy, no-wrap
msgid "What Makes ZFS Different"
msgstr "ZFS 有何不同之处"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:77
#, fuzzy
msgid ""
"More than a file system, ZFS is fundamentally different from traditional "
"file systems.  Combining the traditionally separate roles of volume manager "
"and file system provides ZFS with unique advantages.  The file system is now"
" aware of the underlying structure of the disks.  Traditional file systems "
"could exist on a single disk alone at a time.  If there were two disks then "
"creating two separate file systems was necessary.  A traditional hardware "
"RAID configuration avoided this problem by presenting the operating system "
"with a single logical disk made up of the space provided by physical disks "
"on top of which the operating system placed a file system.  Even with "
"software RAID solutions like those provided by GEOM, the UFS file system "
"living on top of the RAID believes it's dealing with a single device.  ZFS' "
"combination of the volume manager and the file system solves this and allows"
" the creation of file systems that all share a pool of available storage.  "
"One big advantage of ZFS' awareness of the physical disk layout is that "
"existing file systems grow automatically when adding extra disks to the "
"pool.  This new space then becomes available to the file systems.  ZFS can "
"also apply different properties to each file system. This makes it useful to"
" create separate file systems and datasets instead of a single monolithic "
"file system."
msgstr ""
"ZFS 不仅仅是一个文件系统，它在根本上与传统的文件系统有所不同。将卷管理器和文件系统的传统分离角色结合起来，为 ZFS "
"提供了独特的优势。文件系统现在能够意识到底层磁盘的结构。传统的文件系统一次只能存在于单个磁盘上。如果有两个磁盘，那么就需要创建两个单独的文件系统。传统的硬件"
" RAID 配置通过将操作系统呈现为由物理磁盘提供的空间组成的单个逻辑磁盘来避免这个问题，操作系统在其上放置一个文件系统。即使使用像 GEOM "
"提供的软件 RAID 解决方案，位于 RAID 之上的 UFS 文件系统也认为它正在处理一个单一设备。 ZFS "
"的卷管理器和文件系统的组合解决了这个问题，并允许创建共享可用存储池的文件系统。 ZFS "
"意识到物理磁盘布局的一个重要优势是，当向池中添加额外的磁盘时，现有的文件系统会自动增长。然后，这个新空间就可以供文件系统使用。 ZFS "
"还可以为每个文件系统应用不同的属性。这使得创建单独的文件系统和数据集比创建单个的整体文件系统更有用。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:79
#, fuzzy, no-wrap
msgid "Quick Start Guide"
msgstr "快速入门指南"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:83
#, fuzzy
msgid ""
"FreeBSD can mount ZFS pools and datasets during system initialization.  To "
"enable it, add this line to [.filename]#/etc/rc.conf#:"
msgstr "FreeBSD 可以在系统初始化期间挂载 ZFS 池和数据集。要启用它，请将以下行添加到 [/etc/rc.conf] 文件中："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:87
#, no-wrap
msgid "zfs_enable=\"YES\"\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:90
#, fuzzy
msgid "Then start the service:"
msgstr "然后启动服务："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:94
#, no-wrap
msgid "# service zfs start\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:98
#, fuzzy
msgid ""
"The examples in this section assume three SCSI disks with the device names "
"[.filename]#da0#, [.filename]#da1#, and [.filename]#da2#.  Users of SATA "
"hardware should instead use [.filename]#ada# device names."
msgstr ""
"本节中的示例假设有三个 SCSI 磁盘，设备名称分别为 [.filename]#da0# 、 [.filename]#da1# 和 "
"[.filename]#da2# 。使用 SATA 硬件的用户应该使用 [.filename]#ada# 设备名称。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:100
#, fuzzy, no-wrap
msgid "Single Disk Pool"
msgstr "单磁盘池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:103
#, fuzzy
msgid "To create a simple, non-redundant pool using a single disk device:"
msgstr "要使用单个磁盘设备创建一个简单且非冗余的池，请按以下步骤操作："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:107
#, no-wrap
msgid "# zpool create example /dev/da0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:110
#, fuzzy
msgid "To view the new pool, review the output of `df`:"
msgstr "要查看新的存储池，请查看 `df` 命令的输出："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:119
#, no-wrap
msgid ""
"# df\n"
"Filesystem  1K-blocks    Used    Avail Capacity  Mounted on\n"
"/dev/ad0s1a   2026030  235230  1628718    13%    /\n"
"devfs               1       1        0   100%    /dev\n"
"/dev/ad0s1d  54098308 1032846 48737598     2%    /usr\n"
"example      17547136       0 17547136     0%    /example\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:123
#, fuzzy
msgid ""
"This output shows creating and mounting of the `example` pool, and that is "
"now accessible as a file system.  Create files for users to browse:"
msgstr "这个输出显示了创建和挂载 `example` 池，并且现在可以作为文件系统访问。为用户创建文件以供浏览："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:134
#, no-wrap
msgid ""
"# cd /example\n"
"# ls\n"
"# touch testfile\n"
"# ls -al\n"
"total 4\n"
"drwxr-xr-x   2 root  wheel    3 Aug 29 23:15 .\n"
"drwxr-xr-x  21 root  wheel  512 Aug 29 23:12 ..\n"
"-rw-r--r--   1 root  wheel    0 Aug 29 23:15 testfile\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:138
#, fuzzy
msgid ""
"This pool is not using any advanced ZFS features and properties yet.  To "
"create a dataset on this pool with compression enabled:"
msgstr "此池尚未使用任何高级的 ZFS 功能和属性。要在此池上创建启用了压缩的数据集，请执行以下操作："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:143
#, no-wrap
msgid ""
"# zfs create example/compressed\n"
"# zfs set compression=gzip example/compressed\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:147
#, fuzzy
msgid ""
"The `example/compressed` dataset is now a ZFS compressed file system.  Try "
"copying some large files to [.filename]#/example/compressed#."
msgstr ""
"`example/compressed` 数据集现在是一个 ZFS 压缩文件系统。尝试将一些大文件复制到 `/example/compressed` 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:149
#, fuzzy
msgid "Disable compression with:"
msgstr "禁用压缩功能："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:153
#, no-wrap
msgid "# zfs set compression=off example/compressed\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:156
#, fuzzy
msgid "To unmount a file system, use `zfs umount` and then verify with `df`:"
msgstr "要卸载文件系统，请使用 `zfs umount` 命令，然后使用 `df` 命令进行验证："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:166
#, no-wrap
msgid ""
"# zfs umount example/compressed\n"
"# df\n"
"Filesystem  1K-blocks    Used    Avail Capacity  Mounted on\n"
"/dev/ad0s1a   2026030  235232  1628716    13%    /\n"
"devfs               1       1        0   100%    /dev\n"
"/dev/ad0s1d  54098308 1032864 48737580     2%    /usr\n"
"example      17547008       0 17547008     0%    /example\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:169
#, fuzzy
msgid ""
"To re-mount the file system to make it accessible again, use `zfs mount` and"
" verify with `df`:"
msgstr "要重新挂载文件系统以使其再次可访问，请使用 `zfs mount` 命令，并使用 `df` 命令进行验证："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:180
#, no-wrap
msgid ""
"# zfs mount example/compressed\n"
"# df\n"
"Filesystem         1K-blocks    Used    Avail Capacity  Mounted on\n"
"/dev/ad0s1a          2026030  235234  1628714    13%    /\n"
"devfs                      1       1        0   100%    /dev\n"
"/dev/ad0s1d         54098308 1032864 48737580     2%    /usr\n"
"example             17547008       0 17547008     0%    /example\n"
"example/compressed  17547008       0 17547008     0%    /example/compressed\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:183
#, fuzzy
msgid "Running `mount` shows the pool and file systems:"
msgstr "运行 `mount` 命令会显示池和文件系统："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:192
#, no-wrap
msgid ""
"# mount\n"
"/dev/ad0s1a on / (ufs, local)\n"
"devfs on /dev (devfs, local)\n"
"/dev/ad0s1d on /usr (ufs, local, soft-updates)\n"
"example on /example (zfs, local)\n"
"example/compressed on /example/compressed (zfs, local)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:198
#, fuzzy
msgid ""
"Use ZFS datasets like any file system after creation.  Set other available "
"features on a per-dataset basis when needed.  The example below creates a "
"new file system called `data`.  It assumes the file system contains "
"important files and configures it to store two copies of each data block."
msgstr ""
"创建后，可以像任何文件系统一样使用 ZFS 数据集。根据需要，可以在每个数据集上设置其他可用的功能。下面的示例创建了一个名为 `data` "
"的新文件系统。它假设该文件系统包含重要文件，并将其配置为存储每个数据块的两个副本。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:203
#, no-wrap
msgid ""
"# zfs create example/data\n"
"# zfs set copies=2 example/data\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:206
#, fuzzy
msgid "Use `df` to see the data and space usage:"
msgstr "使用 `df` 命令查看数据和空间使用情况："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:217
#, no-wrap
msgid ""
"# df\n"
"Filesystem         1K-blocks    Used    Avail Capacity  Mounted on\n"
"/dev/ad0s1a          2026030  235234  1628714    13%    /\n"
"devfs                      1       1        0   100%    /dev\n"
"/dev/ad0s1d         54098308 1032864 48737580     2%    /usr\n"
"example             17547008       0 17547008     0%    /example\n"
"example/compressed  17547008       0 17547008     0%    /example/compressed\n"
"example/data        17547008       0 17547008     0%    /example/data\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:222
#, fuzzy
msgid ""
"Notice that all file systems in the pool have the same available space.  "
"Using `df` in these examples shows that the file systems use the space they "
"need and all draw from the same pool.  ZFS gets rid of concepts such as "
"volumes and partitions, and allows several file systems to share the same "
"pool."
msgstr ""
"请注意，池中的所有文件系统都具有相同的可用空间。在这些示例中使用 `df` 命令显示，文件系统使用它们所需的空间，并且都从同一个池中获取。 ZFS "
"摒弃了卷和分区等概念，允许多个文件系统共享同一个池。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:224
#, fuzzy
msgid ""
"To destroy the file systems and then the pool that is no longer needed:"
msgstr "销毁不再需要的文件系统和池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:230
#, no-wrap
msgid ""
"# zfs destroy example/compressed\n"
"# zfs destroy example/data\n"
"# zpool destroy example\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:233
#, , no-wrap
msgid "RAID-Z"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:239
#, fuzzy
msgid ""
"Disks fail.  One way to avoid data loss from disk failure is to use RAID.  "
"ZFS supports this feature in its pool design.  RAID-Z pools require three or"
" more disks but provide more usable space than mirrored pools."
msgstr ""
"磁盘会出现故障。避免因磁盘故障导致数据丢失的一种方法是使用 RAID 。 ZFS 在其存储池设计中支持此功能。 RAID-Z "
"存储池需要三个或更多的磁盘，但提供比镜像存储池更多的可用空间。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:241
#, fuzzy
msgid ""
"This example creates a RAID-Z pool, specifying the disks to add to the pool:"
msgstr "这个示例创建了一个 RAID-Z 池，指定要添加到池中的磁盘："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:245
#, no-wrap
msgid "# zpool create storage raidz da0 da1 da2\n"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:253
#, fuzzy
msgid ""
"Sun(TM) recommends that the number of devices used in a RAID-Z configuration"
" be between three and nine.  For environments requiring a single pool "
"consisting of 10 disks or more, consider breaking it up into smaller RAID-Z "
"groups.  If two disks are available, ZFS mirroring provides redundancy if "
"required.  Refer to man:zpool[8] for more details."
msgstr ""
"Sun(TM) 建议在 RAID-Z 配置中使用的设备数量应在三到九之间。对于需要由 10 个或更多磁盘组成的单个池的环境，考虑将其分成较小的 "
"RAID-Z 组。如果有两个磁盘可用，可以使用 ZFS 镜像提供冗余性（如果需要）。有关更多详细信息，请参阅 man:zpool[8] 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:257
#, fuzzy
msgid ""
"The previous example created the `storage` zpool.  This example makes a new "
"file system called `home` in that pool:"
msgstr "前面的示例创建了名为 `storage` 的 `zpool` 。这个示例在该池中创建了一个名为 `home` 的新文件系统："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:261
#, no-wrap
msgid "# zfs create storage/home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:264
#, fuzzy
msgid "Enable compression and store an extra copy of directories and files:"
msgstr "启用压缩并存储目录和文件的额外副本："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:269
#, no-wrap
msgid ""
"# zfs set copies=2 storage/home\n"
"# zfs set compression=gzip storage/home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:272
#, fuzzy
msgid ""
"To make this the new home directory for users, copy the user data to this "
"directory and create the appropriate symbolic links:"
msgstr "要将此目录设置为用户的新家目录，请将用户数据复制到此目录并创建相应的符号链接："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:279
#, no-wrap
msgid ""
"# cp -rp /home/* /storage/home\n"
"# rm -rf /home /usr/home\n"
"# ln -s /storage/home /home\n"
"# ln -s /storage/home /usr/home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:283
#, fuzzy
msgid ""
"Users data is now stored on the freshly-created [.filename]#/storage/home#."
"  Test by adding a new user and logging in as that user."
msgstr "用户数据现在存储在新创建的 [.filename]#/storage/home# 上。通过添加一个新用户并以该用户身份登录来进行测试。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:285
#, fuzzy
msgid "Create a file system snapshot to roll back to later:"
msgstr "创建一个文件系统快照，以便以后可以回滚："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:289
#, no-wrap
msgid "# zfs snapshot storage/home@08-30-08\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:292
#, fuzzy
msgid "ZFS creates snapshots of a dataset, not a single directory or file."
msgstr "ZFS 创建数据集的快照，而不是单个目录或文件。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:295
#, fuzzy
msgid ""
"The `@` character is a delimiter between the file system name or the volume "
"name.  Before deleting an important directory, back up the file system, then"
" roll back to an earlier snapshot in which the directory still exists:"
msgstr "` @ ` 字符是文件系统名称或卷名称之间的分隔符。在删除重要目录之前，先备份文件系统，然后回滚到一个早期的快照，其中目录仍然存在："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:299
#, no-wrap
msgid "# zfs rollback storage/home@08-30-08\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:303
#, fuzzy
msgid ""
"To list all available snapshots, run `ls` in the file system's "
"[.filename]#.zfs/snapshot# directory.  For example, to see the snapshot "
"taken:"
msgstr "要列出所有可用的快照，请在文件系统的 `.zfs/snapshot` 目录中运行 `ls` 命令。例如，要查看已拍摄的快照："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:307
#, no-wrap
msgid "# ls /storage/home/.zfs/snapshot\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:312
#, fuzzy
msgid ""
"Write a script to take regular snapshots of user data.  Over time, snapshots"
" can use up a lot of disk space.  Remove the previous snapshot using the "
"command:"
msgstr "编写一个脚本来定期对用户数据进行快照。随着时间的推移，快照可能会占用大量的磁盘空间。使用以下命令删除先前的快照："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:316
#, no-wrap
msgid "# zfs destroy storage/home@08-30-08\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:320
#, fuzzy
msgid ""
"After testing, make [.filename]#/storage/home# the real [.filename]#/home# "
"with this command:"
msgstr "经过测试，使用以下命令将 [.filename]#/storage/home# 设置为真实的 [.filename]#/home# ："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:324
#, no-wrap
msgid "# zfs set mountpoint=/home storage/home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:327
#, fuzzy
msgid ""
"Run `df` and `mount` to confirm that the system now treats the file system "
"as the real [.filename]#/home#:"
msgstr "运行 `df` 和 `mount` 命令来确认系统现在将文件系统视为真实的 [.filename]#/home# ："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:343
#, no-wrap
msgid ""
"# mount\n"
"/dev/ad0s1a on / (ufs, local)\n"
"devfs on /dev (devfs, local)\n"
"/dev/ad0s1d on /usr (ufs, local, soft-updates)\n"
"storage on /storage (zfs, local)\n"
"storage/home on /home (zfs, local)\n"
"# df\n"
"Filesystem   1K-blocks    Used    Avail Capacity  Mounted on\n"
"/dev/ad0s1a    2026030  235240  1628708    13%    /\n"
"devfs                1       1        0   100%    /dev\n"
"/dev/ad0s1d   54098308 1032826 48737618     2%    /usr\n"
"storage       26320512       0 26320512     0%    /storage\n"
"storage/home  26320512       0 26320512     0%    /home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:347
#, fuzzy
msgid ""
"This completes the RAID-Z configuration.  Add daily status updates about the"
" created file systems to the nightly man:periodic[8] runs by adding this "
"line to [.filename]#/etc/periodic.conf#:"
msgstr ""
"这样就完成了 RAID-Z 的配置。通过将以下行添加到 [.filename]#/etc/periodic.conf# "
"，可以将关于创建的文件系统的每日状态更新添加到夜间的 man:periodic[8] 运行中："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:351
#, no-wrap
msgid "daily_status_zfs_enable=\"YES\"\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:354
#, fuzzy, no-wrap
msgid "Recovering RAID-Z"
msgstr "恢复 RAID-Z"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:358
#, fuzzy
msgid ""
"Every software RAID has a method of monitoring its `state`.  View the status"
" of RAID-Z devices using:"
msgstr "每个软件 RAID 都有一种监控其 `state` 的方法。使用以下命令查看 RAID-Z 设备的状态："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:362
#, no-wrap
msgid "# zpool status -x\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:365
#, fuzzy
msgid ""
"If all pools are <<zfs-term-online,Online>> and everything is normal, the "
"message shows:"
msgstr "如果所有池都处于在线状态，并且一切正常，消息将显示："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:369
#, no-wrap
msgid "all pools are healthy\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:372
#, fuzzy
msgid ""
"If there is a problem, perhaps a disk being in the <<zfs-term-"
"offline,Offline>> state, the pool state will look like this:"
msgstr "如果出现问题，比如磁盘处于离线状态（ <<zfs-term-offline , Offline>> ），池的状态将如下所示："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:384
#, no-wrap
msgid ""
"  pool: storage\n"
" state: DEGRADED\n"
"status: One or more devices has been taken offline by the administrator.\n"
"\tSufficient replicas exist for the pool to continue functioning in a\n"
"\tdegraded state.\n"
"action: Online the device using 'zpool online' or replace the device with\n"
"\t'zpool replace'.\n"
" scrub: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:391
#, no-wrap
msgid ""
"\tNAME        STATE     READ WRITE CKSUM\n"
"\tstorage     DEGRADED     0     0     0\n"
"\t  raidz1    DEGRADED     0     0     0\n"
"\t    da0     ONLINE       0     0     0\n"
"\t    da1     OFFLINE      0     0     0\n"
"\t    da2     ONLINE       0     0     0\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:393
#: documentation/content/en/books/handbook/zfs/_index.adoc:428
#: documentation/content/en/books/handbook/zfs/_index.adoc:474
#: documentation/content/en/books/handbook/zfs/_index.adoc:517
#: documentation/content/en/books/handbook/zfs/_index.adoc:540
#: documentation/content/en/books/handbook/zfs/_index.adoc:572
#: documentation/content/en/books/handbook/zfs/_index.adoc:651
#: documentation/content/en/books/handbook/zfs/_index.adoc:705
#: documentation/content/en/books/handbook/zfs/_index.adoc:742
#: documentation/content/en/books/handbook/zfs/_index.adoc:771
#: documentation/content/en/books/handbook/zfs/_index.adoc:851
#: documentation/content/en/books/handbook/zfs/_index.adoc:924
#: documentation/content/en/books/handbook/zfs/_index.adoc:955
#: documentation/content/en/books/handbook/zfs/_index.adoc:1055
#: documentation/content/en/books/handbook/zfs/_index.adoc:1099
#: documentation/content/en/books/handbook/zfs/_index.adoc:1124
#: documentation/content/en/books/handbook/zfs/_index.adoc:1144
#, no-wrap
msgid "errors: No known data errors\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:396
#, fuzzy
msgid "\"OFFLINE\" shows the administrator took [.filename]#da1# offline using:"
msgstr "\"OFFLINE\"显示管理员使用以下方式将 [.filename]#da1# 下线："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:400
#, no-wrap
msgid "# zpool offline storage da1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:404
#, fuzzy
msgid ""
"Power down the computer now and replace [.filename]#da1#.  Power up the "
"computer and return [.filename]#da1# to the pool:"
msgstr "立即关闭计算机并更换 [.filename]#da1# 。重新启动计算机并将 [.filename]#da1# 返回到池中："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:408
#, no-wrap
msgid "# zpool replace storage da1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:411
#, fuzzy
msgid ""
"Next, check the status again, this time without `-x` to display all pools:"
msgstr "接下来，再次检查状态，这次不使用 `-x` 选项以显示所有的池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:419
#, no-wrap
msgid ""
"# zpool status storage\n"
" pool: storage\n"
" state: ONLINE\n"
" scrub: resilver completed with 0 errors on Sat Aug 30 19:44:11 2008\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:426
#: documentation/content/en/books/handbook/zfs/_index.adoc:472
#, no-wrap
msgid ""
"\tNAME        STATE     READ WRITE CKSUM\n"
"\tstorage     ONLINE       0     0     0\n"
"\t  raidz1    ONLINE       0     0     0\n"
"\t    da0     ONLINE       0     0     0\n"
"\t    da1     ONLINE       0     0     0\n"
"\t    da2     ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:431
#, fuzzy
msgid "In this example, everything is normal."
msgstr "在这个例子中，一切都正常。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:433
#, fuzzy, no-wrap
msgid "Data Verification"
msgstr "数据验证"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:437
#, fuzzy
msgid ""
"ZFS uses checksums to verify the integrity of stored data.  Creating file "
"systems automatically enables them."
msgstr "ZFS 使用校验和来验证存储数据的完整性。创建文件系统时会自动启用校验和功能。"

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:444
#, fuzzy
msgid ""
"Disabling Checksums is possible but _not_ recommended! Checksums take little"
" storage space and provide data integrity.  Most ZFS features will not work "
"properly with checksums disabled.  Disabling these checksums will not "
"increase performance noticeably."
msgstr ""
"禁用校验和是可能的，但 ** 不推荐 ** ！校验和占用很少的存储空间，并提供数据完整性。大多数 ZFS "
"功能在禁用校验和的情况下将无法正常工作。禁用这些校验和不会明显提高性能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:447
#, fuzzy
msgid ""
"Verifying the data checksums (called _scrubbing_) ensures integrity of the "
"`storage` pool with:"
msgstr "验证数据校验和（称为“ scrubbing ”）可以确保 `storage` 池的完整性，具体操作如下："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:451
#, no-wrap
msgid "# zpool scrub storage\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:457
#, fuzzy
msgid ""
"The duration of a scrub depends on the amount of data stored.  Larger "
"amounts of data will take proportionally longer to verify.  Since scrubbing "
"is I/O intensive, ZFS allows a single scrub to run at a time.  After "
"scrubbing completes, view the status with `zpool status`:"
msgstr ""
"一个 scrub 的持续时间取决于存储的数据量。数据量越大，验证所需的时间就越长。由于 scrub 是 I/O 密集型操作， ZFS 只允许同时运行一个"
" scrub 。在 scrub 完成后，可以使用 `zpool status` 命令查看状态。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:465
#, no-wrap
msgid ""
"# zpool status storage\n"
" pool: storage\n"
" state: ONLINE\n"
" scrub: scrub completed with 0 errors on Sat Jan 26 19:57:37 2013\n"
"config:\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:478
#, fuzzy
msgid ""
"Displaying the completion date of the last scrubbing helps decide when to "
"start another.  Routine scrubs help protect data from silent corruption and "
"ensure the integrity of the pool."
msgstr "显示最后一次清洗的完成日期有助于决定何时开始下一次清洗。例行清洗有助于保护数据免受静默损坏，并确保池的完整性。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:480
#, fuzzy
msgid "Refer to man:zfs[8] and man:zpool[8] for other ZFS options."
msgstr "请参考 man:zfs[8] 和 man:zpool[8] 了解其他 ZFS 选项。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:482
#, fuzzy, no-wrap
msgid "`zpool` Administration"
msgstr "`zpool` 管理"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:487
#, fuzzy
msgid ""
"ZFS administration uses two main utilities.  The `zpool` utility controls "
"the operation of the pool and allows adding, removing, replacing, and "
"managing disks.  The <<zfs-zfs,`zfs`>> utility allows creating, destroying, "
"and managing datasets, both <<zfs-term-filesystem,file systems>> and <<zfs-"
"term-volume,volumes>>."
msgstr ""
"ZFS 管理使用两个主要工具。 `zpool` 工具控制池的操作，允许添加、删除、替换和管理磁盘。 `zfs` "
"工具允许创建、销毁和管理数据集，包括文件系统和卷。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:489
#, fuzzy, no-wrap
msgid "Creating and Destroying Storage Pools"
msgstr "创建和销毁存储池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:498
#, fuzzy
msgid ""
"Creating a ZFS storage pool requires permanent decisions, as the pool "
"structure cannot change after creation.  The most important decision is "
"which types of vdevs to group the physical disks into.  See the list of "
"<<zfs-term-vdev,vdev types>> for details about the possible options.  After "
"creating the pool, most vdev types do not allow adding disks to the vdev.  "
"The exceptions are mirrors, which allow adding new disks to the vdev, and "
"stripes, which upgrade to mirrors by attaching a new disk to the vdev.  "
"Although adding new vdevs expands a pool, the pool layout cannot change "
"after pool creation.  Instead, back up the data, destroy the pool, and "
"recreate it."
msgstr ""
"创建一个 ZFS 存储池需要做出永久性的决策，因为在创建后无法更改池的结构。最重要的决策是将物理磁盘分组成哪种类型的 vdev "
"。有关可能选项的详细信息，请参阅 <<zfs-term-vdev , vdev 类型 >> 列表。创建池后，大多数 vdev 类型不允许向 vdev "
"添加磁盘。例外情况是镜像，它允许向 vdev 添加新磁盘，并且条带可以通过将新磁盘附加到 vdev 来升级为镜像。虽然添加新的 vdev "
"可以扩展池，但池的布局在创建后无法更改。相反，备份数据，销毁池，然后重新创建池。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:500
#, fuzzy
msgid "Create a simple mirror pool:"
msgstr "创建一个简单的镜像池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:509
#, no-wrap
msgid ""
"# zpool create mypool mirror /dev/ada1 /dev/ada2\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:515
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada1    ONLINE       0     0     0\n"
"            ada2    ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:520
#, fuzzy
msgid ""
"To create more than one vdev with a single command, specify groups of disks "
"separated by the vdev type keyword, `mirror` in this example:"
msgstr "要使用单个命令创建多个 vdev ，请使用以 vdev 类型关键字 `mirror` 分隔的磁盘组。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:529
#, no-wrap
msgid ""
"# zpool create mypool mirror /dev/ada1 /dev/ada2 mirror /dev/ada3 /dev/ada4\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:538
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada1    ONLINE       0     0     0\n"
"            ada2    ONLINE       0     0     0\n"
"          mirror-1  ONLINE       0     0     0\n"
"            ada3    ONLINE       0     0     0\n"
"            ada4    ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:549
#, fuzzy
msgid ""
"Pools can also use partitions rather than whole disks.  Putting ZFS in a "
"separate partition allows the same disk to have other partitions for other "
"purposes.  In particular, it allows adding partitions with bootcode and file"
" systems needed for booting.  This allows booting from disks that are also "
"members of a pool.  ZFS adds no performance penalty on FreeBSD when using a "
"partition rather than a whole disk.  Using partitions also allows the "
"administrator to _under-provision_ the disks, using less than the full "
"capacity.  If a future replacement disk of the same nominal size as the "
"original actually has a slightly smaller capacity, the smaller partition "
"will still fit, using the replacement disk."
msgstr ""
"池还可以使用分区而不是整个磁盘。将 ZFS "
"放在单独的分区中可以使同一磁盘具有其他用途的分区。特别是，它允许添加带有引导代码和用于引导的文件系统的分区。这允许从也是池成员的磁盘引导。在 "
"FreeBSD 上，使用分区而不是整个磁盘时， ZFS "
"不会带来性能损失。使用分区还允许管理员对磁盘进行“欠配置”，使用不到全部容量。如果将来替换的磁盘与原始磁盘的名义大小相同，但实际容量略小，较小的分区仍将适应替换磁盘。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:551
#, fuzzy
msgid "Create a <<zfs-term-vdev-raidz,RAID-Z2>> pool using partitions:"
msgstr "使用分区创建一个 <<zfs-term-vdev-raidz , RAID-Z2>> 池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:560
#, no-wrap
msgid ""
"# zpool create mypool raidz2 /dev/ada0p3 /dev/ada1p3 /dev/ada2p3 /dev/ada3p3 /dev/ada4p3 /dev/ada5p3\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:570
#: documentation/content/en/books/handbook/zfs/_index.adoc:769
#: documentation/content/en/books/handbook/zfs/_index.adoc:953
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          raidz2-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada1p3  ONLINE       0     0     0\n"
"            ada2p3  ONLINE       0     0     0\n"
"            ada3p3  ONLINE       0     0     0\n"
"            ada4p3  ONLINE       0     0     0\n"
"            ada5p3  ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:579
#, fuzzy
msgid ""
"Destroy a pool that is no longer needed to reuse the disks.  Destroying a "
"pool requires unmounting the file systems in that pool first.  If any "
"dataset is in use, the unmount operation fails without destroying the pool."
"  Force the pool destruction with `-f`.  This can cause undefined behavior "
"in applications which had open files on those datasets."
msgstr ""
"销毁一个不再需要的池以重用磁盘。销毁池需要先卸载该池中的文件系统。如果有任何数据集正在使用中，卸载操作将失败，不会销毁池。可以使用“ -f "
"”强制销毁池。这可能会导致应用程序中对这些数据集有打开文件的未定义行为。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:581
#, fuzzy, no-wrap
msgid "Adding and Removing Devices"
msgstr "添加和移除设备"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:585
#, fuzzy
msgid ""
"Two ways exist for adding disks to a pool: attaching a disk to an existing "
"vdev with `zpool attach`, or adding vdevs to the pool with `zpool add`.  "
"Some <<zfs-term-vdev,vdev types>> allow adding disks to the vdev after "
"creation."
msgstr ""
"有两种方法可以将磁盘添加到池中：使用 `zpool attach` 将磁盘附加到现有的 vdev 上，或者使用 `zpool add` 将 vdev "
"添加到池中。一些 <<zfs-term-vdev , vdev 类型 >> 允许在创建后向 vdev 添加磁盘。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:594
#, fuzzy
msgid ""
"A pool created with a single disk lacks redundancy.  It can detect "
"corruption but can not repair it, because there is no other copy of the "
"data.  The <<zfs-term-copies,copies>> property may be able to recover from a"
" small failure such as a bad sector, but does not provide the same level of "
"protection as mirroring or RAID-Z.  Starting with a pool consisting of a "
"single disk vdev, use `zpool attach` to add a new disk to the vdev, creating"
" a mirror.  Also use `zpool attach` to add new disks to a mirror group, "
"increasing redundancy and read performance.  When partitioning the disks "
"used for the pool, replicate the layout of the first disk on to the second."
"  Use `gpart backup` and `gpart restore` to make this process easier."
msgstr ""
"使用单个磁盘创建的池缺乏冗余性。它可以检测到损坏，但无法修复，因为没有其他数据的副本。 <<zfs-term-copies ， copies>> "
"属性可以从小故障（如坏扇区）中恢复，但不提供与镜像或 RAID-Z 相同级别的保护。从由单个磁盘 vdev 组成的池开始，使用 `zpool "
"attach` 将新磁盘添加到 vdev 中，创建镜像。还可以使用 `zpool attach` "
"将新磁盘添加到镜像组，增加冗余性和读取性能。在为池分区的磁盘上，将第一个磁盘的布局复制到第二个磁盘上。使用 `gpart backup` 和 "
"`gpart restore` 可以使这个过程更容易。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:596
#, fuzzy
msgid ""
"Upgrade the single disk (stripe) vdev [.filename]#ada0p3# to a mirror by "
"attaching [.filename]#ada1p3#:"
msgstr "通过连接 ada1p3 ，将单个磁盘（条带） vdev ada0p3 升级为镜像："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:604
#: documentation/content/en/books/handbook/zfs/_index.adoc:801
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:608
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          ada0p3    ONLINE       0     0     0\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:612
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool attach mypool ada0p3 ada1p3\n"
"Make sure to wait until resilvering finishes before rebooting.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:614
#, no-wrap
msgid ""
"If you boot from pool 'mypool', you may need to update boot code on newly "
"attached disk _ada1p3_.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:616
#, no-wrap
msgid ""
"Assuming you use GPT partitioning and _da0_ is your new boot disk you may "
"use the following command:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:630
#, no-wrap
msgid ""
"        gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 da0\n"
"# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1\n"
"bootcode written to ada1\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"status: One or more devices is currently being resilvered.  The pool will\n"
"        continue to function, possibly in a degraded state.\n"
"action: Wait for the resilver to complete.\n"
"  scan: resilver in progress since Fri May 30 08:19:19 2014\n"
"        527M scanned out of 781M at 47.9M/s, 0h0m to go\n"
"        527M resilvered, 67.53% done\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:636
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada1p3  ONLINE       0     0     0  (resilvering)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:643
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: resilvered 781M in 0h0m with 0 errors on Fri May 30 08:15:58 2014\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:649
#: documentation/content/en/books/handbook/zfs/_index.adoc:682
#: documentation/content/en/books/handbook/zfs/_index.adoc:740
#: documentation/content/en/books/handbook/zfs/_index.adoc:807
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada1p3  ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:659
#, fuzzy
msgid ""
"When adding disks to the existing vdev is not an option, as for RAID-Z, an "
"alternative method is to add another vdev to the pool.  Adding vdevs "
"provides higher performance by distributing writes across the vdevs.  Each "
"vdev provides its own redundancy.  Mixing vdev types like `mirror` and "
"`RAID-Z` is possible but discouraged.  Adding a non-redundant vdev to a pool"
" containing mirror or RAID-Z vdevs risks the data on the entire pool.  "
"Distributing writes means a failure of the non-redundant disk will result in"
" the loss of a fraction of every block written to the pool."
msgstr ""
"当无法将磁盘添加到现有的 vdev 时，例如对于 RAID-Z ，一种替代方法是向池中添加另一个 vdev 。添加 vdev 可以通过在 vdev "
"之间分布写操作来提供更高的性能。每个 vdev 都提供自己的冗余性。可以混合使用 `mirror` 和 `RAID-Z` 等不同类型的 vdev "
"，但不建议这样做。向包含镜像或 RAID-Z vdev 的池中添加一个非冗余的 vdev "
"会对整个池中的数据造成风险。分布写操作意味着非冗余磁盘的故障将导致丢失对池中每个块的一部分数据。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:664
#, fuzzy
msgid ""
"ZFS stripes data across each of the vdevs.  For example, with two mirror "
"vdevs, this is effectively a RAID 10 that stripes writes across two sets of "
"mirrors.  ZFS allocates space so that each vdev reaches 100% full at the "
"same time.  Having vdevs with different amounts of free space will lower "
"performance, as more data writes go to the less full vdev."
msgstr ""
"ZFS 将数据跨越每个 vdev 进行条带化。例如，使用两个镜像 vdev ，这实际上是一个 RAID 10 ，将写操作跨越两组镜像。 ZFS "
"分配空间以使每个 vdev 在同一时间达到 100 ％的使用率。如果 vdev "
"具有不同数量的可用空间，性能将降低，因为更多的数据写入将发送到使用率较低的 vdev 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:666
#, fuzzy
msgid ""
"When attaching new devices to a boot pool, remember to update the bootcode."
msgstr "在将新设备连接到引导池时，请记得更新引导代码。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:668
#, fuzzy
msgid ""
"Attach a second mirror group ([.filename]#ada2p3# and [.filename]#ada3p3#) "
"to the existing mirror:"
msgstr "将第二个镜像组（ [.filename]#ada2p3# 和 [.filename]#ada3p3# ）附加到现有的镜像中："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:676
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: resilvered 781M in 0h0m with 0 errors on Fri May 30 08:19:35 2014\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:694
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool add mypool mirror ada2p3 ada3p3\n"
"# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada2\n"
"bootcode written to ada2\n"
"# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada3\n"
"bootcode written to ada3\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:703
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada1p3  ONLINE       0     0     0\n"
"          mirror-1  ONLINE       0     0     0\n"
"            ada2p3  ONLINE       0     0     0\n"
"            ada3p3  ONLINE       0     0     0\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:709
#, fuzzy
msgid ""
"Removing vdevs from a pool is impossible and removal of disks from a mirror "
"is exclusive if there is enough remaining redundancy.  If a single disk "
"remains in a mirror group, that group ceases to be a mirror and becomes a "
"stripe, risking the entire pool if that remaining disk fails."
msgstr ""
"从池中删除 vdev "
"是不可能的，如果剩余的冗余足够，从镜像中删除磁盘是独占的。如果镜像组中只剩下一个磁盘，该组将不再是镜像，而变成条带，如果该剩余磁盘故障，将会危及整个池。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:711
#, fuzzy
msgid "Remove a disk from a three-way mirror group:"
msgstr "从三路镜像组中移除一个磁盘："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:719
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:726
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada1p3  ONLINE       0     0     0\n"
"            ada2p3  ONLINE       0     0     0\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:734
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool detach mypool ada2p3\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: scrub repaired 0 in 0h0m with 0 errors on Fri May 30 08:29:51 2014\n"
"config:\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:745
#, fuzzy, no-wrap
msgid "Checking the Status of a Pool"
msgstr "检查池的状态"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:751
#, fuzzy
msgid ""
"Pool status is important.  If a drive goes offline or ZFS detects a read, "
"write, or checksum error, the corresponding error count increases.  The "
"`status` output shows the configuration and status of each device in the "
"pool and the status of the entire pool.  Actions to take and details about "
"the last <<zfs-zpool-scrub,`scrub`>> are also shown."
msgstr ""
"池状态非常重要。如果驱动器离线或 ZFS 检测到读取、写入或校验错误，相应的错误计数会增加。 `status` "
"输出显示了池中每个设备的配置和状态，以及整个池的状态。还显示了要采取的操作和有关上次 `scrub` 的详细信息。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:759
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: scrub repaired 0 in 2h25m with 0 errors on Sat Sep 14 04:25:50 2013\n"
"config:\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:774
#, fuzzy, no-wrap
msgid "Clearing Errors"
msgstr "清除错误"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:780
#, fuzzy
msgid ""
"When detecting an error, ZFS increases the read, write, or checksum error "
"counts.  Clear the error message and reset the counts with `zpool clear "
"_mypool_`.  Clearing the error state can be important for automated scripts "
"that alert the administrator when the pool encounters an error.  Without "
"clearing old errors, the scripts may fail to report further errors."
msgstr ""
"当检测到错误时， ZFS 会增加读取、写入或校验和错误计数。使用 `zpool clear _mypool_` "
"命令清除错误消息并重置计数。清除错误状态对于自动化脚本非常重要，这些脚本在池遇到错误时会通知管理员。如果不清除旧错误，这些脚本可能无法报告后续的错误。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:782
#, fuzzy, no-wrap
msgid "Replacing a Functioning Device"
msgstr "替换一个正常工作的设备"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:791
#, fuzzy
msgid ""
"It may be desirable to replace one disk with a different disk.  When "
"replacing a working disk, the process keeps the old disk online during the "
"replacement.  The pool never enters a <<zfs-term-degraded,degraded>> state, "
"reducing the risk of data loss.  Running `zpool replace` copies the data "
"from the old disk to the new one.  After the operation completes, ZFS "
"disconnects the old disk from the vdev.  If the new disk is larger than the "
"old disk, it may be possible to grow the zpool, using the new space.  See "
"<<zfs-zpool-online,Growing a Pool>>."
msgstr ""
"可能需要用不同的磁盘替换一个磁盘。当替换一个工作中的磁盘时，该过程会在替换期间保持旧磁盘在线。池永远不会进入 <<zfs-term-degraded ,"
" degraded>> 状态，从而降低数据丢失的风险。运行 `zpool replace` 命令将数据从旧磁盘复制到新磁盘。操作完成后， ZFS "
"会将旧磁盘与 vdev 断开连接。如果新磁盘比旧磁盘大，可能可以使用新空间来扩展 zpool 。请参见 <<zfs-zpool-online ,扩展池 "
">> 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:793
#, fuzzy
msgid "Replace a functioning device in the pool:"
msgstr "替换池中的一个正常工作设备："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:811
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool replace mypool ada1p3 ada2p3\n"
"Make sure to wait until resilvering finishes before rebooting.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:813
#, no-wrap
msgid ""
"When booting from the pool 'zroot', update the boot code on the newly "
"attached disk 'ada2p3'.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:815
#, no-wrap
msgid ""
"Assuming GPT partitioning is used and [.filename]#da0# is the new boot disk,"
" use the following command:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:828
#, no-wrap
msgid ""
"        gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 da0\n"
"# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada2\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"status: One or more devices is currently being resilvered.  The pool will\n"
"        continue to function, possibly in a degraded state.\n"
"action: Wait for the resilver to complete.\n"
"  scan: resilver in progress since Mon Jun  2 14:21:35 2014\n"
"        604M scanned out of 781M at 46.5M/s, 0h0m to go\n"
"        604M resilvered, 77.39% done\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:836
#, no-wrap
msgid ""
"        NAME             STATE     READ WRITE CKSUM\n"
"        mypool           ONLINE       0     0     0\n"
"          mirror-0       ONLINE       0     0     0\n"
"            ada0p3       ONLINE       0     0     0\n"
"            replacing-1  ONLINE       0     0     0\n"
"              ada1p3     ONLINE       0     0     0\n"
"              ada2p3     ONLINE       0     0     0  (resilvering)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:843
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: resilvered 781M in 0h0m with 0 errors on Mon Jun  2 14:21:52 2014\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:849
#: documentation/content/en/books/handbook/zfs/_index.adoc:922
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"            ada0p3  ONLINE       0     0     0\n"
"            ada2p3  ONLINE       0     0     0\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:854
#, fuzzy, no-wrap
msgid "Dealing with Failed Devices"
msgstr "处理故障设备"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:862
#, fuzzy
msgid ""
"When a disk in a pool fails, the vdev to which the disk belongs enters the "
"<<zfs-term-degraded,degraded>> state.  The data is still available, but with"
" reduced performance because ZFS computes missing data from the available "
"redundancy.  To restore the vdev to a fully functional state, replace the "
"failed physical device.  ZFS is then instructed to begin the <<zfs-term-"
"resilver,resilver>> operation.  ZFS recomputes data on the failed device "
"from available redundancy and writes it to the replacement device.  After "
"completion, the vdev returns to <<zfs-term-online,online>> status."
msgstr ""
"当池中的磁盘发生故障时，该磁盘所属的 vdev 将进入降级状态。数据仍然可用，但性能降低，因为 ZFS 会通过可用的冗余计算缺失的数据。为了将 vdev"
" 恢复到完全功能状态，需要替换故障的物理设备。然后， ZFS 会开始重新同步操作。 ZFS "
"会通过可用的冗余重新计算故障设备上的数据，并将其写入替代设备。完成后， vdev 将返回在线状态。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:865
#, fuzzy
msgid ""
"If the vdev does not have any redundancy, or if devices have failed and "
"there is not enough redundancy to compensate, the pool enters the <<zfs-"
"term-faulted,faulted>> state.  Unless enough devices can reconnect the pool "
"becomes inoperative requiring a data restore from backups."
msgstr ""
"如果 vdev "
"没有任何冗余，或者设备已经损坏且没有足够的冗余来弥补，那么存储池将进入“故障”状态。除非有足够的设备重新连接存储池，否则存储池将无法运行，需要从备份中恢复数据。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:868
#, fuzzy
msgid ""
"When replacing a failed disk, the name of the failed disk changes to the "
"GUID of the new disk.  A new device name parameter for `zpool replace` is "
"not required if the replacement device has the same device name."
msgstr ""
"当替换一个失败的磁盘时，失败磁盘的名称会变为新磁盘的 GUID 。如果替换设备具有相同的设备名称，则不需要为 `zpool replace` "
"指定新的设备名称参数。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:870
#, fuzzy
msgid "Replace a failed disk using `zpool replace`:"
msgstr "使用 `zpool replace` 命令替换故障的磁盘："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:882
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: DEGRADED\n"
"status: One or more devices could not be opened.  Sufficient replicas exist for\n"
"        the pool to continue functioning in a degraded state.\n"
"action: Attach the missing device and online it using 'zpool online'.\n"
"   see: http://illumos.org/msg/ZFS-8000-2Q\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:888
#, no-wrap
msgid ""
"        NAME                    STATE     READ WRITE CKSUM\n"
"        mypool                  DEGRADED     0     0     0\n"
"          mirror-0              DEGRADED     0     0     0\n"
"            ada0p3              ONLINE       0     0     0\n"
"            316502962686821739  UNAVAIL      0     0     0  was /dev/ada1p3\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:901
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool replace mypool 316502962686821739 ada2p3\n"
"# zpool status\n"
"  pool: mypool\n"
" state: DEGRADED\n"
"status: One or more devices is currently being resilvered.  The pool will\n"
"        continue to function, possibly in a degraded state.\n"
"action: Wait for the resilver to complete.\n"
"  scan: resilver in progress since Mon Jun  2 14:52:21 2014\n"
"        641M scanned out of 781M at 49.3M/s, 0h0m to go\n"
"        640M resilvered, 82.04% done\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:909
#, no-wrap
msgid ""
"        NAME                        STATE     READ WRITE CKSUM\n"
"        mypool                      DEGRADED     0     0     0\n"
"          mirror-0                  DEGRADED     0     0     0\n"
"            ada0p3                  ONLINE       0     0     0\n"
"            replacing-1             UNAVAIL      0     0     0\n"
"              15732067398082357289  UNAVAIL      0     0     0  was /dev/ada1p3/old\n"
"              ada2p3                ONLINE       0     0     0  (resilvering)\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:916
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: resilvered 781M in 0h0m with 0 errors on Mon Jun  2 14:52:38 2014\n"
"config:\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:927
#, fuzzy, no-wrap
msgid "Scrubbing a Pool"
msgstr "清洁游泳池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:932
#, fuzzy
msgid ""
"Routinely <<zfs-term-scrub,scrub>> pools, ideally at least once every month."
"  The `scrub` operation is disk-intensive and will reduce performance while "
"running.  Avoid high-demand periods when scheduling `scrub` or use <<zfs-"
"advanced-tuning-scrub_delay,`vfs.zfs.scrub_delay`>> to adjust the relative "
"priority of the `scrub` to keep it from slowing down other workloads."
msgstr ""
"定期对池进行 <<zfs-term-scrub , scrub>> 操作，最好每个月至少一次。 `scrub` "
"操作对磁盘的使用较高，运行时会降低性能。在安排 `scrub` 操作时避免高负载时段，或者使用 <<zfs-advanced-tuning-"
"scrub_delay , `vfs.zfs.scrub_delay`>> 来调整 `scrub` 操作的相对优先级，以防止其影响其他工作负载的速度。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:943
#, no-wrap
msgid ""
"# zpool scrub mypool\n"
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"  scan: scrub in progress since Wed Feb 19 20:52:54 2014\n"
"        116G scanned out of 8.60T at 649M/s, 3h48m to go\n"
"        0 repaired, 1.32% done\n"
"config:\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:958
#, fuzzy
msgid "To cancel a scrub operation if needed, run `zpool scrub -s _mypool_`."
msgstr "如果需要取消一个 scrub 操作，请运行 `zpool scrub -s _mypool_` 。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:960
#, fuzzy, no-wrap
msgid "Self-Healing"
msgstr "自愈"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:971
#, fuzzy
msgid ""
"The checksums stored with data blocks enable the file system to _self-heal_."
"  This feature will automatically repair data whose checksum does not match "
"the one recorded on another device that is part of the storage pool.  For "
"example, a mirror configuration with two disks where one drive is starting "
"to malfunction and cannot properly store the data any more.  This is worse "
"when the data was not accessed for a long time, as with long term archive "
"storage.  Traditional file systems need to run commands that check and "
"repair the data like man:fsck[8].  These commands take time, and in severe "
"cases, an administrator has to decide which repair operation to perform.  "
"When ZFS detects a data block with a mismatched checksum, it tries to read "
"the data from the mirror disk.  If that disk can provide the correct data, "
"ZFS will give that to the application and correct the data on the disk with "
"the wrong checksum.  This happens without any interaction from a system "
"administrator during normal pool operation."
msgstr ""
"存储在数据块中的校验和使文件系统能够自我修复。这个功能会自动修复数据，如果其校验和与存储池中另一个设备上记录的校验和不匹配。例如，一个具有两个磁盘的镜像配置，其中一个驱动器开始出现故障，无法正确存储数据。当数据长时间未被访问时，如长期存档存储，情况会更糟。传统的文件系统需要运行检查和修复数据的命令，如"
" man:fsck[8] 。这些命令需要时间，在严重情况下，管理员必须决定执行哪个修复操作。当 ZFS "
"检测到一个数据块的校验和不匹配时，它会尝试从镜像磁盘中读取数据。如果该磁盘能提供正确的数据， ZFS "
"将将其提供给应用程序，并纠正具有错误校验和的磁盘上的数据。在正常存储池操作期间，这一切都在没有任何系统管理员干预的情况下发生。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:973
#, fuzzy
msgid ""
"The next example shows this self-healing behavior by creating a mirrored "
"pool of disks [.filename]#/dev/ada0# and [.filename]#/dev/ada1#."
msgstr ""
"下一个示例通过创建一个镜像磁盘池来展示这种自愈行为，其中包括 [.filename]#/dev/ada0# 和 "
"[.filename]#/dev/ada1# 。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:982
#, no-wrap
msgid ""
"# zpool create healer mirror /dev/ada0 /dev/ada1\n"
"# zpool status healer\n"
"  pool: healer\n"
" state: ONLINE\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:988
#: documentation/content/en/books/handbook/zfs/_index.adoc:1142
#, no-wrap
msgid ""
"    NAME        STATE     READ WRITE CKSUM\n"
"    healer      ONLINE       0     0     0\n"
"      mirror-0  ONLINE       0     0     0\n"
"       ada0     ONLINE       0     0     0\n"
"       ada1     ONLINE       0     0     0\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:993
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool list\n"
"NAME     SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG   CAP  DEDUP  HEALTH  ALTROOT\n"
"healer   960M  92.5K   960M         -         -     0%    0%  1.00x  ONLINE  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:996
#, fuzzy
msgid ""
"Copy some important data to the pool to protect from data errors using the "
"self-healing feature and create a checksum of the pool for later comparison."
msgstr "将一些重要数据复制到池中，以使用自愈功能保护免受数据错误，并为池创建校验和以备后续比较。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1006
#, no-wrap
msgid ""
"# cp /some/important/data /healer\n"
"# zfs list\n"
"NAME     SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT\n"
"healer   960M  67.7M   892M     7%  1.00x  ONLINE  -\n"
"# sha1 /healer > checksum.txt\n"
"# cat checksum.txt\n"
"SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1010
#, fuzzy
msgid ""
"Simulate data corruption by writing random data to the beginning of one of "
"the disks in the mirror.  To keep ZFS from healing the data when detected, "
"export the pool before the corruption and import it again afterwards."
msgstr ""
"通过向镜像中的一个磁盘的开头写入随机数据来模拟数据损坏。为了防止 ZFS 在检测到数据损坏时修复数据，可以在损坏之前导出池，并在之后重新导入。"

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1018
#, fuzzy
msgid ""
"This is a dangerous operation that can destroy vital data, shown here for "
"demonstration alone.  *Do not try* it during normal operation of a storage "
"pool.  Nor should this intentional corruption example run on any disk with a"
" file system not using ZFS on another partition in it.  Do not use any other"
" disk device names other than the ones that are part of the pool.  Ensure "
"proper backups of the pool exist and test them before running the command!"
msgstr ""
"这是一个危险的操作，可能会破坏重要数据，仅用于演示目的。在存储池的正常运行期间，请 * 不要尝试 * 执行此操作。此意外损坏示例也不应在任何使用 ZFS"
" 以外的文件系统的磁盘上运行，该磁盘上的另一个分区中也不应该有 ZFS "
"。请不要使用除了存储池中的设备名称之外的任何其他磁盘设备名称。确保存储池有适当的备份，并在执行命令之前对其进行测试！"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1028
#, no-wrap
msgid ""
"# zpool export healer\n"
"# dd if=/dev/random of=/dev/ada1 bs=1m count=200\n"
"200+0 records in\n"
"200+0 records out\n"
"209715200 bytes transferred in 62.992162 secs (3329227 bytes/sec)\n"
"# zpool import healer\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1034
#, fuzzy
msgid ""
"The pool status shows that one device has experienced an error.  Note that "
"applications reading data from the pool did not receive any incorrect data."
"  ZFS provided data from the [.filename]#ada0# device with the correct "
"checksums.  To find the device with the wrong checksum, look for one whose "
"`CKSUM` column contains a nonzero value."
msgstr ""
"池状态显示一个设备发生了错误。请注意，从池中读取数据的应用程序没有接收到任何错误数据。 ZFS 从 `.filename`#ada0# "
"设备提供了正确校验和的数据。要找到校验和错误的设备，请查找 `CKSUM` 列中包含非零值的设备。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1047
#, no-wrap
msgid ""
"# zpool status healer\n"
"    pool: healer\n"
"   state: ONLINE\n"
"  status: One or more devices has experienced an unrecoverable error.  An\n"
"          attempt was made to correct the error.  Applications are unaffected.\n"
"  action: Determine if the device needs to be replaced, and clear the errors\n"
"          using 'zpool clear' or replace the device with 'zpool replace'.\n"
"     see: http://illumos.org/msg/ZFS-8000-4J\n"
"    scan: none requested\n"
"  config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1053
#, no-wrap
msgid ""
"      NAME        STATE     READ WRITE CKSUM\n"
"      healer      ONLINE       0     0     0\n"
"        mirror-0  ONLINE       0     0     0\n"
"         ada0     ONLINE       0     0     0\n"
"         ada1     ONLINE       0     0     1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1059
#, fuzzy
msgid ""
"ZFS detected the error and handled it by using the redundancy present in the"
" unaffected [.filename]#ada0# mirror disk.  A checksum comparison with the "
"original one will reveal whether the pool is consistent again."
msgstr ""
"ZFS 检测到错误，并通过使用未受影响的 [.filename]#ada0# "
"镜像磁盘中的冗余来处理该错误。通过与原始数据进行校验比较，可以确定池是否恢复一致。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1066
#, no-wrap
msgid ""
"# sha1 /healer >> checksum.txt\n"
"# cat checksum.txt\n"
"SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f\n"
"SHA1 (/healer) = 2753eff56d77d9a536ece6694bf0a82740344d1f\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1075
#, fuzzy
msgid ""
"Generate checksums before and after the intentional tampering while the pool"
" data still matches.  This shows how ZFS is capable of detecting and "
"correcting any errors automatically when the checksums differ.  Note this is"
" possible with enough redundancy present in the pool.  A pool consisting of "
"a single device has no self-healing capabilities.  That is also the reason "
"why checksums are so important in ZFS; do not disable them for any reason.  "
"ZFS requires no man:fsck[8] or similar file system consistency check program"
" to detect and correct this, and keeps the pool available while there is a "
"problem.  A scrub operation is now required to overwrite the corrupted data "
"on [.filename]#ada1#."
msgstr ""
"在故意篡改之前和之后生成校验和，同时池数据仍然匹配。这显示了当校验和不同时， ZFS "
"能够自动检测和纠正任何错误。请注意，这需要池中具有足够的冗余。由单个设备组成的池没有自我修复能力。这也是为什么在 ZFS "
"中校验和如此重要的原因；不要出于任何原因禁用它们。 ZFS 不需要 man:fsck[8] "
"或类似的文件系统一致性检查程序来检测和纠正这个问题，并且在出现问题时保持池可用。现在需要进行一次 scrub 操作来覆盖在 "
"[.filename]#ada1# 上的损坏数据。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1091
#, no-wrap
msgid ""
"# zpool scrub healer\n"
"# zpool status healer\n"
"  pool: healer\n"
" state: ONLINE\n"
"status: One or more devices has experienced an unrecoverable error.  An\n"
"            attempt was made to correct the error.  Applications are unaffected.\n"
"action: Determine if the device needs to be replaced, and clear the errors\n"
"            using 'zpool clear' or replace the device with 'zpool replace'.\n"
"   see: http://illumos.org/msg/ZFS-8000-4J\n"
"  scan: scrub in progress since Mon Dec 10 12:23:30 2012\n"
"        10.4M scanned out of 67.0M at 267K/s, 0h3m to go\n"
"        9.63M repaired, 15.56% done\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1097
#, no-wrap
msgid ""
"    NAME        STATE     READ WRITE CKSUM\n"
"    healer      ONLINE       0     0     0\n"
"      mirror-0  ONLINE       0     0     0\n"
"       ada0     ONLINE       0     0     0\n"
"       ada1     ONLINE       0     0   627  (repairing)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1103
#, fuzzy
msgid ""
"The scrub operation reads data from [.filename]#ada0# and rewrites any data "
"with a wrong checksum on [.filename]#ada1#, shown by the `(repairing)` "
"output from `zpool status`.  After the operation is complete, the pool "
"status changes to:"
msgstr ""
"Scrub 操作从 ada0 读取数据，并将任何具有错误校验和的数据重写到 ada1 上，这可以通过 zpool status 中的 "
"`(repairing)` 输出来显示。操作完成后，池的状态将发生变化："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1116
#, no-wrap
msgid ""
"# zpool status healer\n"
"  pool: healer\n"
" state: ONLINE\n"
"status: One or more devices has experienced an unrecoverable error.  An\n"
"        attempt was made to correct the error.  Applications are unaffected.\n"
"action: Determine if the device needs to be replaced, and clear the errors\n"
"             using 'zpool clear' or replace the device with 'zpool replace'.\n"
"   see: http://illumos.org/msg/ZFS-8000-4J\n"
"  scan: scrub repaired 66.5M in 0h2m with 0 errors on Mon Dec 10 12:26:25 2012\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1122
#, no-wrap
msgid ""
"    NAME        STATE     READ WRITE CKSUM\n"
"    healer      ONLINE       0     0     0\n"
"      mirror-0  ONLINE       0     0     0\n"
"       ada0     ONLINE       0     0     0\n"
"       ada1     ONLINE       0     0 2.72K\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1127
#, fuzzy
msgid ""
"After the scrubbing operation completes with all the data synchronized from "
"[.filename]#ada0# to [.filename]#ada1#, <<zfs-zpool-clear,clear>> the error "
"messages from the pool status by running `zpool clear`."
msgstr "在从 ada0 同步所有数据到 ada1 后，完成了清洗操作，请通过运行 `zpool clear` 命令清除池状态中的错误消息。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1136
#, no-wrap
msgid ""
"# zpool clear healer\n"
"# zpool status healer\n"
"  pool: healer\n"
" state: ONLINE\n"
"  scan: scrub repaired 66.5M in 0h2m with 0 errors on Mon Dec 10 12:26:25 2012\n"
"config:\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1147
#, fuzzy
msgid ""
"The pool is now back to a fully working state, with all error counts now "
"zero."
msgstr "现在，池已经恢复到完全正常的状态，所有错误计数都为零。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1149
#, fuzzy, no-wrap
msgid "Growing a Pool"
msgstr "扩大人才库"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1158
#, fuzzy
msgid ""
"The smallest device in each vdev limits the usable size of a redundant pool."
"  Replace the smallest device with a larger device.  After completing a "
"<<zfs-zpool-replace,replace>> or <<zfs-term-resilver,resilver>> operation, "
"the pool can grow to use the capacity of the new device.  For example, "
"consider a mirror of a 1 TB drive and a 2 TB drive.  The usable space is 1 "
"TB.  When replacing the 1 TB drive with another 2 TB drive, the resilvering "
"process copies the existing data onto the new drive.  As both of the devices"
" now have 2 TB capacity, the mirror's available space grows to 2 TB."
msgstr ""
"每个 vdev 中最小的设备限制了冗余池的可用大小。用一个更大的设备替换最小的设备。在完成 <<zfs-zpool-replace , "
"replace>> 或 <<zfs-term-resilver , resilver>> 操作后，池可以扩展到使用新设备的容量。例如，考虑一个由 1 "
"TB 驱动器和 2 TB 驱动器组成的镜像。可用空间为 1 TB 。当用另一个 2 TB 驱动器替换 1 TB "
"驱动器时，重新同步过程将现有数据复制到新驱动器上。由于两个设备现在都具有 2 TB 的容量，镜像的可用空间增长到 2 TB 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1161
#, fuzzy
msgid ""
"Start expansion by using `zpool online -e` on each device.  After expanding "
"all devices, the extra space becomes available to the pool."
msgstr "通过在每个设备上使用 `zpool online -e` 来开始扩展。在扩展所有设备之后，额外的空间将可用于池。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1163
#, fuzzy, no-wrap
msgid "Importing and Exporting Pools"
msgstr "导入和导出存储池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1171
#, fuzzy
msgid ""
"_Export_ pools before moving them to another system.  ZFS unmounts all "
"datasets, marking each device as exported but still locked to prevent use by"
" other disks.  This allows pools to be _imported_ on other machines, other "
"operating systems that support ZFS, and even different hardware "
"architectures (with some caveats, see man:zpool[8]).  When a dataset has "
"open files, use `zpool export -f` to force exporting the pool.  Use this "
"with caution.  The datasets are forcibly unmounted, potentially resulting in"
" unexpected behavior by the applications which had open files on those "
"datasets."
msgstr ""
"在将存储池移动到另一个系统之前，请先导出它们。 ZFS "
"会卸载所有数据集，并将每个设备标记为已导出，但仍然锁定以防止其他磁盘使用。这使得存储池可以在其他支持 ZFS "
"的机器、其他操作系统甚至不同的硬件架构上导入（有一些注意事项，请参阅 man:zpool[8] ）。当数据集有打开的文件时，请使用 `zpool "
"export -f` 强制导出存储池。请谨慎使用此功能。数据集将被强制卸载，可能导致那些数据集上有打开文件的应用程序出现意外行为。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1173
#, fuzzy
msgid "Export a pool that is not in use:"
msgstr "导出一个未使用的池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1177
#, no-wrap
msgid "# zpool export mypool\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1185
#, fuzzy
msgid ""
"Importing a pool automatically mounts the datasets.  If this is undesired "
"behavior, use `zpool import -N` to prevent it.  `zpool import -o` sets "
"temporary properties for this specific import.  `zpool import altroot=` "
"allows importing a pool with a base mount point instead of the root of the "
"file system.  If the pool was last used on a different system and was not "
"properly exported, force the import using `zpool import -f`.  `zpool import "
"-a` imports all pools that do not appear to be in use by another system."
msgstr ""
"导入一个存储池会自动挂载数据集。如果不希望出现这种行为，请使用 `zpool import -N` 来阻止它。 `zpool import -o` "
"为此特定导入设置临时属性。 `zpool import altroot = ` "
"允许使用基本挂载点而不是文件系统的根来导入存储池。如果该存储池最后在另一个系统上使用并且没有正确导出，请使用 `zpool import -f` "
"来强制导入。 `zpool import -a` 导入所有未被其他系统使用的存储池。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1187
#, fuzzy
msgid "List all available pools for import:"
msgstr "列出所有可导入的池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1196
#, no-wrap
msgid ""
"# zpool import\n"
"   pool: mypool\n"
"     id: 9930174748043525076\n"
"  state: ONLINE\n"
" action: The pool can be imported using its name or numeric identifier.\n"
" config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1199
#, no-wrap
msgid ""
"        mypool      ONLINE\n"
"          ada2p3    ONLINE\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1202
#, fuzzy
msgid "Import the pool with an alternative root directory:"
msgstr "导入具有替代根目录的池："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1210
#, no-wrap
msgid ""
"# zpool import -o altroot=/mnt mypool\n"
"# zfs list\n"
"zfs list\n"
"NAME                 USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool               110K  47.0G    31K  /mnt/mypool\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1213
#, fuzzy, no-wrap
msgid "Upgrading a Storage Pool"
msgstr "升级存储池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1219
#, fuzzy
msgid ""
"After upgrading FreeBSD, or if importing a pool from a system using an older"
" version, manually upgrade the pool to the latest ZFS version to support "
"newer features.  Consider whether the pool may ever need importing on an "
"older system before upgrading.  Upgrading is a one-way process.  Upgrade "
"older pools is possible, but downgrading pools with newer features is not."
msgstr ""
"在升级 FreeBSD 之后，或者从使用较旧版本的系统导入池时，需要手动将池升级到最新的 ZFS "
"版本以支持新功能。在升级之前，请考虑池是否可能需要在较旧的系统上导入。升级是一个单向过程。升级较旧的池是可能的，但是无法降级具有较新功能的池。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1221
#, fuzzy
msgid "Upgrade a v28 pool to support `Feature Flags`:"
msgstr "将 v28 池升级以支持“功能标志”。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1234
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"status: The pool is formatted using a legacy on-disk format.  The pool can\n"
"        still be used, but some features are unavailable.\n"
"action: Upgrade the pool using 'zpool upgrade'.  Once this is done, the\n"
"        pool will no longer be accessible on software that does not support feat\n"
"        flags.\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1240
#: documentation/content/en/books/handbook/zfs/_index.adoc:1288
#, no-wrap
msgid ""
"        NAME        STATE     READ WRITE CKSUM\n"
"        mypool      ONLINE       0     0     0\n"
"          mirror-0  ONLINE       0     0     0\n"
"\t    ada0    ONLINE       0     0     0\n"
"\t    ada1    ONLINE       0     0     0\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1244
#: documentation/content/en/books/handbook/zfs/_index.adoc:1292
#, no-wrap
msgid ""
"errors: No known data errors\n"
"# zpool upgrade\n"
"This system supports ZFS pool feature flags.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1247
#, no-wrap
msgid ""
"The following pools are formatted with legacy version numbers and are upgraded to use feature flags.\n"
"After being upgraded, these pools will no longer be accessible by software that does not support feature flags.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1251
#, no-wrap
msgid ""
"VER  POOL\n"
"---  ------------\n"
"28   mypool\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1256
#, no-wrap
msgid ""
"Use 'zpool upgrade -v' for a list of available legacy versions.\n"
"Every feature flags pool has all supported features enabled.\n"
"# zpool upgrade mypool\n"
"This system supports ZFS pool feature flags.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1263
#, no-wrap
msgid ""
"Successfully upgraded 'mypool' from version 28 to feature flags.\n"
"Enabled the following features on 'mypool':\n"
"  async_destroy\n"
"  empty_bpobj\n"
"  lz4_compress\n"
"  multi_vdev_crash_dump\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1267
#, fuzzy
msgid ""
"The newer features of ZFS will not be available until `zpool upgrade` has "
"completed.  Use `zpool upgrade -v` to see what new features the upgrade "
"provides, as well as which features are already supported."
msgstr ""
"只有在完成 `zpool upgrade` 之后， ZFS 的新功能才会可用。使用 `zpool upgrade -v` "
"命令查看升级提供的新功能，以及已经支持的功能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1269
#, fuzzy
msgid "Upgrade a pool to support new feature flags:"
msgstr "升级一个池子以支持新的功能标志："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1282
#, no-wrap
msgid ""
"# zpool status\n"
"  pool: mypool\n"
" state: ONLINE\n"
"status: Some supported features are not enabled on the pool. The pool can\n"
"        still be used, but some features are unavailable.\n"
"action: Enable all features using 'zpool upgrade'. Once this is done,\n"
"        the pool may no longer be accessible by software that does not support\n"
"        the features. See zpool-features(7) for details.\n"
"  scan: none requested\n"
"config:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1294
#, no-wrap
msgid "All pools are formatted using feature flags.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1298
#, no-wrap
msgid ""
"Some supported features are not enabled on the following pools. Once a\n"
"feature is enabled the pool may become incompatible with software\n"
"that does not support the feature. See zpool-features(7) for details.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1311
#, no-wrap
msgid ""
"POOL  FEATURE\n"
"---------------\n"
"zstore\n"
"      multi_vdev_crash_dump\n"
"      spacemap_histogram\n"
"      enabled_txg\n"
"      hole_birth\n"
"      extensible_dataset\n"
"      bookmarks\n"
"      filesystem_limits\n"
"# zpool upgrade mypool\n"
"This system supports ZFS pool feature flags.\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1319
#, no-wrap
msgid ""
"Enabled the following features on 'mypool':\n"
"  spacemap_histogram\n"
"  enabled_txg\n"
"  hole_birth\n"
"  extensible_dataset\n"
"  bookmarks\n"
"  filesystem_limits\n"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1326
#, fuzzy
msgid ""
"Update the boot code on systems that boot from a pool to support the new "
"pool version.  Use `gpart bootcode` on the partition that contains the boot "
"code.  Two types of bootcode are available, depending on way the system "
"boots: GPT (the most common option) and EFI (for more modern systems)."
msgstr ""
"更新从池中引导的系统的引导代码，以支持新的池版本。在包含引导代码的分区上使用 `gpart bootcode` "
"命令。根据系统的引导方式，有两种类型的引导代码可用： GPT （最常见的选项）和 EFI （适用于更现代的系统）。"

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1328
#, fuzzy
msgid "For legacy boot using GPT, use the following command:"
msgstr "对于使用 GPT 的传统引导，请使用以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1332
#, no-wrap
msgid "# gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1335
#, fuzzy
msgid "For systems using EFI to boot, execute the following command:"
msgstr "对于使用 EFI 引导的系统，请执行以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1339
#, no-wrap
msgid "# gpart bootcode -p /boot/boot1.efifat -i 1 ada1\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1343
#, fuzzy
msgid ""
"Apply the bootcode to all bootable disks in the pool.  See man:gpart[8] for "
"more information."
msgstr "将引导代码应用于池中的所有可引导磁盘。有关更多信息，请参阅 man:gpart[8] 。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1346
#, fuzzy, no-wrap
msgid "Displaying Recorded Pool History"
msgstr "显示记录的池历史"

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1352
#, fuzzy
msgid ""
"ZFS records commands that change the pool, including creating datasets, "
"changing properties, or replacing a disk.  Reviewing history about a pool's "
"creation is useful, as is checking which user performed a specific action "
"and when.  History is not kept in a log file, but is part of the pool "
"itself.  The command to review this history is aptly named `zpool history`:"
msgstr ""
"ZFS "
"记录更改池的命令，包括创建数据集、更改属性或替换磁盘。查看关于池创建的历史记录很有用，还可以检查哪个用户执行了特定的操作以及何时执行的。历史记录不会保存在日志文件中，而是作为池本身的一部分。用于查看这个历史记录的命令被恰当地命名为"
" `zpool history` 。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1361
#, no-wrap
msgid ""
"# zpool history\n"
"History for 'tank':\n"
"2013-02-26.23:02:35 zpool create tank mirror /dev/ada0 /dev/ada1\n"
"2013-02-27.18:50:58 zfs set atime=off tank\n"
"2013-02-27.18:51:09 zfs set checksum=fletcher4 tank\n"
"2013-02-27.18:51:18 zfs create tank/backup\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1366
#, fuzzy
msgid ""
"The output shows `zpool` and `zfs` commands altering the pool in some way "
"along with a timestamp.  Commands like `zfs list` are not included.  When "
"specifying no pool name, ZFS displays history of all pools."
msgstr ""
"输出显示了 `zpool` 和 `zfs` 命令以某种方式修改了池，并附带了时间戳。不包括像 `zfs list` 这样的命令。当未指定池名称时， "
"ZFS 会显示所有池的历史记录。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1369
#, fuzzy
msgid ""
"`zpool history` can show even more information when providing the options "
"`-i` or `-l`.  `-i` displays user-initiated events as well as internally "
"logged ZFS events."
msgstr ""
"当使用选项 `-i` 或 `-l` 时， `zpool history` 命令可以显示更多的信息。 `-i` 选项会显示用户发起的事件以及内部记录的 "
"ZFS 事件。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1381
#, no-wrap
msgid ""
"# zpool history -i\n"
"History for 'tank':\n"
"2013-02-26.23:02:35 [internal pool create txg:5] pool spa 28; zfs spa 28; zpl 5;uts  9.1-RELEASE 901000 amd64\n"
"2013-02-27.18:50:53 [internal property set txg:50] atime=0 dataset = 21\n"
"2013-02-27.18:50:58 zfs set atime=off tank\n"
"2013-02-27.18:51:04 [internal property set txg:53] checksum=7 dataset = 21\n"
"2013-02-27.18:51:09 zfs set checksum=fletcher4 tank\n"
"2013-02-27.18:51:13 [internal create txg:55] dataset = 39\n"
"2013-02-27.18:51:18 zfs create tank/backup\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1385
#, fuzzy
msgid ""
"Show more details by adding `-l`.  Showing history records in a long format,"
" including information like the name of the user who issued the command and "
"the hostname on which the change happened."
msgstr "通过添加 `-l` 来显示更多详细信息。以长格式显示历史记录，包括发出命令的用户的名称和发生更改的主机名。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1394
#, no-wrap
msgid ""
"# zpool history -l\n"
"History for 'tank':\n"
"2013-02-26.23:02:35 zpool create tank mirror /dev/ada0 /dev/ada1 [user 0 (root) on :global]\n"
"2013-02-27.18:50:58 zfs set atime=off tank [user 0 (root) on myzfsbox:global]\n"
"2013-02-27.18:51:09 zfs set checksum=fletcher4 tank [user 0 (root) on myzfsbox:global]\n"
"2013-02-27.18:51:18 zfs create tank/backup [user 0 (root) on myzfsbox:global]\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1400
#, fuzzy
msgid ""
"The output shows that the `root` user created the mirrored pool with disks "
"[.filename]#/dev/ada0# and [.filename]#/dev/ada1#.  The hostname `myzfsbox` "
"is also shown in the commands after the pool's creation.  The hostname "
"display becomes important when exporting the pool from one system and "
"importing on another.  It's possible to distinguish the commands issued on "
"the other system by the hostname recorded for each command."
msgstr ""
"输出显示 `root` 用户使用磁盘 [.filename]#/dev/ada0# 和 [.filename]#/dev/ada1# "
"创建了镜像池。在池创建后的命令中还显示了主机名 `myzfsbox` "
"。主机名的显示在将池从一个系统导出并在另一个系统导入时变得重要。可以通过为每个命令记录的主机名来区分在另一个系统上发出的命令。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1403
#, fuzzy
msgid ""
"Combine both options to `zpool history` to give the most detailed "
"information possible for any given pool.  Pool history provides valuable "
"information when tracking down the actions performed or when needing more "
"detailed output for debugging."
msgstr ""
"将两个选项 `zpool history` "
"结合起来，以便为任何给定的池提供尽可能详细的信息。池历史记录在追踪执行的操作或需要更详细的输出进行调试时提供有价值的信息。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1405
#, fuzzy, no-wrap
msgid "Performance Monitoring"
msgstr "性能监控"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1412
#, fuzzy
msgid ""
"A built-in monitoring system can display pool I/O statistics in real time.  "
"It shows the amount of free and used space on the pool, read and write "
"operations performed per second, and I/O bandwidth used.  By default, ZFS "
"monitors and displays all pools in the system.  Provide a pool name to limit"
" monitoring to that pool.  A basic example:"
msgstr ""
"内置的监控系统可以实时显示池的 I/O 统计信息。它显示池中的可用空间和已使用空间的数量，每秒执行的读写操作次数以及使用的 I/O 带宽。默认情况下， "
"ZFS 监视并显示系统中的所有池。提供池名称以限制监控到该池。一个基本示例："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1420
#, no-wrap
msgid ""
"# zpool iostat\n"
"               capacity     operations    bandwidth\n"
"pool        alloc   free   read  write   read  write\n"
"----------  -----  -----  -----  -----  -----  -----\n"
"data         288G  1.53T      2     11  11.3K  57.1K\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1426
#, fuzzy
msgid ""
"To continuously see I/O activity, specify a number as the last parameter, "
"indicating an interval in seconds to wait between updates.  The next "
"statistic line prints after each interval.  Press kbd:[Ctrl+C] to stop this "
"continuous monitoring.  Give a second number on the command line after the "
"interval to specify the total number of statistics to display."
msgstr ""
"要持续查看 I/O 活动，请在最后一个参数中指定一个数字，表示更新之间等待的秒数间隔。每个间隔后都会打印下一个统计行。按下 kbd:[Ctrl + C]"
" 停止此连续监视。在间隔之后的命令行上给出第二个数字，以指定要显示的统计总数。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1431
#, fuzzy
msgid ""
"Display even more detailed I/O statistics with `-v`.  Each device in the "
"pool appears with a statistics line.  This is useful for seeing read and "
"write operations performed on each device, and can help determine if any "
"individual device is slowing down the pool.  This example shows a mirrored "
"pool with two devices:"
msgstr ""
"使用 `-v` 参数可以显示更详细的 I/O "
"统计信息。池中的每个设备都会显示一行统计信息。这对于查看在每个设备上执行的读写操作非常有用，并且可以帮助确定是否有任何单个设备导致池变慢。以下示例显示了一个具有两个设备的镜像池。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1443
#, no-wrap
msgid ""
"# zpool iostat -v \n"
"                            capacity     operations    bandwidth\n"
"pool                     alloc   free   read  write   read  write\n"
"-----------------------  -----  -----  -----  -----  -----  -----\n"
"data                      288G  1.53T      2     12  9.23K  61.5K\n"
"  mirror                  288G  1.53T      2     12  9.23K  61.5K\n"
"    ada1                     -      -      0      4  5.61K  61.7K\n"
"    ada2                     -      -      1      4  5.04K  61.7K\n"
"-----------------------  -----  -----  -----  -----  -----  -----\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1446
#, fuzzy, no-wrap
msgid "Splitting a Storage Pool"
msgstr "分割存储池"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1453
#, fuzzy
msgid ""
"ZFS can split a pool consisting of one or more mirror vdevs into two pools."
"  Unless otherwise specified, ZFS detaches the last member of each mirror "
"and creates a new pool containing the same data.  Be sure to make a dry run "
"of the operation with `-n` first.  This displays the details of the "
"requested operation without actually performing it.  This helps confirm that"
" the operation will do what the user intends."
msgstr ""
"ZFS 可以将由一个或多个镜像 vdev 组成的池分割成两个池。除非另有指定， ZFS "
"会分离每个镜像的最后一个成员，并创建一个包含相同数据的新池。请务必先使用 `-n` "
"进行试运行。这将显示所请求操作的详细信息，但不会实际执行操作。这有助于确认操作是否符合用户的意图。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:1455
#, fuzzy, no-wrap
msgid "`zfs` Administration"
msgstr "`zfs` 管理"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1459
#, fuzzy
msgid ""
"The `zfs` utility can create, destroy, and manage all existing ZFS datasets "
"within a pool.  To manage the pool itself, use <<zfs-zpool,`zpool`>>."
msgstr "`zfs` 实用程序可以在池中创建、销毁和管理所有现有的 ZFS 数据集。要管理池本身，请使用 `zpool` 。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1461
#, fuzzy, no-wrap
msgid "Creating and Destroying Datasets"
msgstr "创建和销毁数据集"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1471
#, fuzzy
msgid ""
"Unlike traditional disks and volume managers, space in ZFS is _not_ "
"preallocated.  With traditional file systems, after partitioning and "
"assigning the space, there is no way to add a new file system without adding"
" a new disk.  With ZFS, creating new file systems is possible at any time.  "
"Each <<zfs-term-dataset,_dataset_>> has properties including features like "
"compression, deduplication, caching, and quotas, as well as other useful "
"properties like readonly, case sensitivity, network file sharing, and a "
"mount point.  Nesting datasets within each other is possible and child "
"datasets will inherit properties from their ancestors.  <<zfs-zfs-"
"allow,Delegate>>, <<zfs-zfs-send,replicate>>, <<zfs-zfs-snapshot,snapshot>>,"
" <<zfs-zfs-jail,jail>> allows administering and destroying each dataset as a"
" unit.  Creating a separate dataset for each different type or set of files "
"has advantages.  The drawbacks to having a large number of datasets are that"
" some commands like `zfs list` will be slower, and that mounting of hundreds"
" or even thousands of datasets will slow the FreeBSD boot process."
msgstr ""
"与传统的磁盘和卷管理器不同， ZFS 中的空间是 _不预分配_ 的。在传统文件系统中，分区和分配空间后，无法在不添加新磁盘的情况下添加新的文件系统。而在"
" ZFS 中，可以随时创建新的文件系统。每个 <<zfs-term-dataset ,数据集 >> "
"都有属性，包括压缩、去重、缓存和配额等功能，以及其他有用的属性，如只读、大小写敏感、网络文件共享和挂载点。可以将数据集嵌套在彼此之间，并且子数据集将继承其祖先的属性。"
" <<zfs-zfs-allow ,委派 >> 、 <<zfs-zfs-send ,复制 >> 、 <<zfs-zfs-snapshot ,快照 >> "
"、 <<zfs-zfs-jail ,监狱 >> "
"允许将每个数据集作为一个单元进行管理和销毁。为每种不同类型或文件集创建单独的数据集具有优势。拥有大量数据集的缺点是，某些命令（如 `zfs list` "
"）的速度会变慢，并且挂载数百甚至数千个数据集会减慢 FreeBSD 的启动过程。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1473
#, fuzzy
msgid ""
"Create a new dataset and enable <<zfs-term-compression-lz4,LZ4 compression>>"
" on it:"
msgstr "创建一个新的数据集，并在其上启用 LZ4 压缩。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1508
#, no-wrap
msgid ""
"# zfs list\n"
"NAME                  USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                781M  93.2G   144K  none\n"
"mypool/ROOT           777M  93.2G   144K  none\n"
"mypool/ROOT/default   777M  93.2G   777M  /\n"
"mypool/tmp            176K  93.2G   176K  /tmp\n"
"mypool/usr            616K  93.2G   144K  /usr\n"
"mypool/usr/home       184K  93.2G   184K  /usr/home\n"
"mypool/usr/ports      144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src        144K  93.2G   144K  /usr/src\n"
"mypool/var           1.20M  93.2G   608K  /var\n"
"mypool/var/crash      148K  93.2G   148K  /var/crash\n"
"mypool/var/log        178K  93.2G   178K  /var/log\n"
"mypool/var/mail       144K  93.2G   144K  /var/mail\n"
"mypool/var/tmp        152K  93.2G   152K  /var/tmp\n"
"# zfs create -o compress=lz4 mypool/usr/mydataset\n"
"# zfs list\n"
"NAME                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                 781M  93.2G   144K  none\n"
"mypool/ROOT            777M  93.2G   144K  none\n"
"mypool/ROOT/default    777M  93.2G   777M  /\n"
"mypool/tmp             176K  93.2G   176K  /tmp\n"
"mypool/usr             704K  93.2G   144K  /usr\n"
"mypool/usr/home        184K  93.2G   184K  /usr/home\n"
"mypool/usr/mydataset  87.5K  93.2G  87.5K  /usr/mydataset\n"
"mypool/usr/ports       144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src         144K  93.2G   144K  /usr/src\n"
"mypool/var            1.20M  93.2G   610K  /var\n"
"mypool/var/crash       148K  93.2G   148K  /var/crash\n"
"mypool/var/log         178K  93.2G   178K  /var/log\n"
"mypool/var/mail        144K  93.2G   144K  /var/mail\n"
"mypool/var/tmp         152K  93.2G   152K  /var/tmp\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1511
#, fuzzy
msgid ""
"Destroying a dataset is much quicker than deleting the files on the dataset,"
" as it does not involve scanning the files and updating the corresponding "
"metadata."
msgstr "销毁数据集比删除数据集上的文件要快得多，因为它不涉及扫描文件和更新相应的元数据。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1513
#, fuzzy
msgid "Destroy the created dataset:"
msgstr "销毁已创建的数据集："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1548
#, no-wrap
msgid ""
"# zfs list\n"
"NAME                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                 880M  93.1G   144K  none\n"
"mypool/ROOT            777M  93.1G   144K  none\n"
"mypool/ROOT/default    777M  93.1G   777M  /\n"
"mypool/tmp             176K  93.1G   176K  /tmp\n"
"mypool/usr             101M  93.1G   144K  /usr\n"
"mypool/usr/home        184K  93.1G   184K  /usr/home\n"
"mypool/usr/mydataset   100M  93.1G   100M  /usr/mydataset\n"
"mypool/usr/ports       144K  93.1G   144K  /usr/ports\n"
"mypool/usr/src         144K  93.1G   144K  /usr/src\n"
"mypool/var            1.20M  93.1G   610K  /var\n"
"mypool/var/crash       148K  93.1G   148K  /var/crash\n"
"mypool/var/log         178K  93.1G   178K  /var/log\n"
"mypool/var/mail        144K  93.1G   144K  /var/mail\n"
"mypool/var/tmp         152K  93.1G   152K  /var/tmp\n"
"# zfs destroy mypool/usr/mydataset\n"
"# zfs list\n"
"NAME                  USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                781M  93.2G   144K  none\n"
"mypool/ROOT           777M  93.2G   144K  none\n"
"mypool/ROOT/default   777M  93.2G   777M  /\n"
"mypool/tmp            176K  93.2G   176K  /tmp\n"
"mypool/usr            616K  93.2G   144K  /usr\n"
"mypool/usr/home       184K  93.2G   184K  /usr/home\n"
"mypool/usr/ports      144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src        144K  93.2G   144K  /usr/src\n"
"mypool/var           1.21M  93.2G   612K  /var\n"
"mypool/var/crash      148K  93.2G   148K  /var/crash\n"
"mypool/var/log        178K  93.2G   178K  /var/log\n"
"mypool/var/mail       144K  93.2G   144K  /var/mail\n"
"mypool/var/tmp        152K  93.2G   152K  /var/tmp\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1556
#, fuzzy
msgid ""
"In modern versions of ZFS, `zfs destroy` is asynchronous, and the free space"
" might take minutes to appear in the pool.  Use `zpool get freeing "
"_poolname_` to see the `freeing` property, that shows which datasets are "
"having their blocks freed in the background.  If there are child datasets, "
"like <<zfs-term-snapshot,snapshots>> or other datasets, destroying the "
"parent is impossible.  To destroy a dataset and its children, use `-r` to "
"recursively destroy the dataset and its children.  Use `-n -v` to list "
"datasets and snapshots destroyed by this operation, without actually destroy"
" anything.  Space reclaimed by destroying snapshots is also shown."
msgstr ""
"在现代版本的 ZFS 中， `zfs destroy` 是异步的，释放的空间可能需要几分钟才会在池中显示出来。使用 `zpool get freeing"
" _poolname_` 命令来查看 `freeing` "
"属性，该属性显示了哪些数据集正在后台释放其块。如果存在子数据集，例如快照或其他数据集，那么无法销毁父数据集。要销毁一个数据集及其子数据集，可以使用 "
"`-r` 选项递归地销毁数据集及其子数据集。使用 `-n -v` "
"选项列出此操作销毁的数据集和快照，而不实际销毁任何内容。销毁快照释放的空间也会显示出来。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1558
#, fuzzy, no-wrap
msgid "Creating and Destroying Volumes"
msgstr "创建和销毁卷"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1563
#, fuzzy
msgid ""
"A volume is a special dataset type.  Rather than mounting as a file system, "
"expose it as a block device under [.filename]#/dev/zvol/poolname/dataset#.  "
"This allows using the volume for other file systems, to back the disks of a "
"virtual machine, or to make it available to other network hosts using "
"protocols like iSCSI or HAST."
msgstr ""
"卷是一种特殊的数据集类型。它不像文件系统那样挂载，而是在 `/dev/zvol/poolname/dataset` "
"下以块设备的形式公开。这使得可以将卷用于其他文件系统，用于虚拟机的磁盘备份，或者通过 iSCSI 或 HAST 等协议使其对其他网络主机可用。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1568
#, fuzzy
msgid ""
"Format a volume with any file system or without a file system to store raw "
"data.  To the user, a volume appears to be a regular disk.  Putting ordinary"
" file systems on these _zvols_ provides features that ordinary disks or file"
" systems do not have.  For example, using the compression property on a 250 "
"MB volume allows creation of a compressed FAT file system."
msgstr ""
"使用任何文件系统或者不使用文件系统来格式化一个卷，以存储原始数据。对于用户来说，一个卷看起来就像一个普通的磁盘。在这些_zvol_上放置普通的文件系统提供了普通磁盘或文件系统所没有的功能。例如，使用压缩属性在一个"
" 250MB 的卷上可以创建一个压缩的 FAT 文件系统。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1582
#, no-wrap
msgid ""
"# zfs create -V 250m -o compression=on tank/fat32\n"
"# zfs list tank\n"
"NAME USED AVAIL REFER MOUNTPOINT\n"
"tank 258M  670M   31K /tank\n"
"# newfs_msdos -F32 /dev/zvol/tank/fat32\n"
"# mount -t msdosfs /dev/zvol/tank/fat32 /mnt\n"
"# df -h /mnt | grep fat32\n"
"Filesystem           Size Used Avail Capacity Mounted on\n"
"/dev/zvol/tank/fat32 249M  24k  249M     0%   /mnt\n"
"# mount | grep fat32\n"
"/dev/zvol/tank/fat32 on /mnt (msdosfs, local)\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1586
#, fuzzy
msgid ""
"Destroying a volume is much the same as destroying a regular file system "
"dataset.  The operation is nearly instantaneous, but it may take minutes to "
"reclaim the free space in the background."
msgstr "销毁一个卷与销毁一个常规文件系统数据集基本相同。该操作几乎是瞬时完成的，但在后台重新获取空闲空间可能需要几分钟的时间。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1588
#, fuzzy, no-wrap
msgid "Renaming a Dataset"
msgstr "重命名数据集"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1595
#, fuzzy
msgid ""
"To change the name of a dataset, use `zfs rename`.  To change the parent of "
"a dataset, use this command as well.  Renaming a dataset to have a different"
" parent dataset will change the value of those properties inherited from the"
" parent dataset.  Renaming a dataset unmounts then remounts it in the new "
"location (inherited from the new parent dataset).  To prevent this behavior,"
" use `-u`."
msgstr ""
"要更改数据集的名称，请使用 `zfs rename` "
"命令。要更改数据集的父级，请同样使用此命令。将数据集重命名为具有不同父级的数据集将更改从父级数据集继承的属性的值。将数据集重命名为新位置（从新父级数据集继承）将卸载然后重新挂载它。要防止此行为，请使用"
" `-u` 选项。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1597
#, fuzzy
msgid "Rename a dataset and move it to be under a different parent dataset:"
msgstr "重命名数据集并将其移动到不同的父数据集下："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1633
#, no-wrap
msgid ""
"# zfs list\n"
"NAME                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                 780M  93.2G   144K  none\n"
"mypool/ROOT            777M  93.2G   144K  none\n"
"mypool/ROOT/default    777M  93.2G   777M  /\n"
"mypool/tmp             176K  93.2G   176K  /tmp\n"
"mypool/usr             704K  93.2G   144K  /usr\n"
"mypool/usr/home        184K  93.2G   184K  /usr/home\n"
"mypool/usr/mydataset  87.5K  93.2G  87.5K  /usr/mydataset\n"
"mypool/usr/ports       144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src         144K  93.2G   144K  /usr/src\n"
"mypool/var            1.21M  93.2G   614K  /var\n"
"mypool/var/crash       148K  93.2G   148K  /var/crash\n"
"mypool/var/log         178K  93.2G   178K  /var/log\n"
"mypool/var/mail        144K  93.2G   144K  /var/mail\n"
"mypool/var/tmp         152K  93.2G   152K  /var/tmp\n"
"# zfs rename mypool/usr/mydataset mypool/var/newname\n"
"# zfs list\n"
"NAME                  USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                780M  93.2G   144K  none\n"
"mypool/ROOT           777M  93.2G   144K  none\n"
"mypool/ROOT/default   777M  93.2G   777M  /\n"
"mypool/tmp            176K  93.2G   176K  /tmp\n"
"mypool/usr            616K  93.2G   144K  /usr\n"
"mypool/usr/home       184K  93.2G   184K  /usr/home\n"
"mypool/usr/ports      144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src        144K  93.2G   144K  /usr/src\n"
"mypool/var           1.29M  93.2G   614K  /var\n"
"mypool/var/crash      148K  93.2G   148K  /var/crash\n"
"mypool/var/log        178K  93.2G   178K  /var/log\n"
"mypool/var/mail       144K  93.2G   144K  /var/mail\n"
"mypool/var/newname   87.5K  93.2G  87.5K  /var/newname\n"
"mypool/var/tmp        152K  93.2G   152K  /var/tmp\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1638
#, fuzzy
msgid ""
"Renaming snapshots uses the same command.  Due to the nature of snapshots, "
"rename cannot change their parent dataset.  To rename a recursive snapshot, "
"specify `-r`; this will also rename all snapshots with the same name in "
"child datasets."
msgstr ""
"重命名快照使用相同的命令。由于快照的特性，重命名不能改变它们的父数据集。要重命名递归快照，请指定“ -r "
"”；这也会重命名所有子数据集中具有相同名称的快照。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1648
#, no-wrap
msgid ""
"# zfs list -t snapshot\n"
"NAME                                USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/newname@first_snapshot      0      -  87.5K  -\n"
"# zfs rename mypool/var/newname@first_snapshot new_snapshot_name\n"
"# zfs list -t snapshot\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/newname@new_snapshot_name      0      -  87.5K  -\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1651
#, fuzzy, no-wrap
msgid "Setting Dataset Properties"
msgstr "设置数据集属性"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1661
#, fuzzy
msgid ""
"Each ZFS dataset has properties that control its behavior.  Most properties "
"are automatically inherited from the parent dataset, but can be overridden "
"locally.  Set a property on a dataset with `zfs set _property=value "
"dataset_`.  Most properties have a limited set of valid values, `zfs get` "
"will display each possible property and valid values.  Using `zfs inherit` "
"reverts most properties to their inherited values.  User-defined properties "
"are also possible.  They become part of the dataset configuration and "
"provide further information about the dataset or its contents.  To "
"distinguish these custom properties from the ones supplied as part of ZFS, "
"use a colon (`:`) to create a custom namespace for the property."
msgstr ""
"每个 ZFS 数据集都有控制其行为的属性。大多数属性会自动从父数据集继承，但可以在本地进行覆盖。使用 `zfs set _property = "
"value dataset_` 在数据集上设置属性。大多数属性有一组有限的有效值， `zfs get` 将显示每个可能的属性和有效值。使用 `zfs "
"inherit` "
"将大多数属性恢复为其继承的值。还可以定义用户自定义属性。它们成为数据集配置的一部分，并提供有关数据集或其内容的进一步信息。为了区分这些自定义属性和作为 "
"ZFS 的一部分提供的属性，可以使用冒号（ `:` ）为属性创建自定义命名空间。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1668
#, no-wrap
msgid ""
"# zfs set custom:costcenter=1234 tank\n"
"# zfs get custom:costcenter tank\n"
"NAME PROPERTY           VALUE SOURCE\n"
"tank custom:costcenter  1234  local\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1672
#, fuzzy
msgid ""
"To remove a custom property, use `zfs inherit` with `-r`.  If the custom "
"property is not defined in any of the parent datasets, this option removes "
"it (but the pool's history still records the change)."
msgstr ""
"要删除自定义属性，请使用 `zfs inherit` 命令并加上 `-r` "
"选项。如果自定义属性在任何父数据集中都没有定义，这个选项将删除它（但池的历史记录仍然会记录这个更改）。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1681
#, no-wrap
msgid ""
"# zfs inherit -r custom:costcenter tank\n"
"# zfs get custom:costcenter tank\n"
"NAME    PROPERTY           VALUE              SOURCE\n"
"tank    custom:costcenter  -                  -\n"
"# zfs get all tank | grep custom:costcenter\n"
"#\n"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:1684
#, fuzzy, no-wrap
msgid "Getting and Setting Share Properties"
msgstr "获取和设置共享属性"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1690
#, fuzzy
msgid ""
"Two commonly used and useful dataset properties are the NFS and SMB share "
"options.  Setting these defines if and how ZFS shares datasets on the "
"network.  At present, FreeBSD supports setting NFS sharing alone.  To get "
"the current status of a share, enter:"
msgstr ""
"两个常用且有用的数据集属性是 NFS 和 SMB 共享选项。设置这些选项可以定义 ZFS 在网络上共享数据集的方式和方式。目前， FreeBSD "
"仅支持设置 NFS 共享。要获取共享的当前状态，请输入："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1699
#, no-wrap
msgid ""
"# zfs get sharenfs mypool/usr/home\n"
"NAME             PROPERTY  VALUE    SOURCE\n"
"mypool/usr/home  sharenfs  on       local\n"
"# zfs get sharesmb mypool/usr/home\n"
"NAME             PROPERTY  VALUE    SOURCE\n"
"mypool/usr/home  sharesmb  off      local\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1702
#, fuzzy
msgid "To enable sharing of a dataset, enter:"
msgstr "要启用数据集的共享，请输入："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1706
#, no-wrap
msgid "#  zfs set sharenfs=on mypool/usr/home\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1710
#, fuzzy
msgid ""
"Set other options for sharing datasets through NFS, such as `-alldirs`, "
"`-maproot` and `-network`.  To set options on a dataset shared through NFS, "
"enter:"
msgstr ""
"设置通过 NFS 共享数据集的其他选项，例如 `-alldirs` 、 `-maproot` 和 `-network` 。要在通过 NFS "
"共享的数据集上设置选项，请输入："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1714
#, no-wrap
msgid ""
"#  zfs set sharenfs=\"-alldirs,-maproot=root,-network=192.168.1.0/24\" "
"mypool/usr/home\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:1717
#, fuzzy, no-wrap
msgid "Managing Snapshots"
msgstr "管理快照"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1731
#, fuzzy
msgid ""
"<<zfs-term-snapshot,Snapshots>> are one of the most powerful features of "
"ZFS.  A snapshot provides a read-only, point-in-time copy of the dataset.  "
"With Copy-On-Write (COW), ZFS creates snapshots fast by preserving older "
"versions of the data on disk.  If no snapshots exist, ZFS reclaims space for"
" future use when data is rewritten or deleted.  Snapshots preserve disk "
"space by recording just the differences between the current dataset and a "
"previous version.  Allowing snapshots on whole datasets, not on individual "
"files or directories.  A snapshot from a dataset duplicates everything "
"contained in it.  This includes the file system properties, files, "
"directories, permissions, and so on.  Snapshots use no extra space when "
"first created, but consume space as the blocks they reference change.  "
"Recursive snapshots taken with `-r` create snapshots with the same name on "
"the dataset and its children, providing a consistent moment-in-time snapshot"
" of the file systems.  This can be important when an application has files "
"on related datasets or that depend upon each other.  Without snapshots, a "
"backup would have copies of the files from different points in time."
msgstr ""
"<<zfs-term-snapshot ,快照 >> 是 ZFS 最强大的功能之一。快照提供了数据集的只读、时间点的副本。通过写时复制（ COW ）， "
"ZFS 通过在磁盘上保留旧版本的数据来快速创建快照。如果没有快照存在，当数据被重写或删除时， ZFS "
"会回收空间以供将来使用。快照通过记录当前数据集与先前版本之间的差异来保留磁盘空间。允许在整个数据集上进行快照，而不是在单个文件或目录上进行快照。数据集的快照复制其中包含的所有内容。这包括文件系统属性、文件、目录、权限等。快照在创建时不占用额外的空间，但随着它们引用的块的变化而消耗空间。使用"
" `-r` "
"进行递归快照会在数据集及其子数据集上创建具有相同名称的快照，提供文件系统的一致时刻快照。当应用程序在相关数据集上有文件或相互依赖时，这可能很重要。如果没有快照，备份将具有来自不同时间点的文件副本。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1740
#, fuzzy
msgid ""
"Snapshots in ZFS provide a variety of features that even other file systems "
"with snapshot functionality lack.  A typical example of snapshot use is as a"
" quick way of backing up the current state of the file system when "
"performing a risky action like a software installation or a system upgrade."
"  If the action fails, rolling back to the snapshot returns the system to "
"the same state when creating the snapshot.  If the upgrade was successful, "
"delete the snapshot to free up space.  Without snapshots, a failed upgrade "
"often requires restoring backups, which is tedious, time consuming, and may "
"require downtime during which the system is unusable.  Rolling back to "
"snapshots is fast, even while the system is running in normal operation, "
"with little or no downtime.  The time savings are enormous with multi-"
"terabyte storage systems considering the time required to copy the data from"
" backup.  Snapshots are not a replacement for a complete backup of a pool, "
"but offer a quick and easy way to store a dataset copy at a specific time."
msgstr ""
"ZFS "
"中的快照提供了许多其他具有快照功能的文件系统所缺乏的功能。快照的典型用法是在执行风险操作（如软件安装或系统升级）时，快速备份文件系统的当前状态。如果操作失败，回滚到快照可以将系统恢复到创建快照时的相同状态。如果升级成功，可以删除快照以释放空间。如果没有快照，升级失败通常需要恢复备份，这是繁琐、耗时的，并且可能需要停机时间，期间系统无法使用。回滚到快照是快速的，即使系统在正常运行中，几乎没有停机时间。考虑到从备份中复制数据所需的时间，对于多"
" TB 存储系统来说，节省的时间是巨大的。快照不能替代对池的完整备份，但提供了一种快速简便的方式来存储特定时间点的数据集副本。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:1742
#, fuzzy, no-wrap
msgid "Creating Snapshots"
msgstr "创建快照"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1746
#, fuzzy
msgid ""
"To create snapshots, use `zfs snapshot _dataset_@_snapshotname_`.  Adding "
"`-r` creates a snapshot recursively, with the same name on all child "
"datasets."
msgstr ""
"要创建快照，请使用 `zfs snapshot _dataset_@_snapshotname_` 命令。添加 `-r` "
"选项可以递归地创建快照，并在所有子数据集上使用相同的名称。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1748
#, fuzzy
msgid "Create a recursive snapshot of the entire pool:"
msgstr "创建整个池的递归快照："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1786
#, no-wrap
msgid ""
"# zfs list -t all\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool                                 780M  93.2G   144K  none\n"
"mypool/ROOT                            777M  93.2G   144K  none\n"
"mypool/ROOT/default                    777M  93.2G   777M  /\n"
"mypool/tmp                             176K  93.2G   176K  /tmp\n"
"mypool/usr                             616K  93.2G   144K  /usr\n"
"mypool/usr/home                        184K  93.2G   184K  /usr/home\n"
"mypool/usr/ports                       144K  93.2G   144K  /usr/ports\n"
"mypool/usr/src                         144K  93.2G   144K  /usr/src\n"
"mypool/var                            1.29M  93.2G   616K  /var\n"
"mypool/var/crash                       148K  93.2G   148K  /var/crash\n"
"mypool/var/log                         178K  93.2G   178K  /var/log\n"
"mypool/var/mail                        144K  93.2G   144K  /var/mail\n"
"mypool/var/newname                    87.5K  93.2G  87.5K  /var/newname\n"
"mypool/var/newname@new_snapshot_name      0      -  87.5K  -\n"
"mypool/var/tmp                         152K  93.2G   152K  /var/tmp\n"
"# zfs snapshot -r mypool@my_recursive_snapshot\n"
"# zfs list -t snapshot\n"
"NAME                                        USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool@my_recursive_snapshot                   0      -   144K  -\n"
"mypool/ROOT@my_recursive_snapshot              0      -   144K  -\n"
"mypool/ROOT/default@my_recursive_snapshot      0      -   777M  -\n"
"mypool/tmp@my_recursive_snapshot               0      -   176K  -\n"
"mypool/usr@my_recursive_snapshot               0      -   144K  -\n"
"mypool/usr/home@my_recursive_snapshot          0      -   184K  -\n"
"mypool/usr/ports@my_recursive_snapshot         0      -   144K  -\n"
"mypool/usr/src@my_recursive_snapshot           0      -   144K  -\n"
"mypool/var@my_recursive_snapshot               0      -   616K  -\n"
"mypool/var/crash@my_recursive_snapshot         0      -   148K  -\n"
"mypool/var/log@my_recursive_snapshot           0      -   178K  -\n"
"mypool/var/mail@my_recursive_snapshot          0      -   144K  -\n"
"mypool/var/newname@new_snapshot_name           0      -  87.5K  -\n"
"mypool/var/newname@my_recursive_snapshot       0      -  87.5K  -\n"
"mypool/var/tmp@my_recursive_snapshot           0      -   152K  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1791
#, fuzzy
msgid ""
"Snapshots are not shown by a normal `zfs list` operation.  To list "
"snapshots, append `-t snapshot` to `zfs list`.  `-t all` displays both file "
"systems and snapshots."
msgstr ""
"普通的 `zfs list` 操作不会显示快照。要列出快照，请在 `zfs list` 后面添加 `-t snapshot` 。 `-t all` "
"可以同时显示文件系统和快照。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1795
#, fuzzy
msgid ""
"Snapshots are not mounted directly, showing no path in the `MOUNTPOINT` "
"column.  ZFS does not mention available disk space in the `AVAIL` column, as"
" snapshots are read-only after their creation.  Compare the snapshot to the "
"original dataset:"
msgstr ""
"快照不会直接挂载，因此在“ MOUNTPOINT ”列中不显示路径。 ZFS 在“ AVAIL "
"”列中不提及可用磁盘空间，因为快照在创建后是只读的。将快照与原始数据集进行比较："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1802
#, no-wrap
msgid ""
"# zfs list -rt all mypool/usr/home\n"
"NAME                                    USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/usr/home                         184K  93.2G   184K  /usr/home\n"
"mypool/usr/home@my_recursive_snapshot      0      -   184K  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1808
#, fuzzy
msgid ""
"Displaying both the dataset and the snapshot together reveals how snapshots "
"work in <<zfs-term-cow,COW>> fashion.  They save the changes (_delta_) made "
"and not the complete file system contents all over again.  This means that "
"snapshots take little space when making changes.  Observe space usage even "
"more by copying a file to the dataset, then creating a second snapshot:"
msgstr ""
"同时显示数据集和快照可以展示快照以 COW "
"（写时复制）方式工作的原理。它们保存所做的更改（_delta_），而不是再次保存完整的文件系统内容。这意味着在进行更改时，快照所占用的空间很小。通过将文件复制到数据集中，然后创建第二个快照，可以更加观察空间使用情况："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1818
#, no-wrap
msgid ""
"# cp /etc/passwd /var/tmp\n"
"# zfs snapshot mypool/var/tmp@after_cp\n"
"# zfs list -rt all mypool/var/tmp\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/tmp                         206K  93.2G   118K  /var/tmp\n"
"mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -\n"
"mypool/var/tmp@after_cp                   0      -   118K  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1823
#, fuzzy
msgid ""
"The second snapshot contains the changes to the dataset after the copy "
"operation.  This yields enormous space savings.  Notice that the size of the"
" snapshot `_mypool/var/tmp@my_recursive_snapshot_` also changed in the "
"`USED` column to show the changes between itself and the snapshot taken "
"afterwards."
msgstr ""
"第二个快照包含了复制操作后数据集的变化。这样可以节省大量的空间。请注意，快照 `_mypool/var/tmp @ "
"my_recursive_snapshot_` 的大小在 `USED` 列中也发生了变化，以显示它与之后拍摄的快照之间的变化。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:1825
#, fuzzy, no-wrap
msgid "Comparing Snapshots"
msgstr "比较快照"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1831
#, fuzzy
msgid ""
"ZFS provides a built-in command to compare the differences in content "
"between two snapshots.  This is helpful with a lot of snapshots taken over "
"time when the user wants to see how the file system has changed over time.  "
"For example, `zfs diff` lets a user find the latest snapshot that still "
"contains a file deleted by accident.  Doing this for the two snapshots "
"created in the previous section yields this output:"
msgstr ""
"ZFS 提供了一个内置命令，用于比较两个快照之间内容的差异。当用户想要查看文件系统随时间变化的方式时，这非常有帮助，尤其是在有很多快照的情况下。例如， "
"`zfs diff` 命令可以帮助用户找到最新的快照，其中仍然包含了意外删除的文件。对于前一节创建的两个快照，执行此命令将输出如下结果："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1842
#, no-wrap
msgid ""
"# zfs list -rt all mypool/var/tmp\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/tmp                         206K  93.2G   118K  /var/tmp\n"
"mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -\n"
"mypool/var/tmp@after_cp                   0      -   118K  -\n"
"# zfs diff mypool/var/tmp@my_recursive_snapshot\n"
"M       /var/tmp/\n"
"+       /var/tmp/passwd\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1846
#, fuzzy
msgid ""
"The command lists the changes between the specified snapshot (in this case "
"`_mypool/var/tmp@my_recursive_snapshot_`) and the live file system.  The "
"first column shows the change type:"
msgstr ""
"该命令列出了指定快照（在本例中为 `_mypool/var/tmp @ my_recursive_snapshot_` "
"）与活动文件系统之间的变化。第一列显示变化类型："

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1852
#, fuzzy, no-wrap
msgid "+"
msgstr "+"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1854
#, fuzzy, no-wrap
msgid "Adding the path or file."
msgstr "添加路径或文件。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1855
#, fuzzy, no-wrap
msgid "-"
msgstr "翻译引擎"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1857
#, fuzzy, no-wrap
msgid "Deleting the path or file."
msgstr "删除路径或文件。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1858
#, fuzzy, no-wrap
msgid "M"
msgstr "M"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1860
#, fuzzy, no-wrap
msgid "Modifying the path or file."
msgstr "修改路径或文件。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1861
#, , no-wrap
msgid "R"
msgstr ""

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:1862
#, fuzzy, no-wrap
msgid "Renaming the path or file."
msgstr "重命名路径或文件。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1867
#, fuzzy
msgid ""
"Comparing the output with the table, it becomes clear that ZFS added "
"[.filename]#passwd# after creating the snapshot "
"`_mypool/var/tmp@my_recursive_snapshot_`.  This also resulted in a "
"modification to the parent directory mounted at `_/var/tmp_`."
msgstr ""
"将输出与表格进行比较，可以清楚地看到 ZFS 在创建快照 `_mypool/var/tmp @ my_recursive_snapshot_` "
"之后添加了 [.filename]#passwd# 。这也导致了挂载在 `_/var/tmp_` 上的父目录的修改。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1869
#, fuzzy
msgid ""
"Comparing two snapshots is helpful when using the ZFS replication feature to"
" transfer a dataset to a different host for backup purposes."
msgstr "当使用 ZFS 复制功能将数据集传输到不同的主机进行备份时，比较两个快照是非常有帮助的。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1871
#, fuzzy
msgid ""
"Compare two snapshots by providing the full dataset name and snapshot name "
"of both datasets:"
msgstr "通过提供两个数据集的完整数据集名称和快照名称来比较两个快照："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1883
#, no-wrap
msgid ""
"# cp /var/tmp/passwd /var/tmp/passwd.copy\n"
"# zfs snapshot mypool/var/tmp@diff_snapshot\n"
"# zfs diff mypool/var/tmp@my_recursive_snapshot mypool/var/tmp@diff_snapshot\n"
"M       /var/tmp/\n"
"+       /var/tmp/passwd\n"
"+       /var/tmp/passwd.copy\n"
"# zfs diff mypool/var/tmp@my_recursive_snapshot mypool/var/tmp@after_cp\n"
"M       /var/tmp/\n"
"+       /var/tmp/passwd\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1887
#, fuzzy
msgid ""
"A backup administrator can compare two snapshots received from the sending "
"host and determine the actual changes in the dataset.  See the <<zfs-zfs-"
"send,Replication>> section for more information."
msgstr ""
"备份管理员可以比较从发送主机接收到的两个快照，并确定数据集中的实际更改。有关更多信息，请参阅 <<zfs-zfs-send ,复制 >> 部分。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:1889
#, fuzzy, no-wrap
msgid "Snapshot Rollback"
msgstr "快照回滚"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1902
#, fuzzy
msgid ""
"When at least one snapshot is available, roll back to it at any time.  Most "
"often this is the case when the current state of the dataset is no longer "
"and if preferring an older version.  Scenarios such as local development "
"tests gone wrong, botched system updates hampering the system functionality,"
" or the need to restore deleted files or directories are all too common "
"occurrences.  To roll back a snapshot, use `zfs rollback _snapshotname_`.  "
"If a lot of changes are present, the operation will take a long time.  "
"During that time, the dataset always remains in a consistent state, much "
"like a database that conforms to ACID principles is performing a rollback.  "
"This is happening while the dataset is live and accessible without requiring"
" a downtime.  Once the snapshot rolled back, the dataset has the same state "
"as it had when the snapshot was originally taken.  Rolling back to a "
"snapshot discards all other data in that dataset not part of the snapshot.  "
"Taking a snapshot of the current state of the dataset before rolling back to"
" a previous one is a good idea when requiring some data later.  This way, "
"the user can roll back and forth between snapshots without losing data that "
"is still valuable."
msgstr ""
"当至少有一个快照可用时，随时可以回滚到该快照。大多数情况下，当数据集的当前状态不再存在或者更喜欢旧版本时，会出现这种情况。诸如本地开发测试失败、系统更新失败导致系统功能受阻，或者需要恢复已删除的文件或目录等情况都很常见。要回滚快照，请使用"
" `zfs rollback _snapshotname_` 命令。如果存在大量更改，操作将需要很长时间。在此期间，数据集始终保持一致的状态，就像符合 "
"ACID "
"原则的数据库执行回滚操作一样。这一切都发生在数据集处于活动状态且可访问的情况下，无需停机。一旦快照回滚完成，数据集的状态与快照创建时的状态相同。回滚到快照会丢弃数据集中不属于该快照的所有其他数据。在回滚到以前的快照之前，将当前数据集的状态进行快照是一个好主意，以便稍后需要某些数据。这样，用户可以在快照之间来回切换，而不会丢失仍然有价值的数据。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1904
#, fuzzy
msgid ""
"In the first example, roll back a snapshot because of a careless `rm` "
"operation that removes too much data than intended."
msgstr "在第一个示例中，由于一个粗心的 `rm` 操作删除了比预期更多的数据，因此需要回滚一个快照。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1918
#, no-wrap
msgid ""
"# zfs list -rt all mypool/var/tmp\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/tmp                         262K  93.2G   120K  /var/tmp\n"
"mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -\n"
"mypool/var/tmp@after_cp               53.5K      -   118K  -\n"
"mypool/var/tmp@diff_snapshot              0      -   120K  -\n"
"# ls /var/tmp\n"
"passwd          passwd.copy     vi.recover\n"
"# rm /var/tmp/passwd*\n"
"# ls /var/tmp\n"
"vi.recover\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1923
#, fuzzy
msgid ""
"At this point, the user notices the removal of extra files and wants them "
"back.  ZFS provides an easy way to get them back using rollbacks, when "
"performing snapshots of important data on a regular basis.  To get the files"
" back and start over from the last snapshot, issue the command:"
msgstr ""
"在这一点上，用户注意到额外文件被删除了，并希望将它们恢复。 ZFS "
"提供了一种简单的方法来使用回滚将它们恢复，当定期对重要数据进行快照时。要将文件恢复并从最后一个快照重新开始，执行以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1929
#, no-wrap
msgid ""
"# zfs rollback mypool/var/tmp@diff_snapshot\n"
"# ls /var/tmp\n"
"passwd          passwd.copy     vi.recover\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1934
#, fuzzy
msgid ""
"The rollback operation restored the dataset to the state of the last "
"snapshot.  Rolling back to a snapshot taken much earlier with other "
"snapshots taken afterwards is also possible.  When trying to do this, ZFS "
"will issue this warning:"
msgstr "回滚操作将数据集恢复到最后一个快照的状态。也可以回滚到之前拍摄的快照之后拍摄的其他快照的状态。在尝试这样做时， ZFS 会发出以下警告："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1947
#, no-wrap
msgid ""
"# zfs list -rt snapshot mypool/var/tmp\n"
"AME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/tmp@my_recursive_snapshot    88K      -   152K  -\n"
"mypool/var/tmp@after_cp               53.5K      -   118K  -\n"
"mypool/var/tmp@diff_snapshot              0      -   120K  -\n"
"# zfs rollback mypool/var/tmp@my_recursive_snapshot\n"
"cannot rollback to 'mypool/var/tmp@my_recursive_snapshot': more recent snapshots exist\n"
"use '-r' to force deletion of the following snapshots:\n"
"mypool/var/tmp@after_cp\n"
"mypool/var/tmp@diff_snapshot\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1954
#, fuzzy
msgid ""
"This warning means that snapshots exist between the current state of the "
"dataset and the snapshot to which the user wants to roll back.  To complete "
"the rollback delete these snapshots.  ZFS cannot track all the changes "
"between different states of the dataset, because snapshots are read-only.  "
"ZFS will not delete the affected snapshots unless the user specifies `-r` to"
" confirm that this is the desired action.  If that is the intention, and "
"understanding the consequences of losing all intermediate snapshots, issue "
"the command:"
msgstr ""
"这个警告意味着在当前数据集状态和用户想要回滚的快照之间存在快照。要完成回滚操作，请删除这些快照。由于快照是只读的， ZFS "
"无法跟踪数据集不同状态之间的所有更改。除非用户使用 `-r` 参数确认这是所需的操作，否则 ZFS "
"不会删除受影响的快照。如果这是用户的意图，并且理解丢失所有中间快照的后果，请执行以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1963
#, no-wrap
msgid ""
"# zfs rollback -r mypool/var/tmp@my_recursive_snapshot\n"
"# zfs list -rt snapshot mypool/var/tmp\n"
"NAME                                   USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool/var/tmp@my_recursive_snapshot     8K      -   152K  -\n"
"# ls /var/tmp\n"
"vi.recover\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1966
#, fuzzy
msgid ""
"The output from `zfs list -t snapshot` confirms the removal of the "
"intermediate snapshots as a result of `zfs rollback -r`."
msgstr "`zfs list -t snapshot` 的输出确认了由于 `zfs rollback -r` 的结果，中间快照已被删除。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:1968
#, fuzzy, no-wrap
msgid "Restoring Individual Files from Snapshots"
msgstr "从快照中恢复单个文件"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1975
#, fuzzy
msgid ""
"Snapshots live in a hidden directory under the parent dataset: "
"[.filename]#.zfs/snapshots/snapshotname#.  By default, these directories "
"will not show even when executing a standard `ls -a` .  Although the "
"directory doesn't show, access it like any normal directory.  The property "
"named `snapdir` controls whether these hidden directories show up in a "
"directory listing.  Setting the property to `visible` allows them to appear "
"in the output of `ls` and other commands that deal with directory contents."
msgstr ""
"快照存储在父数据集的隐藏目录下： [.filename]#.zfs/snapshots/snapshotname# 。默认情况下，即使执行标准的 `ls"
" -a` 命令，这些目录也不会显示出来。尽管目录不可见，但可以像访问普通目录一样访问它。名为 `snapdir` "
"的属性控制这些隐藏目录是否在目录列表中显示。将该属性设置为 `visible` 可以使它们出现在 `ls` 和其他处理目录内容的命令的输出中。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:1986
#, no-wrap
msgid ""
"# zfs get snapdir mypool/var/tmp\n"
"NAME            PROPERTY  VALUE    SOURCE\n"
"mypool/var/tmp  snapdir   hidden   default\n"
"# ls -a /var/tmp\n"
".               ..              passwd          vi.recover\n"
"# zfs set snapdir=visible mypool/var/tmp\n"
"# ls -a /var/tmp\n"
".               ..              .zfs            passwd          vi.recover\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:1991
#, fuzzy
msgid ""
"Restore individual files to a previous state by copying them from the "
"snapshot back to the parent dataset.  The directory structure below "
"[.filename]#.zfs/snapshot# has a directory named like the snapshots taken "
"earlier to make it easier to identify them.  The next example shows how to "
"restore a file from the hidden [.filename]#.zfs# directory by copying it "
"from the snapshot containing the latest version of the file:"
msgstr ""
"通过将文件从快照复制回父数据集，将其恢复到先前的状态。 [.filename]#.zfs/snapshot# "
"下的目录结构中有一个类似于先前拍摄的快照的目录，以便更容易识别它们。下一个示例显示了如何从隐藏的 [.filename]#.zfs# "
"目录中复制文件，从包含文件最新版本的快照中恢复文件："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2002
#, no-wrap
msgid ""
"# rm /var/tmp/passwd\n"
"# ls -a /var/tmp\n"
".               ..              .zfs            vi.recover\n"
"# ls /var/tmp/.zfs/snapshot\n"
"after_cp                my_recursive_snapshot\n"
"# ls /var/tmp/.zfs/snapshot/after_cp\n"
"passwd          vi.recover\n"
"# cp /var/tmp/.zfs/snapshot/after_cp/passwd /var/tmp\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2009
#, fuzzy
msgid ""
"Even if the `snapdir` property is set to hidden, running `ls .zfs/snapshot` "
"will still list the contents of that directory.  The administrator decides "
"whether to display these directories.  This is a per-dataset setting.  "
"Copying files or directories from this hidden [.filename]#.zfs/snapshot# is "
"simple enough.  Trying it the other way around results in this error:"
msgstr ""
"即使将 `snapdir` 属性设置为隐藏，运行 `ls .zfs/snapshot` "
"仍然会列出该目录的内容。管理员决定是否显示这些目录。这是每个数据集的设置。从这个隐藏的 [.filename]#.zfs/snapshot# "
"复制文件或目录非常简单。尝试反过来操作会导致以下错误："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2014
#, no-wrap
msgid ""
"# cp /etc/rc.conf /var/tmp/.zfs/snapshot/after_cp/\n"
"cp: /var/tmp/.zfs/snapshot/after_cp/rc.conf: Read-only file system\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2018
#, fuzzy
msgid ""
"The error reminds the user that snapshots are read-only and cannot change "
"after creation.  Copying files into and removing them from snapshot "
"directories are both disallowed because that would change the state of the "
"dataset they represent."
msgstr "该错误提醒用户快照是只读的，创建后不能更改。将文件复制到快照目录或从中删除文件都是不允许的，因为这会改变所表示数据集的状态。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2021
#, fuzzy
msgid ""
"Snapshots consume space based on how much the parent file system has changed"
" since the time of the snapshot.  The `written` property of a snapshot "
"tracks the space the snapshot uses."
msgstr "快照占用的空间取决于父文件系统自快照以来的更改量。快照的 `written` 属性跟踪快照使用的空间。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2025
#, fuzzy
msgid ""
"To destroy snapshots and reclaim the space, use `zfs destroy "
"_dataset_@_snapshot_`.  Adding `-r` recursively removes all snapshots with "
"the same name under the parent dataset.  Adding `-n -v` to the command "
"displays a list of the snapshots to be deleted and an estimate of the space "
"it would reclaim without performing the actual destroy operation."
msgstr ""
"要销毁快照并回收空间，请使用 `zfs destroy _dataset_@_snapshot_` 命令。添加 `-r` "
"选项可以递归删除父数据集下具有相同名称的所有快照。在命令中添加 `-n -v` 选项可以显示要删除的快照列表以及执行实际销毁操作前将回收的空间的估计值。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2027
#, fuzzy, no-wrap
msgid "Managing Clones"
msgstr "管理克隆实例"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2036
#, fuzzy
msgid ""
"A clone is a copy of a snapshot treated more like a regular dataset.  Unlike"
" a snapshot, a clone is writeable and mountable, and has its own properties."
"  After creating a clone using `zfs clone`, destroying the originating "
"snapshot is impossible.  To reverse the child/parent relationship between "
"the clone and the snapshot use `zfs promote`.  Promoting a clone makes the "
"snapshot become a child of the clone, rather than of the original parent "
"dataset.  This will change how ZFS accounts for the space, but not actually "
"change the amount of space consumed.  Mounting the clone anywhere within the"
" ZFS file system hierarchy is possible, not only below the original location"
" of the snapshot."
msgstr ""
"克隆是快照的副本，更像一个常规数据集。与快照不同，克隆是可写的和可挂载的，并且具有自己的属性。使用 `zfs clone` "
"创建克隆后，无法销毁原始快照。要反转克隆和快照之间的子 / 父关系，请使用 `zfs promote` "
"。将克隆提升为快照成为克隆的子项，而不是原始父数据集的子项。这将改变 ZFS 对空间的计算方式，但实际上不会改变所消耗的空间量。可以在 ZFS "
"文件系统层次结构中的任何位置挂载克隆，不仅限于快照的原始位置下方。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2038
#, fuzzy
msgid "To show the clone feature use this example dataset:"
msgstr "要展示克隆功能，请使用以下示例数据集："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2046
#, no-wrap
msgid ""
"# zfs list -rt all camino/home/joe\n"
"NAME                    USED  AVAIL  REFER  MOUNTPOINT\n"
"camino/home/joe         108K   1.3G    87K  /usr/home/joe\n"
"camino/home/joe@plans    21K      -  85.5K  -\n"
"camino/home/joe@backup    0K      -    87K  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2052
#, fuzzy
msgid ""
"A typical use for clones is to experiment with a specific dataset while "
"keeping the snapshot around to fall back to in case something goes wrong.  "
"Since snapshots cannot change, create a read/write clone of a snapshot.  "
"After achieving the desired result in the clone, promote the clone to a "
"dataset and remove the old file system.  Removing the parent dataset is not "
"strictly necessary, as the clone and dataset can coexist without problems."
msgstr ""
"克隆的典型用途是在进行特定数据集的实验时，保留快照以备不时之需。由于快照是不可更改的，因此需要创建一个可读 / "
"写的快照克隆。在克隆中获得所需的结果后，将克隆提升为数据集并删除旧的文件系统。严格来说，删除父数据集并非必需，因为克隆和数据集可以共存而不会出现问题。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2059
#, no-wrap
msgid ""
"# zfs clone camino/home/joe@backup camino/home/joenew\n"
"# ls /usr/home/joe*\n"
"/usr/home/joe:\n"
"backup.txz     plans.txt\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2066
#, no-wrap
msgid ""
"/usr/home/joenew:\n"
"backup.txz     plans.txt\n"
"# df -h /usr/home\n"
"Filesystem          Size    Used   Avail Capacity  Mounted on\n"
"usr/home/joe        1.3G     31k    1.3G     0%    /usr/home/joe\n"
"usr/home/joenew     1.3G     31k    1.3G     0%    /usr/home/joenew\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2075
#, fuzzy
msgid ""
"Creating a clone makes it an exact copy of the state the dataset was in when"
" taking the snapshot.  Changing the clone independently from its originating"
" dataset is possible now.  The connection between the two is the snapshot.  "
"ZFS records this connection in the property `origin`.  Promoting the clone "
"with `zfs promote` makes the clone an independent dataset.  This removes the"
" value of the `origin` property and disconnects the newly independent "
"dataset from the snapshot.  This example shows it:"
msgstr ""
"创建克隆会使其成为数据集在拍摄快照时的精确副本。现在可以独立地更改克隆与其源数据集之间的连接。两者之间的连接是快照。 ZFS 将此连接记录在属性 "
"`origin` 中。使用 `zfs promote` 提升克隆将使其成为独立的数据集。这将删除 `origin` "
"属性的值，并断开新独立数据集与快照之间的连接。以下示例说明了这一点："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2085
#, no-wrap
msgid ""
"# zfs get origin camino/home/joenew\n"
"NAME                  PROPERTY  VALUE                     SOURCE\n"
"camino/home/joenew    origin    camino/home/joe@backup    -\n"
"# zfs promote camino/home/joenew\n"
"# zfs get origin camino/home/joenew\n"
"NAME                  PROPERTY  VALUE   SOURCE\n"
"camino/home/joenew    origin    -       -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2090
#, fuzzy
msgid ""
"After making some changes like copying [.filename]#loader.conf# to the "
"promoted clone, for example, the old directory becomes obsolete in this "
"case.  Instead, the promoted clone can replace it.  To do this, `zfs "
"destroy` the old dataset first and then `zfs rename` the clone to the old "
"dataset name (or to an entirely different name)."
msgstr ""
"在进行一些更改后，例如将 [.filename]#loader.conf# "
"复制到推广的克隆中，旧目录在这种情况下变得过时。相反，推广的克隆可以替代它。为了做到这一点，首先使用 `zfs destroy` "
"命令销毁旧数据集，然后使用 `zfs rename` 命令将克隆重命名为旧数据集的名称（或完全不同的名称）。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2101
#, no-wrap
msgid ""
"# cp /boot/defaults/loader.conf /usr/home/joenew\n"
"# zfs destroy -f camino/home/joe\n"
"# zfs rename camino/home/joenew camino/home/joe\n"
"# ls /usr/home/joe\n"
"backup.txz     loader.conf     plans.txt\n"
"# df -h /usr/home\n"
"Filesystem          Size    Used   Avail Capacity  Mounted on\n"
"usr/home/joe        1.3G    128k    1.3G     0%    /usr/home/joe\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2110
#, fuzzy
msgid ""
"The cloned snapshot is now an ordinary dataset.  It contains all the data "
"from the original snapshot plus the files added to it like "
"[.filename]#loader.conf#.  Clones provide useful features to ZFS users in "
"different scenarios.  For example, provide jails as snapshots containing "
"different sets of installed applications.  Users can clone these snapshots "
"and add their own applications as they see fit.  Once satisfied with the "
"changes, promote the clones to full datasets and provide them to end users "
"to work with like they would with a real dataset.  This saves time and "
"administrative overhead when providing these jails."
msgstr ""
"克隆的快照现在是一个普通的数据集。它包含了原始快照中的所有数据，以及像 [.filename]#loader.conf# "
"这样添加到其中的文件。在不同的场景中，克隆为 ZFS "
"用户提供了有用的功能。例如，可以将监狱作为包含不同安装应用程序集的快照。用户可以克隆这些快照，并根据需要添加自己的应用程序。一旦对更改满意，可以将克隆提升为完整的数据集，并将其提供给最终用户，就像使用真实数据集一样。这样可以节省提供这些监狱时的时间和管理开销。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2112
#, fuzzy, no-wrap
msgid "Replication"
msgstr "复制"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2120
#, fuzzy
msgid ""
"Keeping data on a single pool in one location exposes it to risks like theft"
" and natural or human disasters.  Making regular backups of the entire pool "
"is vital.  ZFS provides a built-in serialization feature that can send a "
"stream representation of the data to standard output.  Using this feature, "
"storing this data on another pool connected to the local system is possible,"
" as is sending it over a network to another system.  Snapshots are the basis"
" for this replication (see the section on <<zfs-zfs-snapshot,ZFS "
"snapshots>>).  The commands used for replicating data are `zfs send` and "
"`zfs receive`."
msgstr ""
"将数据存储在一个位置的单个池中会使其暴露于盗窃、自然灾害或人为灾害等风险。定期备份整个池是至关重要的。 ZFS "
"提供了一个内置的序列化功能，可以将数据的流表示发送到标准输出。使用此功能，可以将这些数据存储在连接到本地系统的另一个池中，也可以将其发送到另一个系统上的网络上。快照是复制的基础（参见"
" <<zfs-zfs-snapshot ， ZFS 快照 >> 部分）。用于复制数据的命令是 `zfs send` 和 `zfs receive` 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2122
#, fuzzy
msgid "These examples show ZFS replication with these two pools:"
msgstr "这些示例展示了使用这两个存储池进行 ZFS 复制的情况："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2129
#, no-wrap
msgid ""
"# zpool list\n"
"NAME    SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG   CAP  DEDUP  HEALTH  ALTROOT\n"
"backup  960M    77K   896M         -         -     0%    0%  1.00x  ONLINE  -\n"
"mypool  984M  43.7M   940M         -         -     0%    4%  1.00x  ONLINE  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2137
#, fuzzy
msgid ""
"The pool named _mypool_ is the primary pool where writing and reading data "
"happens on a regular basis.  Using a second standby pool _backup_ in case "
"the primary pool becomes unavailable.  Note that this fail-over is not done "
"automatically by ZFS, but must be manually done by a system administrator "
"when needed.  Use a snapshot to provide a consistent file system version to "
"replicate.  After creating a snapshot of _mypool_, copy it to the _backup_ "
"pool by replicating snapshots.  This does not include changes made since the"
" most recent snapshot."
msgstr ""
"名为_mypool_的池是主要的池，数据的写入和读取在此池中定期进行。在主要池不可用时，使用第二个备用池_backup_。请注意， ZFS "
"不会自动执行此故障转移，而是需要系统管理员在需要时手动执行。使用快照提供一致的文件系统版本进行复制。在创建_mypool_的快照后，通过复制快照将其复制到_backup_池中。这不包括自最近快照以来所做的更改。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2144
#, no-wrap
msgid ""
"# zfs snapshot mypool@backup1\n"
"# zfs list -t snapshot\n"
"NAME                    USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool@backup1             0      -  43.6M  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2149
#, fuzzy
msgid ""
"Now that a snapshot exists, use `zfs send` to create a stream representing "
"the contents of the snapshot.  Store this stream as a file or receive it on "
"another pool.  Write the stream to standard output, but redirect to a file "
"or pipe or an error appears:"
msgstr ""
"现在有了一个快照，使用 `zfs send` "
"命令创建一个表示快照内容的流。将这个流存储为文件，或者在另一个存储池中接收它。将流写入标准输出，但要将其重定向到文件或管道，否则会出现错误。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2155
#, no-wrap
msgid ""
"# zfs send mypool@backup1\n"
"Error: Stream can not be written to a terminal.\n"
"You must redirect standard output.\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2159
#, fuzzy
msgid ""
"To back up a dataset with `zfs send`, redirect to a file located on the "
"mounted backup pool.  Ensure that the pool has enough free space to "
"accommodate the size of the sent snapshot, which means the data contained in"
" the snapshot, not the changes from the previous snapshot."
msgstr ""
"使用 `zfs send` "
"命令备份数据集时，将其重定向到位于已挂载的备份池上的文件。确保备份池有足够的空间来容纳发送的快照的大小，这指的是快照中包含的数据，而不是与上一个快照的更改。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2167
#, no-wrap
msgid ""
"# zfs send mypool@backup1 > /backup/backup1\n"
"# zpool list\n"
"NAME    SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT\n"
"backup  960M  63.7M   896M         -         -     0%     6%  1.00x  ONLINE  -\n"
"mypool  984M  43.7M   940M         -         -     0%     4%  1.00x  ONLINE  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2171
#, fuzzy
msgid ""
"The `zfs send` transferred all the data in the snapshot called _backup1_ to "
"the pool named _backup_.  To create and send these snapshots automatically, "
"use a man:cron[8] job."
msgstr ""
"`zfs send` 命令将名为_backup1_的快照中的所有数据传输到名为_backup_的存储池中。要自动创建和发送这些快照，请使用 "
"man:cron[8] 任务。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2177
#, fuzzy
msgid ""
"Instead of storing the backups as archive files, ZFS can receive them as a "
"live file system, allowing direct access to the backed up data.  To get to "
"the actual data contained in those streams, use `zfs receive` to transform "
"the streams back into files and directories.  The example below combines "
"`zfs send` and `zfs receive` using a pipe to copy the data from one pool to "
"another.  Use the data directly on the receiving pool after the transfer is "
"complete.  It is only possible to replicate a dataset to an empty dataset."
msgstr ""
"ZFS 可以将备份存储为实时文件系统，而不是存储为归档文件，从而可以直接访问备份数据。要访问这些流中包含的实际数据，可以使用 `zfs receive`"
" 将流转换回文件和目录。下面的示例结合了 `zfs send` 和 `zfs receive` "
"，使用管道将数据从一个存储池复制到另一个存储池。在传输完成后，可以直接在接收存储池上使用数据。只有将数据集复制到空数据集才是可能的。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2185
#, no-wrap
msgid ""
"# zfs snapshot mypool@replica1\n"
"# zfs send -v mypool@replica1 | zfs receive backup/mypool\n"
"send from @ to mypool@replica1 estimated size is 50.1M\n"
"total estimated size is 50.1M\n"
"TIME        SENT   SNAPSHOT\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2190
#, no-wrap
msgid ""
"# zpool list\n"
"NAME    SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT\n"
"backup  960M  63.7M   896M         -         -     0%     6%  1.00x  ONLINE  -\n"
"mypool  984M  43.7M   940M         -         -     0%     4%  1.00x  ONLINE  -\n"
msgstr ""

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:2193
#, fuzzy, no-wrap
msgid "Incremental Backups"
msgstr "增量备份"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2198
#, fuzzy
msgid ""
"`zfs send` can also determine the difference between two snapshots and send "
"individual differences between the two.  This saves disk space and transfer "
"time.  For example:"
msgstr "`zfs send` 还可以确定两个快照之间的差异，并发送两者之间的个别差异。这样可以节省磁盘空间和传输时间。例如："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2210
#, no-wrap
msgid ""
"# zfs snapshot mypool@replica2\n"
"# zfs list -t snapshot\n"
"NAME                    USED  AVAIL  REFER  MOUNTPOINT\n"
"mypool@replica1         5.72M      -  43.6M  -\n"
"mypool@replica2             0      -  44.1M  -\n"
"# zpool list\n"
"NAME    SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG   CAP  DEDUP  HEALTH  ALTROOT\n"
"backup  960M  61.7M   898M         -         -     0%    6%  1.00x  ONLINE  -\n"
"mypool  960M  50.2M   910M         -         -     0%    5%  1.00x  ONLINE  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2216
#, fuzzy
msgid ""
"Create a second snapshot called _replica2_.  This second snapshot contains "
"changes made to the file system between now and the previous snapshot, "
"_replica1_.  Using `zfs send -i` and indicating the pair of snapshots "
"generates an incremental replica stream containing the changed data.  This "
"succeeds if the initial snapshot already exists on the receiving side."
msgstr ""
"创建一个名为_replica2_的第二个快照。这个第二个快照包含了从现在到上一个快照_replica1_之间对文件系统所做的更改。使用 `zfs "
"send -i` 命令，并指定快照对，可以生成一个增量复制流，其中包含了更改的数据。如果接收端已经存在初始快照，则此操作将成功。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2223
#, no-wrap
msgid ""
"# zfs send -v -i mypool@replica1 mypool@replica2 | zfs receive /backup/mypool\n"
"send from @replica1 to mypool@replica2 estimated size is 5.02M\n"
"total estimated size is 5.02M\n"
"TIME        SENT   SNAPSHOT\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2228
#, no-wrap
msgid ""
"# zpool list\n"
"NAME    SIZE  ALLOC   FREE   CKPOINT  EXPANDSZ   FRAG  CAP  DEDUP  HEALTH  ALTROOT\n"
"backup  960M  80.8M   879M         -         -     0%   8%  1.00x  ONLINE  -\n"
"mypool  960M  50.2M   910M         -         -     0%   5%  1.00x  ONLINE  -\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2234
#, no-wrap
msgid ""
"# zfs list\n"
"NAME                         USED  AVAIL  REFER  MOUNTPOINT\n"
"backup                      55.4M   240G   152K  /backup\n"
"backup/mypool               55.3M   240G  55.2M  /backup/mypool\n"
"mypool                      55.6M  11.6G  55.0M  /mypool\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2241
#, no-wrap
msgid ""
"# zfs list -t snapshot\n"
"NAME                                         USED  AVAIL  REFER  MOUNTPOINT\n"
"backup/mypool@replica1                       104K      -  50.2M  -\n"
"backup/mypool@replica2                          0      -  55.2M  -\n"
"mypool@replica1                             29.9K      -  50.0M  -\n"
"mypool@replica2                                 0      -  55.0M  -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2246
#, fuzzy
msgid ""
"The incremental stream replicated the changed data rather than the entirety "
"of _replica1_.  Sending the differences alone took much less time to "
"transfer and saved disk space by not copying the whole pool each time.  This"
" is useful when replicating over a slow network or one charging per "
"transferred byte."
msgstr ""
"增量流复制了变化的数据，而不是整个_replica1_。仅发送差异所需的传输时间更短，并且通过不每次复制整个池来节省磁盘空间。这在通过慢速网络或按传输字节计费的网络上进行复制时非常有用。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2251
#, fuzzy
msgid ""
"A new file system, _backup/mypool_, is available with the files and data "
"from the pool _mypool_.  Specifying `-p` copies the dataset properties "
"including compression settings, quotas, and mount points.  Specifying `-R` "
"copies all child datasets of the dataset along with their properties.  "
"Automate sending and receiving to create regular backups on the second pool."
msgstr ""
"一个新的文件系统，_backup/mypool_，可用于存储来自池_mypool_的文件和数据。使用 `-p` "
"参数可以复制数据集的属性，包括压缩设置、配额和挂载点。使用 `-R` "
"参数可以复制数据集的所有子数据集以及它们的属性。自动化发送和接收操作可以在第二个池中创建定期备份。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:2253
#, fuzzy, no-wrap
msgid "Sending Encrypted Backups over SSH"
msgstr ""
"通过 SSH 发送加密备份\n"
"\n"
"在计算机领域，备份是一项重要的任务，以确保数据的安全性和可恢复性。然而，由于备份文件可能包含敏感信息，因此在传输过程中需要采取额外的安全措施。\n"
"\n"
" SSH （ Secure Shell ）是一种加密的网络协议，常用于远程登录和文件传输。通过使用 SSH ，可以确保备份文件在传输过程中的机密性和完整性。\n"
"\n"
"为了发送加密备份，首先需要在目标服务器上设置 SSH 服务。然后，使用备份软件将文件打包并加密。接下来，通过 SSH 连接到目标服务器，并将加密的备份文件传输到目标服务器上的指定位置。\n"
"\n"
"在传输过程中， SSH 会自动加密数据，并使用公钥加密技术进行身份验证。这样，即使在传输过程中被截获，攻击者也无法解密备份文件。\n"
"\n"
"通过使用 SSH 发送加密备份，可以确保备份文件的安全性，防止敏感信息被未经授权的人访问。这是一种可靠且常用的方法，用于保护数据的完整性和保密性。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2261
#, fuzzy
msgid ""
"Sending streams over the network is a good way to keep a remote backup, but "
"it does come with a drawback.  Data sent over the network link is not "
"encrypted, allowing anyone to intercept and transform the streams back into "
"data without the knowledge of the sending user.  This is undesirable when "
"sending the streams over the internet to a remote host.  Use SSH to securely"
" encrypt data sent over a network connection.  Since ZFS requires "
"redirecting the stream from standard output, piping it through SSH is easy."
"  To keep the contents of the file system encrypted in transit and on the "
"remote system, consider using https://wiki.freebsd.org/PEFS[PEFS]."
msgstr ""
"通过网络发送流是保持远程备份的好方法，但它也有一个缺点。通过网络链路发送的数据没有加密，允许任何人在不知情的情况下拦截和转换流为数据。当将流发送到远程主机时，这是不可取的。使用"
" SSH 来安全地加密通过网络连接发送的数据。由于 ZFS 需要将流重定向到标准输出，所以通过 SSH "
"进行管道传输很容易。为了在传输和远程系统上保持文件系统的内容加密，考虑使用 PEFS （ https://wiki.freebsd.org/PEFS "
"）。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2264
#, fuzzy
msgid ""
"Change some settings and take security precautions first.  This describes "
"the necessary steps required for the `zfs send` operation; for more "
"information on SSH, see crossref:security[openssh,\"OpenSSH\"]."
msgstr ""
"首先，更改一些设置并采取安全预防措施。这描述了执行 `zfs send` 操作所需的必要步骤；有关 SSH 的更多信息，请参见 "
"crossref:security[openssh ,\"OpenSSH\"] 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2266
#, fuzzy
msgid "Change the configuration as follows:"
msgstr "将配置更改如下："

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2268
#, fuzzy
msgid ""
"Passwordless SSH access between sending and receiving host using SSH keys"
msgstr "使用 SSH 密钥在发送和接收主机之间实现无密码 SSH 访问"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2269
#, fuzzy
msgid ""
"ZFS requires the privileges of the `root` user to send and receive streams. "
"This requires logging in to the receiving system as `root`."
msgstr "ZFS 需要 `root` 用户的权限来发送和接收流。这需要以 `root` 用户身份登录到接收系统。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2270
#, fuzzy
msgid "Security reasons prevent `root` from logging in by default."
msgstr "出于安全原因，默认情况下禁止 `root` 用户登录。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2272
#, fuzzy
msgid ""
"Use the <<zfs-zfs-allow,ZFS Delegation>> system to allow a non-`root` user "
"on each system to perform the respective send and receive operations.  On "
"the sending system:"
msgstr ""
"使用 <<zfs-zfs-allow , ZFS 委派 >> 系统，允许每个系统上的非 `root` 用户执行相应的发送和接收操作。在发送系统上："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2276
#, no-wrap
msgid "# zfs allow -u someuser send,snapshot mypool\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2279
#, fuzzy
msgid ""
"To mount the pool, the unprivileged user must own the directory, and regular"
" users need permission to mount file systems."
msgstr "要挂载池，非特权用户必须拥有该目录的所有权，并且普通用户需要有挂载文件系统的权限。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2281
#, fuzzy
msgid "On the receiving system:"
msgstr "在接收系统上："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2290
#, no-wrap
msgid ""
"# sysctl vfs.usermount=1\n"
"vfs.usermount: 0 -> 1\n"
"# echo vfs.usermount=1 >> /etc/sysctl.conf\n"
"# zfs create recvpool/backup\n"
"# zfs allow -u someuser create,mount,receive recvpool/backup\n"
"# chown someuser /recvpool/backup\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2293
#, fuzzy
msgid ""
"The unprivileged user can receive and mount datasets now, and replicates the"
" _home_ dataset to the remote system:"
msgstr "非特权用户现在可以接收和挂载数据集，并将_home_数据集复制到远程系统："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2298
#, no-wrap
msgid ""
"% zfs snapshot -r mypool/home@monday\n"
"% zfs send -R mypool/home@monday | ssh someuser@backuphost zfs recv -dvu recvpool/backup\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2308
#, fuzzy
msgid ""
"Create a recursive snapshot called _monday_ of the file system dataset "
"_home_ on the pool _mypool_.  Then `zfs send -R` includes the dataset, all "
"child datasets, snapshots, clones, and settings in the stream.  Pipe the "
"output through SSH to the waiting `zfs receive` on the remote host "
"_backuphost_.  Using an IP address or fully qualified domain name is good "
"practice.  The receiving machine writes the data to the _backup_ dataset on "
"the _recvpool_ pool.  Adding `-d` to `zfs recv` overwrites the name of the "
"pool on the receiving side with the name of the snapshot.  `-u` causes the "
"file systems to not mount on the receiving side.  Using `-v` shows more "
"details about the transfer, including the elapsed time and the amount of "
"data transferred."
msgstr ""
"在池_mypool_上创建一个名为_monday_的文件系统数据集_home_的递归快照。然后， `zfs send -R` "
"命令将数据集、所有子数据集、快照、克隆和设置包含在流中。通过 SSH 将输出导向等待的远程主机_backuphost_上的 `zfs receive` "
"命令。使用 IP 地址或完全限定域名是良好的实践。接收机将数据写入_recvpool_池上的_backup_数据集。在 `zfs recv` 命令中添加"
" `-d` 选项会使用快照的名称覆盖接收端池的名称。 `-u` 选项会导致接收端上的文件系统不挂载。使用 `-v` "
"选项可以显示有关传输的更多详细信息，包括经过的时间和传输的数据量。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2310
#, fuzzy, no-wrap
msgid "Dataset, User, and Group Quotas"
msgstr "数据集、用户和组配额"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2315
#, fuzzy
msgid ""
"Use <<zfs-term-quota,Dataset quotas>> to restrict the amount of space "
"consumed by a particular dataset.  <<zfs-term-refquota,Reference Quotas>> "
"work in much the same way, but count the space used by the dataset itself, "
"excluding snapshots and child datasets.  Similarly, use <<zfs-term-"
"userquota,user>> and <<zfs-term-groupquota,group>> quotas to prevent users "
"or groups from using up all the space in the pool or dataset."
msgstr ""
"使用 <<zfs-term-quota ，数据集配额 >> 来限制特定数据集消耗的空间量。 <<zfs-term-refquota ，引用配额 >> "
"的工作方式类似，但是计算的是数据集本身使用的空间，不包括快照和子数据集。同样地，使用 <<zfs-term-userquota ，用户配额 >> 和 "
"<<zfs-term-groupquota ，组配额 >> 来防止用户或组使用完池或数据集中的所有空间。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2320
#, fuzzy
msgid ""
"The following examples assume that the users already exist in the system.  "
"Before adding a user to the system, make sure to create their home dataset "
"first and set the `mountpoint` to `/home/_bob_`.  Then, create the user and "
"make the home directory point to the dataset's `mountpoint` location.  This "
"will properly set owner and group permissions without shadowing any pre-"
"existing home directory paths that might exist."
msgstr ""
"以下示例假设用户已经存在于系统中。在将用户添加到系统之前，请确保首先创建他们的主目录数据集，并将 `mountpoint` 设置为 "
"`/home/_bob_` 。然后，创建用户并将主目录指向数据集的 `mountpoint` "
"位置。这将正确设置所有者和组权限，而不会遮盖可能存在的任何预先存在的主目录路径。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2322
#, fuzzy
msgid "To enforce a dataset quota of 10 GB for [.filename]#storage/home/bob#:"
msgstr "为了对 [.filename]#storage/home/bob# 强制执行一个 10 GB 的数据集配额："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2326
#, no-wrap
msgid "# zfs set quota=10G storage/home/bob\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2329
#, fuzzy
msgid ""
"To enforce a reference quota of 10 GB for [.filename]#storage/home/bob#:"
msgstr "为了强制限制 [.filename]#storage/home/bob# 的引用配额为 10 GB ："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2333
#, no-wrap
msgid "# zfs set refquota=10G storage/home/bob\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2336
#, fuzzy
msgid "To remove a quota of 10 GB for [.filename]#storage/home/bob#:"
msgstr "要移除 [.filename]#storage/home/bob# 的 10 GB 配额："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2340
#, no-wrap
msgid "# zfs set quota=none storage/home/bob\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2343
#, fuzzy
msgid ""
"The general format is `userquota@_user_=_size_`, and the user's name must be"
" in one of these formats:"
msgstr "通用格式为 `userquota @_user_=_size_` ，用户的名称必须符合以下格式之一："

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2345
#, fuzzy
msgid "POSIX compatible name such as _joe_."
msgstr "POSIX 兼容的名称，例如_joe_。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2346
#, fuzzy
msgid "POSIX numeric ID such as _789_."
msgstr "POSIX 数值 ID ，例如_789_。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2347
#, fuzzy
msgid "SID name such as _joe.bloggs@example.com_."
msgstr "SID 名称，例如_joe.bloggs @ example.com_。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2348
#, fuzzy
msgid "SID numeric ID such as _S-1-123-456-789_."
msgstr "SID 是一个数字 ID ，例如_S-1-123-456-789_。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2350
#, fuzzy
msgid ""
"For example, to enforce a user quota of 50 GB for the user named _joe_:"
msgstr "例如，要为名为_joe_的用户强制执行 50 GB 的用户配额："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2354
#, no-wrap
msgid "# zfs set userquota@joe=50G\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2357
#, fuzzy
msgid "To remove any quota:"
msgstr "要移除任何配额："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2361
#, no-wrap
msgid "# zfs set userquota@joe=none\n"
msgstr ""

#. type: delimited block = 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2368
#, fuzzy
msgid ""
"User quota properties are not displayed by `zfs get all`.  Non-`root` users "
"can't see other's quotas unless granted the `userquota` privilege.  Users "
"with this privilege are able to view and set everyone's quota."
msgstr ""
"`zfs get all` 命令不会显示用户配额属性。非 `root` 用户除非被授予 `userquota` "
"权限，否则无法查看其他用户的配额。拥有此权限的用户可以查看和设置所有人的配额。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2371
#, fuzzy
msgid ""
"The general format for setting a group quota is: "
"`groupquota@_group_=_size_`."
msgstr "设置群组配额的一般格式为： `groupquota @_group_=_size_` 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2373
#, fuzzy
msgid "To set the quota for the group _firstgroup_ to 50 GB, use:"
msgstr "要将组_firstgroup_的配额设置为 50 GB ，请使用以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2377
#, no-wrap
msgid "# zfs set groupquota@firstgroup=50G\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2380
#, fuzzy
msgid ""
"To remove the quota for the group _firstgroup_, or to make sure that one is "
"not set, instead use:"
msgstr "要删除组_firstgroup_的配额，或确保未设置配额，请使用以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2384
#, no-wrap
msgid "# zfs set groupquota@firstgroup=none\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2388
#, fuzzy
msgid ""
"As with the user quota property, non-`root` users can see the quotas "
"associated with the groups to which they belong.  A user with the "
"`groupquota` privilege or `root` can view and set all quotas for all groups."
msgstr ""
"与用户配额属性一样，非 `root` 用户可以查看与他们所属的组相关联的配额。具有 `groupquota` 特权或 `root` "
"权限的用户可以查看和设置所有组的所有配额。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2392
#, fuzzy
msgid ""
"To display the amount of space used by each user on a file system or "
"snapshot along with any quotas, use `zfs userspace`.  For group information,"
" use `zfs groupspace`.  For more information about supported options or how "
"to display specific options alone, refer to man:zfs[1]."
msgstr ""
"要显示文件系统或快照中每个用户使用的空间量以及任何配额，请使用 `zfs userspace` 。要获取组信息，请使用 `zfs groupspace`"
" 。有关支持的选项或如何仅显示特定选项的更多信息，请参阅 man:zfs[1] 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2394
#, fuzzy
msgid ""
"Privileged users and `root` can list the quota for "
"[.filename]#storage/home/bob# using:"
msgstr "特权用户和 `root` 用户可以使用以下命令列出 `storage/home/bob` 目录的配额："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2398
#, no-wrap
msgid "# zfs get quota storage/home/bob\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2401
#, fuzzy, no-wrap
msgid "Reservations"
msgstr "预订"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2406
#, fuzzy
msgid ""
"<<zfs-term-reservation,Reservations>> guarantee an always-available amount "
"of space on a dataset.  The reserved space will not be available to any "
"other dataset.  This useful feature ensures that free space is available for"
" an important dataset or log files."
msgstr ""
"<<zfs-term-reservation ,预留空间 >> "
"保证了数据集上始终可用的一定量空间。预留的空间将不会对其他数据集可用。这个有用的功能确保了重要数据集或日志文件的可用的空闲空间。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2408
#, fuzzy
msgid ""
"The general format of the `reservation` property is `reservation=_size_`, so"
" to set a reservation of 10 GB on [.filename]#storage/home/bob#, use:"
msgstr ""
"`reservation` 属性的一般格式是 `reservation =_size_` ，因此要在 "
"[.filename]#storage/home/bob# 上设置 10 GB 的预留空间，可以使用以下命令："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2412
#, no-wrap
msgid "# zfs set reservation=10G storage/home/bob\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2415
#, fuzzy
msgid "To clear any reservation:"
msgstr "取消任何预订："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2419
#, no-wrap
msgid "# zfs set reservation=none storage/home/bob\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2422
#, fuzzy
msgid ""
"The same principle applies to the `refreservation` property for setting a "
"<<zfs-term-refreservation,Reference Reservation>>, with the general format "
"`refreservation=_size_`."
msgstr ""
"同样的原则适用于设置 `refreservation` 属性以设置 <<zfs-term-refreservation ,参考保留 >> ，其一般格式为"
" `refreservation =_size_` 。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2424
#, fuzzy
msgid ""
"This command shows any reservations or refreservations that exist on "
"[.filename]#storage/home/bob#:"
msgstr "该命令显示位于 [.filename]#storage/home/bob# 目录下的任何预留或重新预留。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2429
#, no-wrap
msgid ""
"# zfs get reservation storage/home/bob\n"
"# zfs get refreservation storage/home/bob\n"
msgstr ""

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2432
#, fuzzy, no-wrap
msgid "Compression"
msgstr "压缩"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2438
#, fuzzy
msgid ""
"ZFS provides transparent compression.  Compressing data written at the block"
" level saves space and also increases disk throughput.  If data compresses "
"by 25% the compressed data writes to the disk at the same rate as the "
"uncompressed version, resulting in an effective write speed of 125%.  "
"Compression can also be a great alternative to <<zfs-zfs-"
"deduplication,Deduplication>> because it does not require extra memory."
msgstr ""
"ZFS 提供透明压缩功能。在块级别压缩数据可以节省空间，同时提高磁盘吞吐量。如果数据压缩率为 25% "
"，压缩后的数据写入磁盘的速度与未压缩版本相同，从而实现了 125% 的有效写入速度。压缩也可以作为 <<zfs-zfs-deduplication "
",去重 >> 的一个很好的替代方案，因为它不需要额外的内存。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2444
#, fuzzy
msgid ""
"ZFS offers different compression algorithms, each with different trade-offs."
"  The introduction of LZ4 compression in ZFS v5000 enables compressing the "
"entire pool without the large performance trade-off of other algorithms.  "
"The biggest advantage to LZ4 is the _early abort_ feature.  If LZ4 does not "
"achieve at least 12.5% compression in the header part of the data, ZFS "
"writes the block uncompressed to avoid wasting CPU cycles trying to compress"
" data that is either already compressed or uncompressible.  For details "
"about the different compression algorithms available in ZFS, see the <<zfs-"
"term-compression,Compression>> entry in the terminology section."
msgstr ""
"ZFS 提供了不同的压缩算法，每种算法都有不同的权衡。在 ZFS v5000 中引入的 LZ4 压缩算法可以在不牺牲性能的情况下对整个池进行压缩。 "
"LZ4 的最大优势是“提前中止”功能。如果 LZ4 在数据的头部部分无法达到至少 12.5% 的压缩率， ZFS 会以未压缩的方式写入该块，以避免浪费 "
"CPU 周期尝试压缩已经压缩或无法压缩的数据。有关 ZFS 中可用的不同压缩算法的详细信息，请参阅术语部分中的“压缩”条目。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2446
#, fuzzy
msgid ""
"The administrator can see the effectiveness of compression using dataset "
"properties."
msgstr "管理员可以通过数据集属性查看压缩的有效性。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2455
#, no-wrap
msgid ""
"# zfs get used,compressratio,compression,logicalused mypool/compressed_dataset\n"
"NAME        PROPERTY          VALUE     SOURCE\n"
"mypool/compressed_dataset  used              449G      -\n"
"mypool/compressed_dataset  compressratio     1.11x     -\n"
"mypool/compressed_dataset  compression       lz4       local\n"
"mypool/compressed_dataset  logicalused       496G      -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2460
#, fuzzy
msgid ""
"The dataset is using 449 GB of space (the used property).  Without "
"compression, it would have taken 496 GB of space (the `logicalused` "
"property).  This results in a 1.11:1 compression ratio."
msgstr ""
"该数据集使用了 449 GB 的空间（使用的属性）。如果不进行压缩，它将占用 496 GB 的空间（逻辑使用的属性）。这导致了 1.11:1 "
"的压缩比率。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2466
#, fuzzy
msgid ""
"Compression can have an unexpected side effect when combined with <<zfs-"
"term-userquota,User Quotas>>.  User quotas restrict how much actual space a "
"user consumes on a dataset _after compression_.  If a user has a quota of 10"
" GB, and writes 10 GB of compressible data, they will still be able to store"
" more data.  If they later update a file, say a database, with more or less "
"compressible data, the amount of space available to them will change.  This "
"can result in the odd situation where a user did not increase the actual "
"amount of data (the `logicalused` property), but the change in compression "
"caused them to reach their quota limit."
msgstr ""
"当与 <<zfs-term-userquota ,用户配额 >> "
"结合使用时，压缩可能会产生意想不到的副作用。用户配额限制了用户在数据集上实际消耗的空间（在压缩之后）。如果一个用户的配额是 10GB ，并写入了 "
"10GB "
"的可压缩数据，他们仍然可以存储更多的数据。如果他们稍后更新一个文件，比如一个数据库，其中包含更多或更少可压缩的数据，可用空间的数量将会改变。这可能导致一个奇怪的情况，即用户没有增加实际数据量（"
" `logicalused` 属性），但压缩的变化导致他们达到了配额限制。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2470
#, fuzzy
msgid ""
"Compression can have a similar unexpected interaction with backups.  Quotas "
"are often used to limit data storage to ensure there is enough backup space "
"available.  Since quotas do not consider compression ZFS may write more data"
" than would fit with uncompressed backups."
msgstr ""
"压缩可能会与备份产生类似的意外交互作用。配额通常用于限制数据存储，以确保有足够的备份空间可用。由于配额不考虑压缩，因此 ZFS "
"可能会写入比未压缩备份所能容纳的更多数据。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2472
#, fuzzy, no-wrap
msgid "Zstandard Compression"
msgstr "Zstandard 压缩"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2476
#, fuzzy
msgid ""
"OpenZFS 2.0 added a new compression algorithm.  Zstandard (Zstd) offers "
"higher compression ratios than the default LZ4 while offering much greater "
"speeds than the alternative, gzip. OpenZFS 2.0 is available starting with "
"FreeBSD 12.1-RELEASE via package:sysutils/openzfs[] and has been the default"
" in since FreeBSD 13.0-RELEASE."
msgstr ""
"OpenZFS 2.0 增加了一种新的压缩算法。 Zstandard （ Zstd ）提供比默认的 LZ4 更高的压缩比，同时比替代方案 gzip "
"速度更快。 OpenZFS 2.0 可以通过 FreeBSD 12.1-RELEASE 的 package:sysutils/openzfs[] "
"包获得，并且自 FreeBSD 13.0-RELEASE 以来已成为默认选项。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2480
#, fuzzy
msgid ""
"Zstd provides a large selection of compression levels, providing fine-"
"grained control over performance versus compression ratio.  One of the main "
"advantages of Zstd is that the decompression speed is independent of the "
"compression level.  For data written once but read often, Zstd allows the "
"use of the highest compression levels without a read performance penalty."
msgstr ""
"Zstd 提供了多种压缩级别，可以对性能和压缩比进行细粒度控制。 Zstd 的一个主要优势是解压速度与压缩级别无关。对于只写入一次但经常读取的数据， "
"Zstd 允许使用最高的压缩级别而不会影响读取性能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2485
#, fuzzy
msgid ""
"Even with frequent data updates, enabling compression often provides higher "
"performance.  One of the biggest advantages comes from the compressed ARC "
"feature.  ZFS's Adaptive Replacement Cache (ARC) caches the compressed "
"version of the data in RAM, decompressing it each time.  This allows the "
"same amount of RAM to store more data and metadata, increasing the cache hit"
" ratio."
msgstr ""
"即使进行频繁的数据更新，启用压缩通常也能提供更高的性能。其中最大的优势之一来自于压缩的 ARC 功能。 ZFS 的自适应替换缓存（ ARC "
"）将数据的压缩版本缓存在 RAM 中，每次需要时进行解压缩。这使得相同数量的 RAM 能够存储更多的数据和元数据，从而增加了缓存命中率。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2491
#, fuzzy
msgid ""
"ZFS offers 19 levels of Zstd compression, each offering incrementally more "
"space savings in exchange for slower compression.  The default level is "
"`zstd-3` and offers greater compression than LZ4 without being much slower."
"  Levels above 10 require large amounts of memory to compress each block and"
" systems with less than 16 GB of RAM should not use them.  ZFS uses a "
"selection of the Zstd_fast_ levels also, which get correspondingly faster "
"but supports lower compression ratios.  ZFS supports `zstd-fast-1` through "
"`zstd-fast-10`, `zstd-fast-20` through `zstd-fast-100` in increments of 10, "
"and `zstd-fast-500` and `zstd-fast-1000` which provide minimal compression, "
"but offer high performance."
msgstr ""
"ZFS 提供 19 个级别的 Zstd 压缩，每个级别都可以在更慢的压缩速度下提供更多的空间节省。默认级别是 `zstd-3` ，比 LZ4 "
"提供更好的压缩效果，但速度不会慢太多。级别超过 10 需要大量的内存来压缩每个块，内存小于 16GB 的系统不应使用这些级别。 ZFS 还使用了一系列的"
" Zstd_fast_级别，它们的压缩速度更快，但支持的压缩比较低。 ZFS 支持 `zstd-fast-1` 到 `zstd-fast-10` "
"，以及以 10 为增量的 `zstd-fast-20` 到 `zstd-fast-100` ，还有 `zstd-fast-500` 和 `zstd-"
"fast-1000` ，它们提供最小的压缩效果，但具有高性能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2495
#, fuzzy
msgid ""
"If ZFS is not able to get the required memory to compress a block with Zstd,"
" it will fall back to storing the block uncompressed.  This is unlikely to "
"happen except at the highest levels of Zstd on memory constrained systems.  "
"ZFS counts how often this has occurred since loading the ZFS module with "
"`kstat.zfs.misc.zstd.compress_alloc_fail`."
msgstr ""
"如果 ZFS 无法获取所需的内存来使用 Zstd 压缩块，它将退回到存储未压缩的块。除非在内存受限的系统上使用 Zstd "
"的最高级别，否则这种情况不太可能发生。 ZFS 通过 `kstat.zfs.misc.zstd.compress_alloc_fail` 统计自加载 "
"ZFS 模块以来发生此情况的次数。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2497
#, fuzzy, no-wrap
msgid "Deduplication"
msgstr "去重"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2503
#, fuzzy
msgid ""
"When enabled, <<zfs-term-deduplication,deduplication>> uses the checksum of "
"each block to detect duplicate blocks.  When a new block is a duplicate of "
"an existing block, ZFS writes a new reference to the existing data instead "
"of the whole duplicate block.  Tremendous space savings are possible if the "
"data contains a lot of duplicated files or repeated information.  Warning: "
"deduplication requires a large amount of memory, and enabling compression "
"instead provides most of the space savings without the extra cost."
msgstr ""
"当启用时， <<zfs-term-deduplication ,去重 >> 使用每个块的校验和来检测重复块。当一个新块是现有块的副本时， ZFS "
"会写入一个对现有数据的新引用，而不是整个重复块。如果数据包含大量重复的文件或重复的信息，则可以实现巨大的空间节省。警告：去重需要大量的内存，并且启用压缩可以在不增加额外成本的情况下提供大部分的空间节省。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2505
#, fuzzy
msgid ""
"To activate deduplication, set the `dedup` property on the target pool:"
msgstr "要激活去重功能，请在目标池上设置 `dedup` 属性："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2509
#, no-wrap
msgid "# zfs set dedup=on pool\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2514
#, fuzzy
msgid ""
"Deduplicating only affects new data written to the pool.  Merely activating "
"this option will not deduplicate data already written to the pool.  A pool "
"with a freshly activated deduplication property will look like this example:"
msgstr "去重只会影响写入池中的新数据。仅仅激活此选项不会对已经写入池中的数据进行去重。一个刚刚激活去重属性的池子将会像这个例子一样："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2520
#, no-wrap
msgid ""
"# zpool list\n"
"NAME  SIZE ALLOC  FREE   CKPOINT  EXPANDSZ   FRAG   CAP   DEDUP   HEALTH   ALTROOT\n"
"pool 2.84G 2.19M 2.83G         -         -     0%    0%   1.00x   ONLINE   -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2525
#, fuzzy
msgid ""
"The `DEDUP` column shows the actual rate of deduplication for the pool.  A "
"value of `1.00x` shows that data has not deduplicated yet.  The next example"
" copies some system binaries three times into different directories on the "
"deduplicated pool created above."
msgstr ""
"`DEDUP` 列显示了池的实际重复消除率。 `1.00x` "
"的值表示数据尚未进行重复消除。下面的示例将一些系统二进制文件复制了三次，分别放入在上述创建的重复消除池中的不同目录中。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2531
#, no-wrap
msgid ""
"# for d in dir1 dir2 dir3; do\n"
"> mkdir $d && cp -R /usr/bin $d &\n"
"> done\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2534
#, fuzzy
msgid "To observe deduplicating of redundant data, use:"
msgstr "要观察冗余数据的去重，请使用："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2540
#, no-wrap
msgid ""
"# zpool list\n"
"NAME SIZE  ALLOC  FREE   CKPOINT  EXPANDSZ   FRAG  CAP   DEDUP   HEALTH   ALTROOT\n"
"pool 2.84G 20.9M 2.82G         -         -     0%   0%   3.00x   ONLINE   -\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2545
#, fuzzy
msgid ""
"The `DEDUP` column shows a factor of `3.00x`.  Detecting and deduplicating "
"copies of the data uses a third of the space.  The potential for space "
"savings can be enormous, but comes at the cost of having enough memory to "
"keep track of the deduplicated blocks."
msgstr ""
"`DEDUP` 列显示了一个 `3.00x` "
"的因子。检测和去重数据的副本使用了三分之一的空间。节省空间的潜力是巨大的，但需要足够的内存来跟踪去重块的成本。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2548
#, fuzzy
msgid ""
"Deduplication is not always beneficial when the data in a pool is not "
"redundant.  ZFS can show potential space savings by simulating deduplication"
" on an existing pool:"
msgstr "当池中的数据不冗余时，去重并不总是有益的。 ZFS 可以通过在现有池上模拟去重来显示潜在的节省空间。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2553
#, no-wrap
msgid ""
"# zdb -S pool\n"
"Simulated DDT histogram:\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2569
#, no-wrap
msgid ""
"bucket              allocated                       referenced\n"
"______   ______________________________   ______________________________\n"
"refcnt   blocks   LSIZE   PSIZE   DSIZE   blocks   LSIZE   PSIZE   DSIZE\n"
"------   ------   -----   -----   -----   ------   -----   -----   -----\n"
"     1    2.58M    289G    264G    264G    2.58M    289G    264G    264G\n"
"     2     206K   12.6G   10.4G   10.4G     430K   26.4G   21.6G   21.6G\n"
"     4    37.6K    692M    276M    276M     170K   3.04G   1.26G   1.26G\n"
"     8    2.18K   45.2M   19.4M   19.4M    20.0K    425M    176M    176M\n"
"    16      174   2.83M   1.20M   1.20M    3.33K   48.4M   20.4M   20.4M\n"
"    32       40   2.17M    222K    222K    1.70K   97.2M   9.91M   9.91M\n"
"    64        9     56K   10.5K   10.5K      865   4.96M    948K    948K\n"
"   128        2   9.50K      2K      2K      419   2.11M    438K    438K\n"
"   256        5   61.5K     12K     12K    1.90K   23.0M   4.47M   4.47M\n"
"    1K        2      1K      1K      1K    2.98K   1.49M   1.49M   1.49M\n"
" Total    2.82M    303G    275G    275G    3.20M    319G    287G    287G\n"
msgstr ""

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2571
#, no-wrap
msgid ""
"dedup = 1.05, compress = 1.11, copies = 1.00, dedup * compress / copies = "
"1.16\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2580
#, fuzzy
msgid ""
"After `zdb -S` finishes analyzing the pool, it shows the space reduction "
"ratio that activating deduplication would achieve.  In this case, `1.16` is "
"a poor space saving ratio mainly provided by compression.  Activating "
"deduplication on this pool would not save any amount of space, and is not "
"worth the amount of memory required to enable deduplication.  Using the "
"formula _ratio = dedup * compress / copies_, system administrators can plan "
"the storage allocation, deciding whether the workload will contain enough "
"duplicate blocks to justify the memory requirements.  If the data is "
"reasonably compressible, the space savings may be good.  Good practice is to"
" enable compression first as compression also provides greatly increased "
"performance.  Enable deduplication in cases where savings are considerable "
"and with enough available memory for the <<zfs-term-deduplication,DDT>>."
msgstr ""
"在 `zdb -S` 完成分析池之后，它会显示激活去重将实现的空间减少比例。在这种情况下， `1.16` "
"是一个主要由压缩提供的较低的节省空间比例。在此池上激活去重将不会节省任何空间，并且不值得为启用去重所需的内存量。使用公式 _ratio = dedup "
"* compress / "
"copies_，系统管理员可以规划存储分配，决定工作负载是否包含足够的重复块来证明内存需求的合理性。如果数据可以合理压缩，空间节省可能会很好。良好的做法是首先启用压缩，因为压缩还可以大大提高性能。在节省可观且有足够可用内存用于"
" <<zfs-term-deduplication , DDT>> 的情况下启用去重。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2582
#, fuzzy, no-wrap
msgid "ZFS and Jails"
msgstr "ZFS 和 Jails"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2588
#, fuzzy
msgid ""
"Use `zfs jail` and the corresponding `jailed` property to delegate a ZFS "
"dataset to a crossref:jails[jails,Jail].  `zfs jail _jailid_` attaches a "
"dataset to the specified jail, and `zfs unjail` detaches it.  To control the"
" dataset from within a jail, set the `jailed` property.  ZFS forbids "
"mounting a jailed dataset on the host because it may have mount points that "
"would compromise the security of the host."
msgstr ""
"使用 `zfs jail` 命令和相应的 `jailed` 属性将一个 ZFS 数据集委派给一个 crossref:jails[jails ,监狱] 。"
" `zfs jail _jailid_` 命令将数据集附加到指定的监狱， `zfs unjail` 命令将其分离。要在监狱内控制数据集，需要设置 "
"`jailed` 属性。由于被监禁的数据集可能具有会危及主机安全的挂载点， ZFS 禁止在主机上挂载被监禁的数据集。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:2590
#, fuzzy, no-wrap
msgid "Delegated Administration"
msgstr "委派管理"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2598
#, fuzzy
msgid ""
"A comprehensive permission delegation system allows unprivileged users to "
"perform ZFS administration functions.  For example, if each user's home "
"directory is a dataset, users need permission to create and destroy "
"snapshots of their home directories.  A user performing backups can get "
"permission to use replication features.  ZFS allows a usage statistics "
"script to run with access to only the space usage data for all users.  "
"Delegating the ability to delegate permissions is also possible.  Permission"
" delegation is possible for each subcommand and most properties."
msgstr ""
"一个全面的权限委派系统允许非特权用户执行 ZFS "
"管理功能。例如，如果每个用户的主目录是一个数据集，用户需要有权限创建和销毁其主目录的快照。执行备份的用户可以获得使用复制功能的权限。 ZFS "
"允许一个使用统计脚本仅以访问所有用户的空间使用数据的方式运行。还可以委派委派权限的能力。权限委派对于每个子命令和大多数属性都是可能的。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2600
#, fuzzy, no-wrap
msgid "Delegating Dataset Creation"
msgstr "委托数据集创建"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2606
#, fuzzy
msgid ""
"`zfs allow _someuser_ create _mydataset_` gives the specified user "
"permission to create child datasets under the selected parent dataset.  A "
"caveat: creating a new dataset involves mounting it.  That requires setting "
"the FreeBSD `vfs.usermount` man:sysctl[8] to `1` to allow non-root users to "
"mount a file system.  Another restriction aimed at preventing abuse: "
"non-`root` users must own the mountpoint where mounting the file system."
msgstr ""
"`zfs allow _someuser_ create _mydataset_` "
"给予指定用户在选定的父数据集下创建子数据集的权限。但需要注意的是，创建新数据集需要挂载它。这要求设置 FreeBSD 的 `vfs.usermount`"
" 系统控制变量为 `1` ，以允许非 root 用户挂载文件系统。另外，为了防止滥用，非 root 用户必须拥有挂载点来进行文件系统的挂载。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2608
#, fuzzy, no-wrap
msgid "Delegating Permission Delegation"
msgstr "委派权限委派"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2612
#, fuzzy
msgid ""
"`zfs allow _someuser_ allow _mydataset_` gives the specified user the "
"ability to assign any permission they have on the target dataset, or its "
"children, to other users.  If a user has the `snapshot` permission and the "
"`allow` permission, that user can then grant the `snapshot` permission to "
"other users."
msgstr ""
"`zfs allow _someuser_ allow _mydataset_` "
"命令会赋予指定用户在目标数据集及其子数据集上分配其拥有的任何权限给其他用户的能力。如果一个用户拥有 `snapshot` 权限和 `allow` "
"权限，那么该用户可以将 `snapshot` 权限授予其他用户。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:2614
#, fuzzy, no-wrap
msgid "Advanced Topics"
msgstr "高级主题"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2617
#, fuzzy, no-wrap
msgid "Tuning"
msgstr "调优"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2620
#, fuzzy
msgid "Adjust tunables to make ZFS perform best for different workloads."
msgstr "调整可调节参数以使 ZFS 在不同的工作负载下表现最佳。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2622
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-arc_max]] `_vfs.zfs.arc.max_` starting with 13.x "
"(`vfs.zfs.arc_max` for 12.x) - Upper size of the <<zfs-term-arc,ARC>>. The "
"default is all RAM but 1 GB, or 5/8 of all RAM, whichever is more. Use a "
"lower value if the system runs any other daemons or processes that may "
"require memory. Adjust this value at runtime with man:sysctl[8] and set it "
"in [.filename]#/boot/loader.conf# or [.filename]#/etc/sysctl.conf#."
msgstr ""
"[[zfs-advanced-tuning-arc_max]] `_vfs.zfs.arc.max_` 从 13.x 开始（ 12.x 为 "
"`vfs.zfs.arc_max` ） - <<zfs-term-arc , ARC>> 的上限大小。默认值为所有 RAM 减去 1 GB ，或所有 "
"RAM 的 5/8 ，以较大者为准。如果系统运行其他可能需要内存的守护程序或进程，请使用较低的值。可以使用 man:sysctl[8] "
"在运行时调整此值，并在 [.filename]#/boot/loader.conf# 或 [.filename]#/etc/sysctl.conf# "
"中设置。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2623
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-arc_meta_limit]] `_vfs.zfs.arc.meta_limit_` starting "
"with 13.x (`vfs.zfs.arc_meta_limit` for 12.x)` - Limit the amount of the "
"<<zfs-term-arc,ARC>> used to store metadata. The default is one fourth of "
"`vfs.zfs.arc.max`. Increasing this value will improve performance if the "
"workload involves operations on a large number of files and directories, or "
"frequent metadata operations, at the cost of less file data fitting in the "
"<<zfs-term-arc,ARC>>. Adjust this value at runtime with man:sysctl[8] in "
"[.filename]#/boot/loader.conf# or [.filename]#/etc/sysctl.conf#."
msgstr ""
"[[zfs-advanced-tuning-arc_meta_limit]] `_vfs.zfs.arc.meta_limit_` 从 13.x "
"版本开始（ 12.x 版本为 `vfs.zfs.arc_meta_limit` ） - 限制用于存储元数据的 <<zfs-term-arc , "
"ARC>> 的数量。默认值为 `vfs.zfs.arc.max` "
"的四分之一。如果工作负载涉及大量文件和目录的操作，或者频繁的元数据操作，增加此值将提高性能，但会减少适应于 <<zfs-term-arc , ARC>>"
" 的文件数据量。可以使用 man:sysctl[8] 在 [.filename]#/boot/loader.conf# 或 "
"[.filename]#/etc/sysctl.conf# 中在运行时调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2624
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-arc_min]] `_vfs.zfs.arc.min_` starting with 13.x "
"(`vfs.zfs.arc_min` for 12.x) - Lower size of the <<zfs-term-arc,ARC>>. The "
"default is one half of `vfs.zfs.arc.meta_limit`. Adjust this value to "
"prevent other applications from pressuring out the entire <<zfs-term-"
"arc,ARC>>. Adjust this value at runtime with man:sysctl[8] and in "
"[.filename]#/boot/loader.conf# or [.filename]#/etc/sysctl.conf#."
msgstr ""
"[[zfs-advanced-tuning-arc_min]] `_vfs.zfs.arc.min_` 从 13.x 开始（ 12.x 为 "
"`vfs.zfs.arc_min` ） - 降低 <<zfs-term-arc , ARC>> 的大小。默认值为 "
"`vfs.zfs.arc.meta_limit` 的一半。调整此值以防止其他应用程序将整个 <<zfs-term-arc , ARC>> "
"压力过大。可以使用 man:sysctl[8] 在运行时调整此值，并在 [.filename]#/boot/loader.conf# 或 "
"[.filename]#/etc/sysctl.conf# 中进行调整。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2625
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-vdev-cache-size]] `_vfs.zfs.vdev.cache.size_` - A "
"preallocated amount of memory reserved as a cache for each device in the "
"pool. The total amount of memory used will be this value multiplied by the "
"number of devices. Set this value at boot time and in "
"[.filename]#/boot/loader.conf#."
msgstr ""
"[[zfs-advanced-tuning-vdev-cache-size]] `_vfs.zfs.vdev.cache.size_` - "
"在池中的每个设备上预留的用作缓存的内存的预分配量。使用的总内存量将是此值乘以设备数量。在引导时和 "
"[.filename]#/boot/loader.conf# 中设置此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2626
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-min-auto-ashift]] `_vfs.zfs.min_auto_ashift_` - Lower "
"`ashift` (sector size) used automatically at pool creation time. The value "
"is a power of two. The default value of `9` represents `2^9 = 512`, a sector"
" size of 512 bytes. To avoid _write amplification_ and get the best "
"performance, set this value to the largest sector size used by a device in "
"the pool."
msgstr ""
"[[zfs-advanced-tuning-min-auto-ashift]] `_vfs.zfs.min_auto_ashift_` - "
"在创建池时自动使用的较低的 `ashift` （扇区大小）。该值是 2 的幂。默认值为 `9` 表示 `2 ^ 9 = 512` ，即 512 "
"字节的扇区大小。为了避免写放大并获得最佳性能，将此值设置为池中设备使用的最大扇区大小。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2632
#, fuzzy
msgid ""
"Common drives have 4 KB sectors.  Using the default `ashift` of `9` with "
"these drives results in write amplification on these devices.  Data "
"contained in a single 4 KB write is instead written in eight 512-byte "
"writes.  ZFS tries to read the native sector size from all devices when "
"creating a pool, but drives with 4 KB sectors report that their sectors are "
"512 bytes for compatibility.  Setting `vfs.zfs.min_auto_ashift` to `12` "
"(`2^12 = 4096`) before creating a pool forces ZFS to use 4 KB blocks for "
"best performance on these drives."
msgstr ""
"普通硬盘的扇区大小为 4 KB 。在这些硬盘上使用默认的 `ashift` 值 `9` 会导致写放大。一个 4 KB 的写入数据实际上会被分成八个 "
"512 字节的写入操作。在创建存储池时， ZFS 会尝试从所有设备中读取原生扇区大小，但是具有 4 KB 扇区的硬盘会报告它们的扇区大小为 512 "
"字节，以保证兼容性。在创建存储池之前，将 `vfs.zfs.min_auto_ashift` 设置为 `12` （ `2 ^ 12 = 4096` "
"）可以强制 ZFS 在这些硬盘上使用 4 KB 块以获得最佳性能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2635
#, fuzzy
msgid ""
"Forcing 4 KB blocks is also useful on pools with planned disk upgrades.  "
"Future disks use 4 KB sectors, and `ashift` values cannot change after "
"creating a pool."
msgstr ""
"对于计划进行磁盘升级的存储池来说，强制使用 4 KB 块也是有用的。未来的磁盘使用 4 KB 扇区，并且在创建存储池后无法更改 `ashift` 值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2639
#, fuzzy
msgid ""
"In some specific cases, the smaller 512-byte block size might be preferable."
"  When used with 512-byte disks for databases or as storage for virtual "
"machines, less data transfers during small random reads.  This can provide "
"better performance when using a smaller ZFS record size."
msgstr ""
"在某些特定情况下，较小的 512 字节块大小可能更可取。当与用于数据库或作为虚拟机存储的 512 "
"字节磁盘一起使用时，小规模随机读取时的数据传输量较少。这可以在使用较小的 ZFS 记录大小时提供更好的性能。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2640
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-prefetch_disable]] `_vfs.zfs.prefetch_disable_` - "
"Disable prefetch. A value of `0` enables and `1` disables it. The default is"
" `0`, unless the system has less than 4 GB of RAM. Prefetch works by reading"
" larger blocks than requested into the <<zfs-term-arc,ARC>> in hopes to soon"
" need the data. If the workload has a large number of random reads, "
"disabling prefetch may actually improve performance by reducing unnecessary "
"reads. Adjust this value at any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-prefetch_disable]] `_vfs.zfs.prefetch_disable_` - "
"禁用预读取。值为 `0` 表示启用，值为 `1` 表示禁用。默认值为 `0` ，除非系统内存小于 4 GB 。预读取通过读取比请求的块更大的块到 "
"<<zfs-term-arc , ARC>> "
"中，希望很快需要这些数据。如果工作负载有大量的随机读取，禁用预读取可能会通过减少不必要的读取来提高性能。可以随时使用 man:sysctl[8] "
"调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2641
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-vdev-trim_on_init]] `_vfs.zfs.vdev.trim_on_init_` - "
"Control whether new devices added to the pool have the `TRIM` command run on"
" them. This ensures the best performance and longevity for SSDs, but takes "
"extra time. If the device has already been secure erased, disabling this "
"setting will make the addition of the new device faster. Adjust this value "
"at any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-vdev-trim_on_init]] `_vfs.zfs.vdev.trim_on_init_` - "
"控制是否在将新设备添加到池中时对其运行 `TRIM` 命令。这可以确保 SSD "
"的最佳性能和寿命，但会花费额外的时间。如果设备已经进行了安全擦除，则禁用此设置将使新设备的添加更快。随时可以使用 man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2642
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-vdev-max_pending]] `_vfs.zfs.vdev.max_pending_` - "
"Limit the number of pending I/O requests per device. A higher value will "
"keep the device command queue full and may give higher throughput. A lower "
"value will reduce latency. Adjust this value at any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-vdev-max_pending]] `_vfs.zfs.vdev.max_pending_` - "
"限制每个设备的待处理 I/O 请求的数量。较高的值将保持设备命令队列满，并可能提供更高的吞吐量。较低的值将减少延迟。您可以随时使用 "
"man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2643
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-top_maxinflight]] `_vfs.zfs.top_maxinflight_` - Upper "
"number of outstanding I/Os per top-level <<zfs-term-vdev,vdev>>. Limits the "
"depth of the command queue to prevent high latency. The limit is per top-"
"level vdev, meaning the limit applies to each <<zfs-term-vdev-"
"mirror,mirror>>, <<zfs-term-vdev-raidz,RAID-Z>>, or other vdev "
"independently. Adjust this value at any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-top_maxinflight]] `_vfs.zfs.top_maxinflight_` - 每个顶级 "
"<<zfs-term-vdev , vdev>> 的未完成 I/O 的上限。限制命令队列的深度以防止高延迟。该限制是针对每个顶级 vdev "
"的，意味着该限制独立应用于每个 <<zfs-term-vdev-mirror , mirror>> 、 <<zfs-term-vdev-raidz , "
"RAID-Z>> 或其他 vdev 。可以随时使用 man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2644
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-l2arc_write_max]] `_vfs.zfs.l2arc_write_max_` - Limit "
"the amount of data written to the <<zfs-term-l2arc,L2ARC>> per second. This "
"tunable extends the longevity of SSDs by limiting the amount of data written"
" to the device. Adjust this value at any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-l2arc_write_max]] `_vfs.zfs.l2arc_write_max_` - 限制每秒写入"
" <<zfs-term-l2arc , L2ARC>> 的数据量。通过限制写入设备的数据量，此可调整参数可以延长固态硬盘（ SSD "
"）的使用寿命。您可以随时使用 man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2645
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-l2arc_write_boost]] `_vfs.zfs.l2arc_write_boost_` - "
"Adds the value of this tunable to <<zfs-advanced-"
"tuning-l2arc_write_max,`vfs.zfs.l2arc_write_max`>> and increases the write "
"speed to the SSD until evicting the first block from the <<zfs-"
"term-l2arc,L2ARC>>. This \"Turbo Warmup Phase\" reduces the performance loss"
" from an empty <<zfs-term-l2arc,L2ARC>> after a reboot. Adjust this value at"
" any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-l2arc_write_boost]] `_vfs.zfs.l2arc_write_boost_` - "
"将此可调整值添加到 <<zfs-advanced-tuning-l2arc_write_max , "
"`vfs.zfs.l2arc_write_max`>> 中，并增加对 SSD 的写入速度，直到从 <<zfs-term-l2arc , L2ARC>> "
"中驱逐第一个块。这个\"Turbo Warmup Phase\"可以减少重启后空的 <<zfs-term-l2arc , L2ARC>> "
"带来的性能损失。随时可以使用 man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2646
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-scrub_delay]]`_vfs.zfs.scrub_delay_` - Number of ticks"
" to delay between each I/O during a <<zfs-term-scrub,`scrub`>>. To ensure "
"that a `scrub` does not interfere with the normal operation of the pool, if "
"any other I/O is happening the `scrub` will delay between each command. This"
" value controls the limit on the total IOPS (I/Os Per Second) generated by "
"the `scrub`. The granularity of the setting is determined by the value of "
"`kern.hz` which defaults to 1000 ticks per second. Changing this setting "
"results in a different effective IOPS limit.  The default value is `4`, "
"resulting in a limit of: 1000 ticks/sec / 4 = 250 IOPS. Using a value of "
"_20_ would give a limit of: 1000 ticks/sec / 20 = 50 IOPS. Recent activity "
"on the pool limits the speed of `scrub`, as determined by <<zfs-advanced-"
"tuning-scan_idle,`vfs.zfs.scan_idle`>>. Adjust this value at any time with "
"man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-scrub_delay]]`_vfs.zfs.scrub_delay_` - 在进行 <<zfs-term-"
"scrub , `scrub`>> 时，每个 I/O 之间的延迟时间。为了确保 `scrub` 不会干扰池的正常操作，如果有其他 I/O 正在进行， "
"`scrub` 会在每个命令之间进行延迟。该值控制了 `scrub` 生成的总 IOPS （每秒 I/O 数）的限制。设置的粒度由 `kern.hz` "
"的值确定，默认为每秒 1000 个滴答。更改此设置会导致不同的有效 IOPS 限制。默认值为 `4` ，因此限制为： 1000 个滴答 / 秒 ÷ 4 "
"= 250 IOPS 。使用值为_20_将得到限制： 1000 个滴答 / 秒 ÷ 20 = 50 IOPS 。池上的最近活动限制了 `scrub` "
"的速度，由 <<zfs-advanced-tuning-scan_idle , `vfs.zfs.scan_idle`>> 确定。随时可以使用 "
"man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2647
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-resilver_delay]] `_vfs.zfs.resilver_delay_` - Number "
"of milliseconds of delay inserted between each I/O during a <<zfs-term-"
"resilver,resilver>>. To ensure that a resilver does not interfere with the "
"normal operation of the pool, if any other I/O is happening the resilver "
"will delay between each command. This value controls the limit of total IOPS"
" (I/Os Per Second) generated by the resilver. ZFS determins the granularity "
"of the setting by the value of `kern.hz` which defaults to 1000 ticks per "
"second. Changing this setting results in a different effective IOPS limit. "
"The default value is 2, resulting in a limit of: 1000 ticks/sec / 2 = 500 "
"IOPS. Returning the pool to an <<zfs-term-online,Online>> state may be more "
"important if another device failing could <<zfs-term-faulted,Fault>> the "
"pool, causing data loss. A value of 0 will give the resilver operation the "
"same priority as other operations, speeding the healing process. Other "
"recent activity on the pool limits the speed of resilver, as determined by "
"<<zfs-advanced-tuning-scan_idle,`vfs.zfs.scan_idle`>>. Adjust this value at "
"any time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-resilver_delay]] `_vfs.zfs.resilver_delay_` - 在 <<zfs-"
"term-resilver , resilver>> 过程中，每个 I/O 之间插入的延迟时间，以毫秒为单位。为了确保 resilver "
"不会干扰池的正常操作，如果有其他 I/O 正在进行， resilver 将在每个命令之间延迟。该值控制由 resilver 生成的总 IOPS （每秒 "
"I/O 数）的限制。 ZFS 通过 `kern.hz` 的值确定设置的粒度，默认为每秒 1000 个滴答。更改此设置会导致不同的有效 IOPS "
"限制。默认值为 2 ，结果为： 1000 个滴答 / 秒 ÷ 2 = 500 IOPS "
"。如果另一个设备故障可能导致池发生故障，从而导致数据丢失，则将池恢复到 <<zfs-term-online , Online>> 状态可能更为重要。值为"
" 0 将使 resilver 操作与其他操作具有相同的优先级，加快修复过程。池上的其他最近活动会限制 resilver 的速度，由 <<zfs-"
"advanced-tuning-scan_idle , `vfs.zfs.scan_idle`>> 确定。随时可以使用 man:sysctl[8] "
"调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2648
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-scan_idle]] `_vfs.zfs.scan_idle_` - Number of "
"milliseconds since the last operation before considering the pool is idle. "
"ZFS disables the rate limiting for <<zfs-term-scrub,`scrub`>> and <<zfs-"
"term-resilver,resilver>> when the pool is idle. Adjust this value at any "
"time with man:sysctl[8]."
msgstr ""
"[[zfs-advanced-tuning-scan_idle]] `_vfs.zfs.scan_idle_` - "
"距离上次操作的毫秒数，用于判断池是否处于空闲状态。当池处于空闲状态时， ZFS 会禁用对 <<zfs-term-scrub , `scrub`>> 和 "
"<<zfs-term-resilver , resilver>> 的速率限制。您可以随时使用 man:sysctl[8] 调整此值。"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2649
#, fuzzy
msgid ""
"[[zfs-advanced-tuning-txg-timeout]] `_vfs.zfs.txg.timeout_` - Upper number "
"of seconds between <<zfs-term-txg,transaction group>>s. The current "
"transaction group writes to the pool and a fresh transaction group starts if"
" this amount of time elapsed since the previous transaction group. A "
"transaction group may trigger earlier if writing enough data. The default "
"value is 5 seconds. A larger value may improve read performance by delaying "
"asynchronous writes, but this may cause uneven performance when writing the "
"transaction group. Adjust this value at any time with man:sysctl[8]."
msgstr ""
"`_vfs.zfs.txg.timeout_` - 两个 <<zfs-term-txg ,事务组 >> "
"之间的最长时间间隔，以秒为单位。当前事务组将数据写入池中，并且如果自上一个事务组以来经过了这么长时间，则会启动一个新的事务组。如果写入的数据足够多，事务组可能会提前触发。默认值为"
" 5 秒。增大该值可能会通过延迟异步写入来提高读取性能，但这可能会导致写入事务组时性能不均衡。可以随时使用 man:sysctl[8] 调整此值。"

#. type: Title ===
#: documentation/content/en/books/handbook/zfs/_index.adoc:2651
#, fuzzy, no-wrap
msgid "ZFS on i386"
msgstr "i386 上的 ZFS"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2654
#, fuzzy
msgid ""
"Some of the features provided by ZFS are memory intensive, and may require "
"tuning for upper efficiency on systems with limited RAM."
msgstr "ZFS 提供的一些功能对内存要求较高，可能需要在内存有限的系统上进行调整以达到最佳效率。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:2655
#, fuzzy, no-wrap
msgid "Memory"
msgstr "内存"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2663
#, fuzzy
msgid ""
"As a lower value, the total system memory should be at least one gigabyte.  "
"The amount of recommended RAM depends upon the size of the pool and which "
"features ZFS uses.  A general rule of thumb is 1 GB of RAM for every 1 TB of"
" storage.  If using the deduplication feature, a general rule of thumb is 5 "
"GB of RAM per TB of storage to deduplicate.  While some users use ZFS with "
"less RAM, systems under heavy load may panic due to memory exhaustion.  ZFS "
"may require further tuning for systems with less than the recommended RAM "
"requirements."
msgstr ""
"作为一个较低的值，总系统内存应至少为 1GB 。推荐的 RAM 数量取决于存储池的大小和 ZFS 使用的功能。一个经验法则是每 1TB 存储空间需要 "
"1GB 的 RAM 。如果使用去重功能，一个经验法则是每 1TB 存储空间需要 5GB 的 RAM 用于去重。虽然一些用户在较少的 RAM 下使用 "
"ZFS ，但在负载较重的系统下可能会因内存耗尽而发生崩溃。对于 RAM 低于推荐要求的系统，可能需要进一步调整 ZFS 。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:2664
#, fuzzy, no-wrap
msgid "Kernel Configuration"
msgstr "内核配置"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2667
#, fuzzy
msgid ""
"Due to the address space limitations of the i386(TM) platform, ZFS users on "
"the i386(TM) architecture must add this option to a custom kernel "
"configuration file, rebuild the kernel, and reboot:"
msgstr ""
"由于 i386(TM) 平台的地址空间限制， i386(TM) 架构上的 ZFS 用户必须将此选项添加到自定义内核配置文件中，重新构建内核并重新启动："

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2671
#, no-wrap
msgid "options        KVA_PAGES=512\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2676
#, fuzzy
msgid ""
"This expands the kernel address space, allowing the `vm.kvm_size` tunable to"
" push beyond the imposed limit of 1 GB, or the limit of 2 GB for PAE.  To "
"find the most suitable value for this option, divide the desired address "
"space in megabytes by four.  In this example `512` for 2 GB."
msgstr ""
"这将扩展内核地址空间，允许 `vm.kvm_size` 可调参数超过 1 GB 的限制，或者超过 PAE 的 2 GB "
"限制。为了找到最合适的选项值，将所需的地址空间以兆字节为单位除以四。在这个例子中，为 2 GB 选择 `512` 。"

#. type: Title ====
#: documentation/content/en/books/handbook/zfs/_index.adoc:2677
#, fuzzy, no-wrap
msgid "Loader Tunables"
msgstr "加载器可调参数"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2681
#, fuzzy
msgid ""
"Increases the [.filename]#kmem# address space on all FreeBSD architectures."
"  A test system with 1 GB of physical memory benefitted from adding these "
"options to [.filename]#/boot/loader.conf# and then restarting:"
msgstr ""
"在所有 FreeBSD 架构上增加了 [.filename]#kmem# 地址空间。一个具有 1 GB 物理内存的测试系统通过将这些选项添加到 "
"[.filename]#/boot/loader.conf# 并重新启动来受益。"

#. type: delimited block . 4
#: documentation/content/en/books/handbook/zfs/_index.adoc:2688
#, no-wrap
msgid ""
"vm.kmem_size=\"330M\"\n"
"vm.kmem_size_max=\"330M\"\n"
"vfs.zfs.arc.max=\"40M\"\n"
"vfs.zfs.vdev.cache.size=\"5M\"\n"
msgstr ""

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2691
#, fuzzy
msgid ""
"For a more detailed list of recommendations for ZFS-related tuning, see "
"https://wiki.freebsd.org/ZFSTuningGuide[]."
msgstr "有关 ZFS 相关调优的更详细建议列表，请参阅 https://wiki.freebsd.org/ZFSTuningGuide[] 。"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:2693
#, fuzzy, no-wrap
msgid "Further Resources"
msgstr "进一步资源"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2696
#, fuzzy
msgid "https://openzfs.org/[OpenZFS]"
msgstr "[OpenZFS](https://openzfs.org/)"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2697
#, fuzzy
msgid "https://wiki.freebsd.org/ZFSTuningGuide[FreeBSD Wiki - ZFS Tuning]"
msgstr "https://wiki.freebsd.org/ZFSTuningGuide[FreeBSD Wiki - ZFS 调优]"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2698
#, fuzzy
msgid ""
"https://calomel.org/zfs_raid_speed_capacity.html[Calomel Blog - ZFS Raidz "
"Performance, Capacity and Integrity]"
msgstr "[Calomel 博客 - ZFS Raidz 性能、容量和完整性]"

#. type: Title ==
#: documentation/content/en/books/handbook/zfs/_index.adoc:2700
#, fuzzy, no-wrap
msgid "ZFS Features and Terminology"
msgstr "ZFS 功能和术语"

#. type: Plain text
#: documentation/content/en/books/handbook/zfs/_index.adoc:2709
#, fuzzy
msgid ""
"More than a file system, ZFS is fundamentally different.  ZFS combines the "
"roles of file system and volume manager, enabling new storage devices to add"
" to a live system and having the new space available on the existing file "
"systems in that pool at once.  By combining the traditionally separate "
"roles, ZFS is able to overcome previous limitations that prevented RAID "
"groups being able to grow.  A _vdev_ is a top level device in a pool and can"
" be a simple disk or a RAID transformation such as a mirror or RAID-Z array."
"  ZFS file systems (called _datasets_) each have access to the combined free"
" space of the entire pool.  Used blocks from the pool decrease the space "
"available to each file system.  This approach avoids the common pitfall with"
" extensive partitioning where free space becomes fragmented across the "
"partitions."
msgstr ""
"ZFS 不仅仅是一个文件系统，它在根本上是不同的。 ZFS "
"将文件系统和卷管理器的角色结合在一起，使新的存储设备能够添加到活动系统中，并且新的空间可以立即在该池中的现有文件系统上使用。通过结合传统上分开的角色， "
"ZFS 能够克服以前阻止 RAID 组能够增长的限制。_vdev_是池中的顶级设备，可以是简单的磁盘或者是镜像或 RAID-Z 阵列等 RAID 转换。"
" ZFS "
"文件系统（称为_datasets_）每个都可以访问整个池的合并空闲空间。池中使用的块会减少每个文件系统可用的空间。这种方法避免了广泛分区中常见的问题，即空闲空间在分区之间变得碎片化。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2715
#, fuzzy, no-wrap
msgid "[[zfs-term-pool]]pool"
msgstr "[[zfs-term-pool]] 池"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2718
#, fuzzy, no-wrap
msgid ""
"A storage _pool_ is the most basic building block of ZFS. A pool consists of one or more vdevs, the underlying devices that store the data. A pool is then used to create one or more file systems (datasets) or block devices (volumes).\n"
"These datasets and volumes share the pool of remaining free space. Each pool is uniquely identified by a name and a GUID. The ZFS version number on the pool determines the features available."
msgstr ""
"存储池是 ZFS 的最基本构建块。一个存储池由一个或多个 vdev 组成， vdev 是存储数据的底层设备。然后使用存储池来创建一个或多个文件系统（数据集）或块设备（卷）。\n"
"这些数据集和卷共享剩余的自由空间。每个存储池都有一个唯一的名称和 GUID 来进行标识。存储池上的 ZFS 版本号决定了可用的功能。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2719
#, fuzzy, no-wrap
msgid "[[zfs-term-vdev]]vdev Types"
msgstr "[[zfs-term-vdev]]vdev 类型"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2749
#, fuzzy, no-wrap
msgid ""
"A pool consists of one or more vdevs, which themselves are a single disk or a group of disks, transformed to a RAID. When using a lot of vdevs, ZFS spreads data across the vdevs to increase performance and maximize usable space. All vdevs must be at least 128 MB in size. \n"
"\n"
"* [[zfs-term-vdev-disk]] _Disk_ - The most basic vdev type is a standard block device. This can be an entire disk (such as [.filename]#/dev/ada0# or [.filename]#/dev/da0#) or a partition ([.filename]#/dev/ada0p3#). On FreeBSD, there is no performance penalty for using a partition rather than the entire disk. This differs from recommendations made by the Solaris documentation.\n"
"+\n"
"[CAUTION]\n"
"====\n"
"Using an entire disk as part of a bootable pool is strongly discouraged, as this may render the pool unbootable.\n"
"Likewise, you should not use an entire disk as part of a mirror or RAID-Z vdev.\n"
"Reliably determining the size of an unpartitioned disk at boot time is impossible and there's no place to put in boot code.\n"
"====\n"
"\n"
"* [[zfs-term-vdev-file]] _File_ - Regular files may make up ZFS pools, which is useful for testing and experimentation. Use the full path to the file as the device path in `zpool create`.\n"
"* [[zfs-term-vdev-mirror]] _Mirror_ - When creating a mirror, specify the `mirror` keyword followed by the list of member devices for the mirror. A mirror consists of two or more devices, writing all data to all member devices. A mirror vdev will hold as much data as its smallest member. A mirror vdev can withstand the failure of all but one of its members without losing any data.\n"
"+\n"
"[NOTE]\n"
"====\n"
"To upgrade a regular single disk vdev to a mirror vdev at any time, use `zpool <<zfs-zpool-attach,attach>>`.\n"
"====\n"
"\n"
"* [[zfs-term-vdev-raidz]] _RAID-Z_ - ZFS uses RAID-Z, a variation on standard RAID-5 that offers better distribution of parity and eliminates the \"RAID-5 write hole\" in which the data and parity information become inconsistent after an unexpected restart. ZFS supports three levels of RAID-Z which provide varying levels of redundancy in exchange for decreasing levels of usable storage. ZFS uses RAID-Z1 through RAID-Z3 based on the number of parity devices in the array and the number of disks which can fail before the pool stops  being operational.\n"
"+\n"
"In a RAID-Z1 configuration with four disks, each 1 TB, usable storage is 3 TB and the pool will still be able to operate in degraded mode with one faulted disk. If another disk goes offline before replacing and resilvering the faulted disk would result in losing all pool data.\n"
"+\n"
"In a RAID-Z3 configuration with eight disks of 1 TB, the volume will provide 5 TB of usable space and still be able to operate with three faulted disks. Sun(TM) recommends no more than nine disks in a single vdev. If more disks make up the configuration, the recommendation is to divide them into separate vdevs and stripe the pool data across them.\n"
"+\n"
"A configuration of two RAID-Z2 vdevs consisting of 8 disks each would create something like a RAID-60 array. A RAID-Z group's storage capacity is about the size of the smallest disk multiplied by the number of non-parity disks. Four 1 TB disks in RAID-Z1 has an effective size of about 3 TB, and an array of eight 1 TB disks in RAID-Z3 will yield 5 TB of usable space.\n"
"* [[zfs-term-vdev-spare]] _Spare_ - ZFS has a special pseudo-vdev type for keeping track of available hot spares. Note that installed hot spares are not deployed automatically; manually configure them to replace the failed device using `zfs replace`.\n"
"* [[zfs-term-vdev-log]] _Log_ - ZFS Log Devices, also known as ZFS Intent Log (<<zfs-term-zil,ZIL>>) move the intent log from the regular pool devices to a dedicated device, typically an SSD. Having a dedicated log device improves the performance of applications with a high volume of synchronous writes like databases. Mirroring of log devices is possible, but RAID-Z is not supported. If using a lot of log devices, writes will be load-balanced across them.\n"
"* [[zfs-term-vdev-cache]] _Cache_ - Adding a cache vdev to a pool will add the storage of the cache to the <<zfs-term-l2arc,L2ARC>>. Mirroring cache devices is impossible. Since a cache device stores only new copies of existing data, there is no risk of data loss."
msgstr ""
"一个池由一个或多个 vdev 组成，它们本身是一个单独的磁盘或一组磁盘，转换为 RAID 。当使用大量的 vdev 时， ZFS 会将数据分散在 vdev 上，以提高性能和最大化可用空间。所有的 vdev 都必须至少 128MB 大小。\n"
"\n"
" * [[zfs-term-vdev-disk]] _磁盘_ - 最基本的 vdev 类型是标准块设备。这可以是整个磁盘（如 [.filename]#/dev/ada0# 或 [.filename]#/dev/da0# ）或一个分区（ [.filename]#/dev/ada0p3# ）。在 FreeBSD 上，使用分区而不是整个磁盘不会有性能损失。这与 Solaris 文档的建议不同。\n"
"\n"
" [CAUTION] \n"
"====\n"
"强烈不建议将整个磁盘作为可引导池的一部分，因为这可能导致池无法引导。\n"
"同样，您不应将整个磁盘用作镜像或 RAID-Z vdev 的一部分。\n"
"在引导时可靠地确定未分区磁盘的大小是不可能的，也没有地方放置引导代码。\n"
"====\n"
"\n"
" * [[zfs-term-vdev-file]] _文件_ - 普通文件可以组成 ZFS 池，这对于测试和实验很有用。在 `zpool create` 中，使用文件的完整路径作为设备路径。\n"
" * [[zfs-term-vdev-mirror]] _镜像_ - 创建镜像时，使用 `mirror` 关键字后跟镜像的成员设备列表。镜像由两个或更多设备组成，将所有数据写入所有成员设备。镜像 vdev 将保存与其最小成员相同的数据量。镜像 vdev 可以承受除一个成员外的所有成员故障而不丢失任何数据。\n"
"\n"
" [NOTE] \n"
"====\n"
"要随时将常规单磁盘 vdev 升级为镜像 vdev ，请使用 `zpool <<zfs-zpool-attach , attach>>` 。\n"
"====\n"
"\n"
" * [[zfs-term-vdev-raidz]] _RAID-Z_ - ZFS 使用 RAID-Z ，这是标准 RAID-5 的变种，提供更好的奇偶校验分布，并消除了“ RAID-5 写洞”，即在意外重启后数据和奇偶校验信息变得不一致的问题。 ZFS 支持三个级别的 RAID-Z ，它们在提供不同的冗余级别的同时降低可用存储级别。 ZFS 使用基于阵列中奇偶校验设备数量和可以故障的磁盘数量的 RAID-Z1 到 RAID-Z3 。\n"
"\n"
"在一个由四个 1TB 磁盘组成的 RAID-Z1 配置中，可用存储空间为 3TB ，并且池仍能在一个故障磁盘的降级模式下运行。如果在替换和重新同步故障磁盘之前另一个磁盘离线，将导致丢失所有池数据。\n"
"\n"
"在一个由八个 1TB 磁盘组成的 RAID-Z3 配置中，该卷将提供 5TB 的可用空间，并且仍能在三个故障磁盘的情况下运行。 Sun(TM) 建议在单个 vdev 中不要使用超过九个磁盘。如果更多的磁盘组成配置，则建议将它们分成单独的 vdev ，并将池数据分布在它们之间。\n"
"\n"
"由每个包含 8 个磁盘的 RAID-Z2 vdev 组成的配置将创建类似于 RAID-60 阵列的东西。 RAID-Z 组的存储容量约为最小磁盘大小乘以非奇偶校验磁盘数量。 RAID-Z1 中的四个 1TB 磁盘的有效大小约为 3TB ，而 RAID-Z3 中的八个 1TB 磁盘阵列将提供 5TB 的可用空间。\n"
" * [[zfs-term-vdev-spare]] _热备_ - ZFS 有一种特殊的伪 vdev 类型，用于跟踪可用的热备。请注意，已安装的热备不会自动部署；请使用 `zfs replace` 手动配置它们以替换故障设备。\n"
" * [[zfs-term-vdev-log]] _日志_ - ZFS 日志设备，也称为 ZFS 意图日志（ <<zfs-term-zil , ZIL>> ），将意图日志从常规池设备移动到专用设备，通常是 SSD 。拥有专用的日志设备可以提高具有大量同步写入（如数据库）的应用程序的性能。日志设备的镜像是可能的，但不支持 RAID-Z 。如果使用大量日志设备，写入将在它们之间进行负载平衡。\n"
" * [[zfs-term-vdev-cache]] _缓存_ - 向池添加缓存 vdev 将将缓存的存储添加到 <<zfs-term-l2arc , L2ARC>> 中。镜像缓存设备是不可能的。由于缓存设备仅存储现有数据的新副本，不存在数据丢失的风险。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2750
#, fuzzy, no-wrap
msgid "[[zfs-term-txg]] Transaction Group (TXG)"
msgstr "[[zfs-term-txg]] 事务组 (TXG)"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2756
#, fuzzy, no-wrap
msgid ""
"Transaction Groups are the way ZFS groups blocks changes together and writes them to the pool. Transaction groups are the atomic unit that ZFS uses to ensure consistency. ZFS assigns each transaction group a unique 64-bit consecutive identifier. There can be up to three active transaction groups at a time, one in each of these three states: \n"
"\n"
"* _Open_ - A new transaction group begins in the open state and accepts new writes. There is always a transaction group in the open state, but the transaction group may refuse new writes if it has reached a limit. Once the open transaction group has reached a limit, or reaching the <<zfs-advanced-tuning-txg-timeout,`vfs.zfs.txg.timeout`>>, the transaction group advances to the next state.\n"
"* _Quiescing_ - A short state that allows any pending operations to finish without blocking the creation of a new open transaction group. Once all the transactions in the group have completed, the transaction group advances to the final state.\n"
"* _Syncing_ - Write all the data in the transaction group to stable storage. This process will in turn change other data, such as metadata and space maps, that ZFS will also write to stable storage. The process of syncing involves several passes. On the first and biggest, all the changed data blocks; next come the metadata, which may take several passes to complete. Since allocating space for the data blocks generates new metadata, the syncing state cannot finish until a pass completes that does not use any new space. The syncing state is also where _synctasks_ complete. Synctasks are administrative operations such as creating or destroying snapshots and datasets that complete the uberblock change. Once the sync state completes the transaction group in the quiescing state advances to the syncing state. All administrative functions, such as <<zfs-term-snapshot,`snapshot`>> write as part of the transaction group. ZFS adds a created synctask to the open transaction group, and that group advances as fast as possible to the syncing state to reduce the latency of administrative commands."
msgstr ""
"事务组是 ZFS 将块更改分组并写入池的方式。事务组是 ZFS 用来确保一致性的原子单位。 ZFS 为每个事务组分配一个唯一的 64 位连续标识符。同时可以有最多三个活动事务组，分别处于以下三种状态之一：\n"
"\n"
" * _打开_ - 新的事务组开始时处于打开状态并接受新的写入。始终有一个处于打开状态的事务组，但如果达到限制，事务组可能会拒绝新的写入。一旦打开的事务组达到限制，或达到了 <<zfs-advanced-tuning-txg-timeout , `vfs.zfs.txg.timeout`>> ，事务组将进入下一个状态。\n"
" * _静默_ - 一个短暂的状态，允许所有待处理的操作完成，而不会阻塞新的打开事务组的创建。一旦组中的所有事务完成，事务组将进入最终状态。\n"
" * _同步_ - 将事务组中的所有数据写入稳定存储。这个过程将进一步改变其他数据，如元数据和空间映射， ZFS 也会将其写入稳定存储。同步过程涉及多个步骤。首先是所有更改的数据块；接下来是元数据，可能需要多次通过才能完成。由于为数据块分配空间会生成新的元数据，因此同步状态无法完成，直到完成一个不使用任何新空间的步骤。同步状态也是_synctasks_完成的地方。 Synctasks 是完成超级块更改的创建或销毁快照和数据集等管理操作。一旦同步状态完成，处于静默状态的事务组将进入同步状态。所有管理功能，如 <<zfs-term-snapshot , `snapshot`>> ，都作为事务组的一部分进行写入。 ZFS 将创建的 synctask 添加到打开的事务组中，并尽快将该组推进到同步状态，以减少管理命令的延迟。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2757
#, fuzzy, no-wrap
msgid "[[zfs-term-arc]]Adaptive Replacement Cache (ARC)"
msgstr "自适应替换缓存（ ARC ）"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2759
#, fuzzy, no-wrap
msgid ""
"ZFS uses an Adaptive Replacement Cache (ARC), rather than a more traditional"
" Least Recently Used (LRU) cache. An LRU cache is a simple list of items in "
"the cache, sorted by how recently object was used, adding new items to the "
"head of the list. When the cache is full, evicting items from the tail of "
"the list makes room for more active objects. An ARC consists of four lists; "
"the Most Recently Used (MRU) and Most Frequently Used (MFU) objects, plus a "
"ghost list for each. These ghost lists track evicted objects to prevent "
"adding them back to the cache. This increases the cache hit ratio by "
"avoiding objects that have a history of occasional use. Another advantage of"
" using both an MRU and MFU is that scanning an entire file system would "
"evict all data from an MRU or LRU cache in favor of this freshly accessed "
"content. With ZFS, there is also an MFU that tracks the most frequently used"
" objects, and the cache of the most commonly accessed blocks remains."
msgstr ""
"ZFS 使用自适应替换缓存（ ARC ），而不是更传统的最近最少使用（ LRU ）缓存。 LRU "
"缓存是一个简单的缓存项列表，按照对象最近使用的时间排序，将新项添加到列表的头部。当缓存已满时，从列表的尾部逐出项以为更活跃的对象腾出空间。 ARC "
"由四个列表组成：最近最常使用（ MRU ）对象和最频繁使用（ MFU "
"）对象，以及每个列表的幽灵列表。这些幽灵列表跟踪被逐出的对象，以防止将它们重新添加到缓存中。这通过避免具有偶尔使用历史的对象来提高缓存命中率。同时使用 "
"MRU 和 MFU 的另一个优点是，扫描整个文件系统将逐出 MRU 或 LRU 缓存中的所有数据，以便为这些新访问的内容腾出空间。在 ZFS "
"中，还有一个跟踪最常使用对象的 MFU ，并保留最常访问块的缓存。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2760
#, fuzzy, no-wrap
msgid "[[zfs-term-l2arc]]L2ARC"
msgstr ""
"[[zfs-term-l2arc]]L2ARC 是 ZFS 文件系统中的一个重要组件。它是一种用于缓存热数据的高速读取缓存设备。 L2ARC "
"可以提高读取性能，减少磁盘 I/O 操作，从而加快文件系统的响应速度。它通常使用高速存储介质，如 SSD 来存储数据。 L2ARC "
"的工作原理是将最常访问的数据块缓存到高速存储设备中，以便在后续的读取操作中快速获取。通过使用 L2ARC ， ZFS "
"可以更好地利用系统的内存和存储资源，提供更高效的数据访问和处理能力。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2762
#, fuzzy, no-wrap
msgid ""
"L2ARC is the second level of the ZFS caching system. RAM stores the primary "
"ARC. Since the amount of available RAM is often limited, ZFS can also use "
"<<zfs-term-vdev-cache,cache vdevs>>. Solid State Disks (SSDs) are often used"
" as these cache devices due to their higher speed and lower latency compared"
" to traditional spinning disks. L2ARC is entirely optional, but having one "
"will increase read speeds for cached files on the SSD instead of having to "
"read from the regular disks. L2ARC can also speed up <<zfs-term-"
"deduplication,deduplication>> because a deduplication table (DDT) that does "
"not fit in RAM but does fit in the L2ARC will be much faster than a DDT that"
" must read from disk. Limits on the data rate added to the cache devices "
"prevents prematurely wearing out SSDs with extra writes. Until the cache is "
"full (the first block evicted to make room), writes to the L2ARC limit to "
"the sum of the write limit and the boost limit, and afterwards limit to the "
"write limit. A pair of man:sysctl[8] values control these rate limits. "
"<<zfs-advanced-tuning-l2arc_write_max,`vfs.zfs.l2arc_write_max`>> controls "
"the number of bytes written to the cache per second, while <<zfs-advanced-"
"tuning-l2arc_write_boost,`vfs.zfs.l2arc_write_boost`>> adds to this limit "
"during the \"Turbo Warmup Phase\" (Write Boost)."
msgstr ""
"L2ARC 是 ZFS 缓存系统的第二级。 RAM 存储主要的 ARC 。由于可用的 RAM 数量通常有限， ZFS 还可以使用缓存 vdevs "
"。由于与传统的旋转硬盘相比，固态硬盘（ SSD ）具有更高的速度和更低的延迟，因此通常将其用作缓存设备。 L2ARC 是完全可选的，但拥有一个 "
"L2ARC 将提高从 SSD 读取缓存文件的速度，而不必从常规磁盘读取。 L2ARC 还可以加速去重，因为不适合 RAM 但适合 L2ARC 的去重表（"
" DDT ）比必须从磁盘读取的 DDT 快得多。对缓存设备添加的数据速率限制可以防止额外的写入过早磨损 SSD "
"。在缓存填满之前（为了腾出空间而驱逐的第一个块），写入 L2ARC 的限制为写入限制和增加限制的总和，之后限制为写入限制。一对 sysctl "
"值控制这些速率限制。 vfs.zfs.l2arc_write_max 控制每秒写入缓存的字节数，而 vfs.zfs.l2arc_write_boost "
"在“ Turbo Warmup Phase ”（写入增强）期间增加了这个限制。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2763
#, fuzzy, no-wrap
msgid "[[zfs-term-zil]]ZIL"
msgstr "[[zfs-term-zil]]ZIL"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2765
#, fuzzy, no-wrap
msgid ""
"ZIL accelerates synchronous transactions by using storage devices like SSDs "
"that are faster than those used in the main storage pool. When an "
"application requests a synchronous write (a guarantee that the data is "
"stored to disk rather than merely cached for later writes), writing the data"
" to the faster ZIL storage then later flushing it out to the regular disks "
"greatly reduces latency and improves performance. Synchronous workloads like"
" databases will profit from a ZIL alone. Regular asynchronous writes such as"
" copying files will not use the ZIL at all."
msgstr ""
"ZIL 通过使用比主存储池中使用的存储设备（如 SSD "
"）更快的设备来加速同步事务。当应用程序请求同步写入（保证数据存储到磁盘而不仅仅是缓存以供以后写入时），将数据写入更快的 ZIL "
"存储，然后稍后将其刷新到常规磁盘上，大大降低了延迟并提高了性能。像数据库这样的同步工作负载将从 ZIL "
"中受益。而常规的异步写入（如复制文件）则根本不会使用 ZIL 。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2766
#, fuzzy, no-wrap
msgid "[[zfs-term-cow]]Copy-On-Write"
msgstr "[[zfs-term-cow]] 写时复制"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2768
#, fuzzy, no-wrap
msgid ""
"Unlike a traditional file system, ZFS writes a different block rather than "
"overwriting the old data in place. When completing this write the metadata "
"updates to point to the new location. When a shorn write (a system crash or "
"power loss in the middle of writing a file) occurs, the entire original "
"contents of the file are still available and ZFS discards the incomplete "
"write. This also means that ZFS does not require a man:fsck[8] after an "
"unexpected shutdown."
msgstr ""
"与传统的文件系统不同， ZFS "
"在写入数据时不会直接覆盖旧数据，而是写入一个不同的块。完成写入后，元数据会更新以指向新的位置。当发生截断写入（系统崩溃或断电导致文件写入中断）时，文件的完整原始内容仍然可用，而"
" ZFS 会丢弃不完整的写入。这也意味着 ZFS 在意外关闭后不需要进行 man:fsck[8] 操作。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2769
#, fuzzy, no-wrap
msgid "[[zfs-term-dataset]]Dataset"
msgstr "[[zfs-term-dataset]] 数据集"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2771
#, fuzzy, no-wrap
msgid ""
"_Dataset_ is the generic term for a ZFS file system, volume, snapshot or "
"clone. Each dataset has a unique name in the format "
"_poolname/path@snapshot_. The root of the pool is a dataset as well. Child "
"datasets have hierarchical names like directories. For example, "
"_mypool/home_, the home dataset, is a child of _mypool_ and inherits "
"properties from it. Expand this further by creating _mypool/home/user_. This"
" grandchild dataset will inherit properties from the parent and grandparent."
" Set properties on a child to override the defaults inherited from the "
"parent and grandparent. Administration of datasets and their children can be"
" <<zfs-zfs-allow,delegated>>."
msgstr ""
"数据集（_Dataset_）是 ZFS 文件系统、卷、快照或克隆的通用术语。每个数据集都有一个唯一的名称，格式为_poolname/path @ "
"snapshot_。池的根也是一个数据集。子数据集具有层次结构的名称，类似于目录。例如，_mypool/home_，即 home 数据集，是 "
"mypool "
"的子数据集，并从其继承属性。通过创建_mypool/home/user_，可以进一步扩展此结构。这个孙子数据集将从父级和祖父级继承属性。在子数据集上设置属性以覆盖从父级和祖父级继承的默认值。可以将数据集及其子数据集的管理委托给其他用户。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2772
#, fuzzy, no-wrap
msgid "[[zfs-term-filesystem]]File system"
msgstr "[[zfs-term-filesystem]] 文件系统"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2774
#, fuzzy, no-wrap
msgid ""
"A ZFS dataset is most often used as a file system. Like most other file "
"systems, a ZFS file system mounts somewhere in the systems directory "
"hierarchy and contains files and directories of its own with permissions, "
"flags, and other metadata."
msgstr ""
"ZFS 数据集通常用作文件系统。与大多数其他文件系统一样， ZFS "
"文件系统会挂载到系统目录层次结构的某个位置，并包含具有权限、标志和其他元数据的文件和目录。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2775
#, fuzzy, no-wrap
msgid "[[zfs-term-volume]]Volume"
msgstr "[[zfs-term-volume]] 卷"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2777
#, fuzzy, no-wrap
msgid ""
"ZFS can also create volumes, which appear as disk devices. Volumes have a "
"lot of the same features as datasets, including copy-on-write, snapshots, "
"clones, and checksumming. Volumes can be useful for running other file "
"system formats on top of ZFS, such as UFS virtualization, or exporting iSCSI"
" extents."
msgstr ""
"ZFS 还可以创建卷，它们会显示为磁盘设备。卷具有与数据集相似的许多功能，包括写时复制、快照、克隆和校验和。卷对于在 ZFS 上运行其他文件系统格式（如"
" UFS 虚拟化）或导出 iSCSI 扩展非常有用。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2778
#, fuzzy, no-wrap
msgid "[[zfs-term-snapshot]]Snapshot"
msgstr "[[zfs-term-snapshot]] 快照"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2780
#, fuzzy, no-wrap
msgid ""
"The <<zfs-term-cow,copy-on-write>> (COW) design of ZFS allows for nearly "
"instantaneous, consistent snapshots with arbitrary names. After taking a "
"snapshot of a dataset, or a recursive snapshot of a parent dataset that will"
" include all child datasets, new data goes to new blocks, but without "
"reclaiming the old blocks as free space. The snapshot contains the original "
"file system version and the live file system contains any changes made since"
" taking the snapshot using no other space. New data written to the live file"
" system uses new blocks to store this data. The snapshot will grow as the "
"blocks are no longer used in the live file system, but in the snapshot "
"alone. Mount these snapshots read-only allows recovering of previous file "
"versions. A <<zfs-zfs-snapshot,rollback>> of a live file system to a "
"specific snapshot is possible, undoing any changes that took place after "
"taking the snapshot. Each block in the pool has a reference counter which "
"keeps track of the snapshots, clones, datasets, or volumes use that block. "
"As files and snapshots get deleted, the reference count  decreases, "
"reclaiming the free space when no longer referencing a block. Marking "
"snapshots with a <<zfs-zfs-snapshot,hold>> results in any attempt to destroy"
" it will  returns an `EBUSY` error. Each snapshot can have holds with a "
"unique name each. The <<zfs-zfs-snapshot,release>> command removes the hold "
"so the snapshot can deleted. Snapshots, cloning, and rolling back works on "
"volumes, but independently mounting does not."
msgstr ""
"ZFS 的 <<zfs-term-cow ,写时复制 >> （ COW "
"）设计允许几乎瞬间创建具有任意名称的一致性快照。在对数据集进行快照或对包含所有子数据集的父数据集进行递归快照之后，新数据将进入新的块，但不会将旧块回收为可用空间。快照包含原始文件系统版本，活动文件系统包含自快照以来所做的任何更改，而不使用其他空间。写入活动文件系统的新数据使用新的块来存储这些数据。随着块在活动文件系统中不再使用，快照将增长，但仅在快照中使用。将这些快照以只读方式挂载可以恢复先前的文件版本。可以将活动文件系统回滚到特定快照的"
" <<zfs-zfs-snapshot ,回滚 >> "
"是可能的，从而撤消在快照之后进行的任何更改。池中的每个块都有一个引用计数器，用于跟踪使用该块的快照、克隆、数据集或卷。随着文件和快照被删除，引用计数减少，当不再引用块时，回收可用空间。使用"
" <<zfs-zfs-snapshot ,保留 >> 标记快照将导致任何试图销毁它的尝试返回 `EBUSY` 错误。每个快照可以具有唯一名称的保留。 "
"<<zfs-zfs-snapshot ,释放 >> 命令会移除保留，以便可以删除快照。快照、克隆和回滚适用于卷，但独立挂载不适用。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2781
#, fuzzy, no-wrap
msgid "[[zfs-term-clone]]Clone"
msgstr "[[zfs-term-clone]] 克隆"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2783
#, fuzzy, no-wrap
msgid ""
"Cloning a snapshot is also possible. A clone is a writable version of a "
"snapshot, allowing the file system to fork as a new dataset. As with a "
"snapshot, a clone initially consumes no new space. As new data written to a "
"clone uses new blocks, the size of the clone grows. When blocks are "
"overwritten in the cloned file system or volume, the reference count on the "
"previous block decreases. Removing the snapshot upon which a clone bases is "
"impossible because the clone depends on it. The snapshot is the parent, and "
"the clone is the child. Clones can be _promoted_, reversing this dependency "
"and making the clone the parent and the previous parent the child. This "
"operation requires no new space. Since the amount of space used by the "
"parent and child reverses, it may affect existing quotas and reservations."
msgstr ""
"克隆快照也是可能的。克隆是快照的可写版本，允许文件系统分叉为一个新的数据集。与快照一样，克隆最初不占用新的空间。当新数据写入克隆时，使用新的块，克隆的大小增长。当在克隆的文件系统或卷中覆盖块时，先前块的引用计数减少。删除克隆所依赖的快照是不可能的，因为克隆依赖于它。快照是父级，克隆是子级。克隆可以被“提升”，反转这种依赖关系，使克隆成为父级，先前的父级成为子级。此操作不需要新的空间。由于父级和子级使用的空间相互转换，可能会影响现有的配额和预留空间。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2784
#, fuzzy, no-wrap
msgid "[[zfs-term-checksum]]Checksum"
msgstr "[[zfs-term-checksum]] 校验和"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2791
#, fuzzy, no-wrap
msgid ""
"Every block is also checksummed. The checksum algorithm used is a per-dataset property, see <<zfs-zfs-set,`set`>>. The checksum of each block is transparently validated when read, allowing ZFS to detect silent corruption. If the data read does not match the expected checksum, ZFS will attempt to recover the data from any available redundancy, like mirrors or RAID-Z. Triggering a validation of all checksums with <<zfs-term-scrub,`scrub`>>. Checksum algorithms include:\n"
"\n"
"* `fletcher2`\n"
"* `fletcher4`\n"
"* `sha256`\n"
" The `fletcher` algorithms are faster, but `sha256` is a strong cryptographic hash and has a much lower chance of collisions at the  cost of some performance. Deactivating checksums is possible, but  strongly discouraged."
msgstr ""
"每个块也都有校验和。所使用的校验算法是每个数据集的属性，参见 <<zfs-zfs-set , `set`>> 。在读取时，每个块的校验和会被透明地验证，这使得 ZFS 能够检测到静默损坏。如果读取的数据与预期的校验和不匹配， ZFS 将尝试从任何可用的冗余中恢复数据，例如镜像或 RAID-Z 。可以使用 <<zfs-term-scrub , `scrub`>> 触发对所有校验和的验证。校验算法包括：\n"
"\n"
" * `fletcher2` \n"
" * `fletcher4` \n"
" * `sha256` \n"
" `fletcher` 算法更快，但 `sha256` 是一种强大的加密哈希算法，具有更低的碰撞几率，但性能稍有损失。可以禁用校验和，但强烈不建议这样做。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2792
#, fuzzy, no-wrap
msgid "[[zfs-term-compression]]Compression"
msgstr "[[zfs-term-compression]] 压缩"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2806
#, fuzzy, no-wrap
msgid ""
"Each dataset has a compression property, which defaults to off. Set this property to an available compression algorithm. This causes compression of all new data written to the dataset. Beyond a reduction in space used, read and write throughput often increases because fewer blocks need reading or writing. \n"
"\n"
"[[zfs-term-compression-lz4]]\n"
"* _LZ4_ - Added in ZFS pool version 5000 (feature flags), LZ4 is now the recommended compression algorithm. LZ4 works about 50% faster than LZJB when operating on compressible data, and is over three times faster when operating on uncompressible data. LZ4 also decompresses about 80% faster than LZJB. On modern CPUs, LZ4 can often compress at over 500 MB/s, and decompress at over 1.5 GB/s (per single CPU core).\n"
"\n"
"[[zfs-term-compression-lzjb]]\n"
"* _LZJB_ - The default compression algorithm. Created by Jeff Bonwick (one of the original creators of ZFS). LZJB offers good compression with less CPU overhead compared to GZIP. In the future, the default compression algorithm will change to LZ4.\n"
"\n"
"[[zfs-term-compression-gzip]]\n"
"* _GZIP_ - A popular stream compression algorithm available in ZFS. One of the main advantages of using GZIP is its configurable level of compression. When setting the `compress` property, the administrator can choose the level of compression, ranging from `gzip1`, the lowest level of compression, to `gzip9`, the highest level of compression. This gives the administrator control over how much CPU time to trade for saved disk space.\n"
"\n"
"[[zfs-term-compression-zle]]\n"
"* _ZLE_ - Zero Length Encoding is a special compression algorithm that compresses continuous runs of zeros alone. This compression algorithm is useful when the dataset contains large blocks of zeros."
msgstr ""
"每个数据集都有一个压缩属性，默认为关闭状态。将此属性设置为可用的压缩算法。这将导致对写入数据集的所有新数据进行压缩。除了减少所使用的空间外，读写吞吐量通常也会增加，因为需要读取或写入的块较少。\n"
"\n"
" [[zfs-term-compression-lz4]] \n"
" * _LZ4_ - 在 ZFS 池版本 5000 （特征标志）中添加， LZ4 现在是推荐的压缩算法。当处理可压缩数据时， LZ4 的工作速度比 LZJB 快约 50 ％，处理不可压缩数据时，速度快三倍以上。 LZ4 的解压速度也比 LZJB 快约 80 ％。在现代 CPU 上， LZ4 通常可以以超过 500 MB/s 的速度进行压缩，并以超过 1.5 GB/s 的速度进行解压缩（每个单独的 CPU 核心）。\n"
"\n"
" [[zfs-term-compression-lzjb]] \n"
" * _LZJB_ - 默认的压缩算法。由 Jeff Bonwick （ ZFS 的原始创建者之一）创建。与 GZIP 相比， LZJB 提供了较好的压缩效果，并且 CPU 开销较小。在将来，默认的压缩算法将更改为 LZ4 。\n"
"\n"
" [[zfs-term-compression-gzip]] \n"
" * _GZIP_ - ZFS 中提供的一种流压缩算法。使用 GZIP 的主要优势之一是其可配置的压缩级别。在设置 `compress` 属性时，管理员可以选择压缩级别，从最低级别的 `gzip1` 到最高级别的 `gzip9` 。这使管理员可以控制以多少 CPU 时间来换取节省的磁盘空间。\n"
"\n"
" [[zfs-term-compression-zle]] \n"
" * _ZLE_ - 零长度编码是一种特殊的压缩算法，仅压缩连续的零。当数据集包含大块的零时，这种压缩算法非常有用。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2807
#, fuzzy, no-wrap
msgid "[[zfs-term-copies]]Copies"
msgstr "[[zfs-term-copies]] 副本"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2809
#, fuzzy, no-wrap
msgid ""
"When set to a value greater than 1, the `copies` property instructs ZFS to "
"maintain copies of each block in the <<zfs-term-filesystem,file system>> or "
"<<zfs-term-volume,volume>>. Setting this property on important datasets "
"provides added redundancy from which to recover a block that does not match "
"its checksum. In pools without redundancy, the copies feature is the single "
"form of redundancy. The copies feature can recover from a single bad sector "
"or other forms of minor corruption, but it does not protect the pool from "
"the loss of an entire disk."
msgstr ""
"当 `copies` 属性设置为大于 1 的值时， ZFS 会在 <<zfs-term-filesystem ,文件系统 >> 或 <<zfs-"
"term-volume ,卷 >> "
"中维护每个块的副本。在重要的数据集上设置此属性可以提供额外的冗余，以便从中恢复不匹配其校验和的块。在没有冗余的存储池中，副本功能是唯一的冗余形式。副本功能可以从单个坏扇区或其他形式的轻微损坏中恢复，但它不能保护存储池免受整个磁盘的丢失。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2810
#, fuzzy, no-wrap
msgid "[[zfs-term-deduplication]]Deduplication"
msgstr "[[zfs-term-deduplication]] 去重"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2812
#, fuzzy, no-wrap
msgid ""
"Checksums make it possible to detect duplicate blocks when writing data. "
"With deduplication, the reference count of an existing, identical block "
"increases, saving storage space. ZFS keeps a deduplication table (DDT) in "
"memory to detect duplicate blocks. The table contains a list of unique "
"checksums, the location of those blocks, and a reference count. When writing"
" new data, ZFS calculates checksums and compares them to the list. When "
"finding a match it uses the existing block. Using the SHA256 checksum "
"algorithm with deduplication provides a secure cryptographic hash. "
"Deduplication is tunable. If `dedup` is `on`, then a matching checksum means"
" that the data is identical. Setting `dedup` to `verify`, ZFS performs a "
"byte-for-byte check on the data ensuring they are actually identical. If the"
" data is not identical, ZFS will note the hash collision and store the two "
"blocks separately. As the DDT must store the hash of each unique block, it "
"consumes a large amount of memory. A general rule of thumb is 5-6 GB of ram "
"per 1 TB of deduplicated data). In situations not practical to have enough "
"RAM to keep the entire DDT in memory, performance will suffer greatly as the"
" DDT must read from disk before writing each new block. Deduplication can "
"use L2ARC to store the DDT, providing a middle ground between fast system "
"memory and slower disks. Consider using compression instead, which often "
"provides nearly as much space savings without the increased memory."
msgstr ""
"在写入数据时，校验和可以检测重复的数据块。通过去重，现有相同块的引用计数增加，节省存储空间。 ZFS 在内存中保留一个去重表（ DDT "
"）来检测重复的数据块。该表包含一系列唯一的校验和、这些块的位置和引用计数。在写入新数据时， ZFS "
"计算校验和并将其与列表进行比较。当找到匹配项时，它使用现有的数据块。使用 SHA256 校验和算法进行去重提供了安全的加密哈希。去重是可调整的。如果 "
"`dedup` 设置为 `on` ，那么匹配的校验和意味着数据是相同的。将 `dedup` 设置为 `verify` ， ZFS "
"对数据执行逐字节的检查，确保它们实际上是相同的。如果数据不相同， ZFS 将记录哈希冲突并将这两个块分别存储。由于 DDT "
"必须存储每个唯一块的哈希，它会消耗大量的内存。一个经验法则是每 1TB 去重数据需要 5-6GB 的 RAM ）。在无法实际拥有足够的 RAM 来将整个"
" DDT 保留在内存中的情况下，性能将大大降低，因为 DDT 必须在写入每个新块之前从磁盘读取。去重可以使用 L2ARC 来存储 DDT "
"，提供了快速系统内存和较慢磁盘之间的折中方案。考虑使用压缩代替，压缩通常可以提供几乎相同的空间节省效果，而不需要增加内存使用量。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2813
#, fuzzy, no-wrap
msgid "[[zfs-term-scrub]]Scrub"
msgstr ""
"[[zfs-term-scrub]]Scrub 是 ZFS 文件系统中的一个重要操作。它用于检查和修复存储池中的数据完整性问题。 Scrub "
"操作会扫描存储池中的所有数据块，并与其校验和进行比较，以检测任何损坏或错误的数据。如果发现问题， Scrub 操作会尝试修复或恢复数据。 Scrub "
"操作可以定期执行，以确保数据的持久性和可靠性。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2815
#, fuzzy, no-wrap
msgid ""
"Instead of a consistency check like man:fsck[8], ZFS has `scrub`. `scrub` "
"reads all data blocks stored on the pool and verifies their checksums "
"against the known good checksums stored in the metadata. A periodic check of"
" all the data stored on the pool ensures the recovery of any corrupted "
"blocks before needing them. A scrub is not required after an unclean "
"shutdown, but good practice is at least once every three months. ZFS "
"verifies the checksum of each block during normal use, but a scrub makes "
"certain to check even infrequently used blocks for silent corruption. ZFS "
"improves data security in archival storage situations. Adjust the relative "
"priority of `scrub` with <<zfs-advanced-tuning-"
"scrub_delay,`vfs.zfs.scrub_delay`>> to prevent the scrub from degrading the "
"performance of other workloads on the pool."
msgstr ""
"与 man:fsck[8] 类似的一致性检查不同， ZFS 使用 `scrub` 命令。 `scrub` "
"命令会读取存储在池中的所有数据块，并将它们的校验和与元数据中存储的已知良好校验和进行验证。定期检查池中存储的所有数据可以确保在需要之前恢复任何损坏的块。在非正常关闭后不需要进行"
" scrub ，但良好的做法是至少每三个月进行一次。 ZFS 在正常使用过程中会验证每个块的校验和，但 scrub "
"会确保对即使很少使用的块进行静默损坏检查。 ZFS 在归档存储情况下提高了数据安全性。通过调整 `scrub` 的相对优先级，可以使用 <<zfs-"
"advanced-tuning-scrub_delay , `vfs.zfs.scrub_delay`>> 来防止 scrub "
"影响池上其他工作负载的性能。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2816
#, fuzzy, no-wrap
msgid "[[zfs-term-quota]]Dataset Quota"
msgstr "[[zfs-term-quota]] 数据集配额"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2827
#, fuzzy, no-wrap
msgid ""
"ZFS provides fast and accurate dataset, user, and group space accounting as well as quotas and space reservations. This gives the administrator fine grained control over space allocation and allows reserving space for critical file systems. \n"
"\n"
"ZFS supports different types of quotas: the dataset quota, the <<zfs-term-refquota,reference quota (refquota)>>, the <<zfs-term-userquota,user quota>>, and the <<zfs-term-groupquota,group quota>>.\n"
"\n"
"Quotas limit the total size of a dataset and its descendants, including snapshots of the dataset, child datasets, and the snapshots of those datasets.\n"
"\n"
"[NOTE]\n"
"====\n"
"Volumes do not support quotas, as the `volsize` property acts as an implicit quota.\n"
"===="
msgstr ""
"ZFS 提供了快速准确的数据集、用户和组空间账户，以及配额和空间预留。这使得管理员可以对空间分配进行精细控制，并允许为关键文件系统预留空间。\n"
"\n"
" ZFS 支持不同类型的配额：数据集配额、引用配额（ refquota ）、用户配额和组配额。\n"
"\n"
"配额限制了数据集及其后代的总大小，包括数据集的快照、子数据集和这些数据集的快照。\n"
"\n"
" [NOTE] \n"
"====\n"
"卷不支持配额，因为 `volsize` 属性充当隐式配额。\n"
"===="

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2828
#, fuzzy, no-wrap
msgid "[[zfs-term-refquota]]Reference Quota"
msgstr "[[zfs-term-refquota]] 参考配额"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2830
#, fuzzy, no-wrap
msgid ""
"A reference quota limits the amount of space a dataset can consume by "
"enforcing a hard limit. This hard limit includes space referenced by the "
"dataset alone and does not include space used by descendants, such as file "
"systems or snapshots."
msgstr ""
"引用配额限制了数据集可以消耗的空间量，通过强制执行一个硬限制。这个硬限制包括数据集本身引用的空间，但不包括后代使用的空间，比如文件系统或快照。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2831
#, fuzzy, no-wrap
msgid "[[zfs-term-userquota]]User Quota"
msgstr "[[zfs-term-userquota]] 用户配额"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2833
#, fuzzy, no-wrap
msgid ""
"User quotas are useful to limit the amount of space used by the specified "
"user."
msgstr "用户配额对于限制指定用户使用的空间量非常有用。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2834
#, fuzzy, no-wrap
msgid "[[zfs-term-groupquota]]Group Quota"
msgstr "[[zfs-term-groupquota]] 组配额"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2836
#, fuzzy, no-wrap
msgid ""
"The group quota limits the amount of space that a specified group can "
"consume."
msgstr "群组配额限制了指定群组可以使用的空间量。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2837
#, fuzzy, no-wrap
msgid "[[zfs-term-reservation]]Dataset Reservation"
msgstr "[[zfs-term-reservation]] 数据集预留空间"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2841
#, fuzzy, no-wrap
msgid ""
"The `reservation` property makes it possible to guarantee an amount of space for a specific dataset and its descendants. This means that setting a 10 GB reservation on [.filename]#storage/home/bob# prevents other datasets from using up all free space, reserving at least 10 GB of space for this dataset. Unlike a regular <<zfs-term-refreservation,`refreservation`>>, space used by snapshots and descendants is not counted against the reservation. For example, if taking a snapshot of [.filename]#storage/home/bob#, enough disk space other than the `refreservation` amount must exist for the operation to succeed. Descendants of the main data set are not counted in the `refreservation` amount and so do not encroach on the space set.\n"
"\n"
"Reservations of any sort are useful in situations such as planning and testing the suitability of disk space allocation in a new system, or ensuring that enough space is available on file systems for audio logs or system recovery procedures and files."
msgstr ""
"`reservation` 属性使得可以为特定数据集及其子数据集保证一定的空间量。这意味着在 [.filename]#storage/home/bob# 上设置 10 GB 的保留空间，可以防止其他数据集使用完所有的空闲空间，至少为该数据集保留 10 GB 的空间。与常规的 <<zfs-term-refreservation , `refreservation`>> 不同，快照和子数据集使用的空间不计入保留空间。例如，如果对 [.filename]#storage/home/bob# 进行快照，除了 `refreservation` 的空间量之外，必须存在足够的磁盘空间才能成功进行操作。主数据集的子数据集不计入 `refreservation` 的空间量，因此不会侵占设置的空间。\n"
"\n"
"任何类型的保留空间在以下情况下非常有用：在新系统中规划和测试磁盘空间分配的适用性，或确保文件系统上有足够的空间用于音频日志或系统恢复程序和文件。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2842
#, fuzzy, no-wrap
msgid "[[zfs-term-refreservation]]Reference Reservation"
msgstr "[[zfs-term-refreservation]] 参考保留"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2844
#, fuzzy, no-wrap
msgid ""
"The `refreservation` property makes it possible to guarantee an amount of "
"space for the use of a specific dataset _excluding_ its descendants. This "
"means that setting a 10 GB reservation on [.filename]#storage/home/bob#, and"
" another dataset tries to use the free space, reserving at least 10 GB of "
"space  for this dataset. In contrast to a regular <<zfs-term-"
"reservation,reservation>>, space used by snapshots and descendant datasets "
"is not counted against the reservation. For example, if taking a snapshot of"
" [.filename]#storage/home/bob#, enough disk space other than the "
"`refreservation` amount must exist for the operation to succeed. Descendants"
" of the  main data set are not counted in the `refreservation` amount and so"
" do not encroach on the space set."
msgstr ""
"`refreservation` 属性使得可以为特定数据集的使用保证一定的空间，但不包括其子数据集。这意味着在 "
"[.filename]#storage/home/bob# 上设置 10GB 的保留空间，如果另一个数据集尝试使用空闲空间，至少要保留 10GB "
"的空间给该数据集。与常规的 <<zfs-term-reservation , reservation>> "
"不同，快照和子数据集使用的空间不计入保留空间。例如，如果对 [.filename]#storage/home/bob# 进行快照，除了 "
"`refreservation` 的空间之外，必须存在足够的磁盘空间才能成功进行操作。主数据集的子数据集不计入 `refreservation` "
"的空间，因此不会侵占设置的空间。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2845
#, fuzzy, no-wrap
msgid "[[zfs-term-resilver]]Resilver"
msgstr "[[zfs-term-resilver]] 重建"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2846
#, fuzzy, no-wrap
msgid ""
"When replacing a failed disk, ZFS must fill the new disk with the lost data."
" _Resilvering_ is the process of using the parity information distributed "
"across the remaining drives to calculate and write the missing data to the "
"new drive."
msgstr ""
"当替换一个故障的磁盘时， ZFS 必须用丢失的数据填充新的磁盘。_重建_是使用分布在剩余驱动器上的奇偶校验信息来计算并将丢失的数据写入新驱动器的过程。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2847
#, fuzzy, no-wrap
msgid "[[zfs-term-online]]Online"
msgstr "[[zfs-term-online]] 在线"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2849
#, fuzzy, no-wrap
msgid ""
"A pool or vdev in the `Online` state has its member devices connected and "
"fully operational. Individual devices in the `Online` state are functioning."
msgstr "处于“在线”状态的池或 vdev 具有其成员设备连接并完全运行。处于“在线”状态的个别设备正在正常运行。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2850
#, fuzzy, no-wrap
msgid "[[zfs-term-offline]]Offline"
msgstr "[[zfs-term-offline]] 离线"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2852
#, fuzzy, no-wrap
msgid ""
"The administrator puts individual devices in an `Offline` state if enough "
"redundancy exists to avoid putting the pool or vdev into a <<zfs-term-"
"faulted,Faulted>> state. An administrator may choose to offline a disk in "
"preparation for replacing it, or to make it easier to identify."
msgstr ""
"如果存在足够的冗余以避免使存储池或虚拟设备进入“故障”状态，管理员会将单个设备设置为“离线”状态。管理员可以选择将磁盘设置为离线状态，以便准备更换它，或者为了更容易识别。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2853
#, fuzzy, no-wrap
msgid "[[zfs-term-degraded]]Degraded"
msgstr "[[zfs-term-degraded]] 降级"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2855
#, fuzzy, no-wrap
msgid ""
"A pool or vdev in the `Degraded` state has one or more disks that "
"disappeared or failed. The pool is still usable, but if other devices fail, "
"the pool may become unrecoverable. Reconnecting the missing devices or "
"replacing the failed disks will return the pool to an <<zfs-term-"
"online,Online>> state after the reconnected or new device has completed the "
"<<zfs-term-resilver,Resilver>> process."
msgstr ""
"处于“降级”状态的池或 vdev "
"有一个或多个磁盘消失或失败。池仍然可用，但如果其他设备失败，池可能变得无法恢复。重新连接丢失的设备或替换失败的磁盘将在重新连接或新设备完成“ "
"Resilver ”过程后将池恢复到“在线”状态。"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2856
#, fuzzy, no-wrap
msgid "[[zfs-term-faulted]]Faulted"
msgstr "[[zfs-term-faulted]] 故障"

#. type: Table
#: documentation/content/en/books/handbook/zfs/_index.adoc:2857
#, fuzzy, no-wrap
msgid ""
"A pool or vdev in the `Faulted` state is no longer operational. Accessing "
"the data is no longer possible. A pool or vdev enters the `Faulted` state "
"when the number of missing or failed devices exceeds the level of redundancy"
" in the vdev. If reconnecting missing devices the pool will return to an "
"<<zfs-term-online,Online>> state. Insufficient redundancy to compensate for "
"the number of failed disks loses the pool contents and requires restoring "
"from backups."
msgstr ""
"处于“故障”状态的池或 vdev 不再可操作。无法访问数据。当缺失或故障设备的数量超过 vdev 中的冗余级别时，池或 vdev "
"进入“故障”状态。如果重新连接缺失的设备，池将返回到“在线”状态。冗余不足以弥补故障磁盘数量会导致池内容丢失，并需要从备份中恢复。"
